/**
 * Project Wonderland
 *
 * Copyright (c) 2004-2009, Sun Microsystems, Inc., All Rights Reserved
 *
 * Redistributions in source code form must reproduce the above
 * copyright and this condition.
 *
 * The contents of this file are subject to the GNU General Public
 * License, Version 2 (the "License"); you may not use this file
 * except in compliance with the License. A copy of the License is
 * available at http://www.opensource.org/licenses/gpl-license.php.
 *
 * Sun designates this particular file as subject to the "Classpath"
 * exception as provided by Sun in the License file that accompanied
 * this code.
 */
package org.jdesktop.wonderland.modules.rockwellcollins.clickablelink.client;

import javax.swing.JPanel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

import org.jdesktop.wonderland.client.cell.properties.CellPropertiesEditor;
import org.jdesktop.wonderland.client.cell.properties.annotation.PropertiesFactory;
import org.jdesktop.wonderland.client.cell.properties.spi.PropertiesFactorySPI;
import org.jdesktop.wonderland.common.cell.state.CellServerState;
import org.jdesktop.wonderland.modules.rockwellcollins.clickablelink.common.ClickableLinkComponentServerState;


/**
 * Panel for setting the properties of the ClickableLinkComponent.  Mostly cribbed off of 
 * the PortalProperties page.
 * 
 * @author Ben (shavnir)
 */
@PropertiesFactory(ClickableLinkComponentServerState.class)
public class ClickableLinkComponentProperties extends javax.swing.JPanel
		implements PropertiesFactorySPI{

	private CellPropertiesEditor editor = null;
	private String linkURL= null;
	
	/** Creates new form ClickableLinkComponentProperties */
	public ClickableLinkComponentProperties() {
		initComponents();
		TextFieldListener listener = new TextFieldListener();
        urlTF.getDocument().addDocumentListener(listener);
	}

	class TextFieldListener implements DocumentListener {
        public void insertUpdate(DocumentEvent e) {
            checkDirty();
        }

        public void removeUpdate(DocumentEvent e) {
            checkDirty();
        }

        public void changedUpdate(DocumentEvent e) {
            checkDirty();
        }

        private void checkDirty() {
            if (editor == null) {
                return;
            }
            boolean clean = urlTF.getText().equals(linkURL);
            editor.setPanelDirty(ClickableLinkComponentProperties.class, !clean);
        }
    }
	
	
	
	
	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jLabel1 = new javax.swing.JLabel();
		urlTF = new javax.swing.JTextField();

		jLabel1.setText("Link URL:");

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		this.setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				layout.createSequentialGroup().addContainerGap().addComponent(
						jLabel1).addPreferredGap(
						javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(urlTF,
								javax.swing.GroupLayout.DEFAULT_SIZE, 282,
								Short.MAX_VALUE)));
		layout
				.setVerticalGroup(layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								layout
										.createSequentialGroup()
										.addContainerGap()
										.addGroup(
												layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(jLabel1)
														.addComponent(
																urlTF,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE))
										.addContainerGap(
												javax.swing.GroupLayout.DEFAULT_SIZE,
												Short.MAX_VALUE)));
	}// </editor-fold>//GEN-END:initComponents

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JLabel jLabel1;
	private javax.swing.JTextField urlTF;

	// End of variables declaration//GEN-END:variables
	

	@Override
	public String getDisplayName() {
		return "Clickable Link URL";
	}



	@Override
	public void apply() {
		CellServerState cellServerState = editor.getCellServerState();
		ClickableLinkComponentServerState state = (ClickableLinkComponentServerState) 
            cellServerState.getComponentServerState(ClickableLinkComponentServerState.class);
        if (state == null) {
            state = new ClickableLinkComponentServerState();
        }
        
        String serverURL = urlTF.getText().trim();
        if (serverURL.length() == 0) {
            serverURL = null;
        }
        state.setLinkURL(serverURL);
        editor.addToUpdateList(state);
	}

	@Override
	public void close() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public JPanel getPropertiesJPanel() {
		return this;
	}

	@Override
	public void open() {
		CellServerState cellServerState = editor.getCellServerState();
		ClickableLinkComponentServerState state = (ClickableLinkComponentServerState)
                 cellServerState.getComponentServerState(ClickableLinkComponentServerState.class);
        if (state != null) {
        	linkURL = state.getLinkURL();
            if (linkURL != null) {
                urlTF.setText(linkURL);
            }
        }
	}

	@Override
	public void restore() {
		urlTF.setText(linkURL);
	}

	@Override
	public void setCellPropertiesEditor(CellPropertiesEditor editor) {
		this.editor = editor;
	}

}
