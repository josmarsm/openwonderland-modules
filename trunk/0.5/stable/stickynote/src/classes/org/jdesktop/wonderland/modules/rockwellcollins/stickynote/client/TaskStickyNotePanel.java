/**
 * Project Wonderland
 *
 * Copyright (c) 2004-2009, Sun Microsystems, Inc., All Rights Reserved
 *
 * Redistributions in source code form must reproduce the above
 * copyright and this condition.
 *
 * The contents of this file are subject to the GNU General Public
 * License, Version 2 (the "License"); you may not use this file
 * except in compliance with the License. A copy of the License is
 * available at http://www.opensource.org/licenses/gpl-license.php.
 *
 * Sun designates this particular file as subject to the "Classpath"
 * exception as provided by Sun in the License file that accompanied
 * this code.
 */
package org.jdesktop.wonderland.modules.rockwellcollins.stickynote.client;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;

import java.util.logging.Logger;
import javax.swing.JWindow;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.Timer;
import org.jdesktop.wonderland.modules.rockwellcollins.stickynote.client.cell.StickyNoteCell;
import org.jdesktop.wonderland.modules.rockwellcollins.stickynote.common.cell.StickyNoteCellClientState;
import org.jdesktop.wonderland.modules.rockwellcollins.stickynote.common.cell.StickyNoteTypes;
import org.jdesktop.wonderland.modules.rockwellcollins.stickynote.common.messages.StickyNoteSyncMessage;
import org.jdesktop.wonderland.client.hud.*;
import org.jdesktop.wonderland.client.hud.HUDManagerFactory;

/**
 *  The Task sticky note panel viewed in Wonderland.
 * @author Ryan (mymegabyte)
 */
public class TaskStickyNotePanel extends javax.swing.JPanel implements ActionListener, StickyNotePanel {

    private JFrame frame;
    private static Logger logger = Logger.getLogger(TaskStickyNotePanel.class.getName());
    private StickyNoteCell cell;
    private StickyNoteCellClientState lastSyncState = new StickyNoteCellClientState();
    private Timer keyTimer;
    private HUD mainHUD;
    private HUDComponent hudComponent;
    private JPanel parentPanel;

    /** Creates new form FreeStickynotePanel */
    public TaskStickyNotePanel() {
        initComponents();
        keyTimer = new Timer(1000, this);
        mainHUD = HUDManagerFactory.getHUDManager().getHUD("main");
    }

    /** Creates new form FreeStickynotePanel */
    public TaskStickyNotePanel(StickyNoteCell cell, StickyNoteCellClientState state, JPanel parent) {
        this();
        this.cell = cell;
        parentPanel = parent;
        lastSyncState = state;
        setFields();
        detailsPanel.setVisible(false);
        this.revalidate();
        
    }

    public void setFrame(JFrame frame) {
        this.frame = frame;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        taskNameField = new javax.swing.JTextField();
        expandButton = new javax.swing.JToggleButton();
        detailsPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        assigneeField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        dueField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        statusField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        notesPane = new javax.swing.JTextArea();

        setBackground(new java.awt.Color(255, 255, 153));
        setPreferredSize(new java.awt.Dimension(300, 30));
        setRequestFocusEnabled(false);

        jLabel1.setFont(new java.awt.Font("Verdana", 0, 14));
        jLabel1.setLabelFor(taskNameField);
        jLabel1.setText("Task:");

        taskNameField.setBackground(new java.awt.Color(255, 255, 153));
        taskNameField.setFont(new java.awt.Font("Verdana", 0, 14));
        taskNameField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                formFieldFocusLost(evt);
            }
        });

        expandButton.setBackground(new java.awt.Color(255, 255, 153));
        expandButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/jdesktop/wonderland/modules/rockwellcollins/stickynote/client/resources/downArrow23x10.png"))); // NOI18N
        expandButton.setPreferredSize(new java.awt.Dimension(20, 19));
        expandButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                expandButtonActionPerformed(evt);
            }
        });

        detailsPanel.setBackground(new java.awt.Color(255, 255, 153));

        jLabel2.setFont(new java.awt.Font("Verdana", 0, 14));
        jLabel2.setLabelFor(assigneeField);
        jLabel2.setText("Assignee:");

        assigneeField.setBackground(new java.awt.Color(255, 255, 153));
        assigneeField.setFont(new java.awt.Font("Verdana", 0, 14));
        assigneeField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                formFieldFocusLost(evt);
            }
        });

        jLabel3.setBackground(new java.awt.Color(255, 255, 153));
        jLabel3.setFont(new java.awt.Font("Verdana", 0, 14));
        jLabel3.setLabelFor(dueField);
        jLabel3.setText("Due:");

        dueField.setBackground(new java.awt.Color(255, 255, 153));
        dueField.setFont(new java.awt.Font("Verdana", 0, 14));
        dueField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                formFieldFocusLost(evt);
            }
        });

        jLabel4.setBackground(new java.awt.Color(255, 255, 204));
        jLabel4.setFont(new java.awt.Font("Verdana", 0, 14));
        jLabel4.setLabelFor(statusField);
        jLabel4.setText("Status:");

        statusField.setBackground(new java.awt.Color(255, 255, 153));
        statusField.setFont(new java.awt.Font("Verdana", 0, 14));
        statusField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                formFieldFocusLost(evt);
            }
        });

        jLabel5.setBackground(new java.awt.Color(255, 255, 153));
        jLabel5.setFont(new java.awt.Font("Verdana", 0, 14));
        jLabel5.setLabelFor(notesPane);
        jLabel5.setText("Notes:");

        jScrollPane2.setBackground(new java.awt.Color(255, 255, 153));

        notesPane.setBackground(new java.awt.Color(255, 255, 153));
        notesPane.setColumns(20);
        notesPane.setFont(new java.awt.Font("Verdana", 0, 14));
        notesPane.setLineWrap(true);
        notesPane.setRows(5);
        notesPane.setWrapStyleWord(true);
        notesPane.setPreferredSize(null);
        notesPane.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                formFieldFocusLost(evt);
            }
        });
        jScrollPane2.setViewportView(notesPane);

        org.jdesktop.layout.GroupLayout detailsPanelLayout = new org.jdesktop.layout.GroupLayout(detailsPanel);
        detailsPanel.setLayout(detailsPanelLayout);
        detailsPanelLayout.setHorizontalGroup(
            detailsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 286, Short.MAX_VALUE)
            .add(detailsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(detailsPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .add(detailsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, jScrollPane2)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, detailsPanelLayout.createSequentialGroup()
                            .add(detailsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                .add(jLabel2)
                                .add(jLabel3)
                                .add(jLabel4)
                                .add(jLabel5))
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(detailsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                .add(dueField)
                                .add(org.jdesktop.layout.GroupLayout.TRAILING, statusField)
                                .add(assigneeField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE))))
                    .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        detailsPanelLayout.setVerticalGroup(
            detailsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 255, Short.MAX_VALUE)
            .add(detailsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(detailsPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .add(detailsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(jLabel2)
                        .add(assigneeField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                    .add(detailsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(jLabel3)
                        .add(dueField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                    .add(detailsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(jLabel4)
                        .add(statusField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                    .add(jLabel5)
                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                    .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 119, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(taskNameField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 219, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(expandButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(layout.createSequentialGroup()
                    .addContainerGap()
                    .add(detailsPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(taskNameField))
                .add(277, 277, 277))
            .add(layout.createSequentialGroup()
                .add(expandButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(282, Short.MAX_VALUE))
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(layout.createSequentialGroup()
                    .add(35, 35, 35)
                    .add(detailsPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFieldFocusLost
        logger.fine("formFieldFocusLost");
        keyTimer.stop();
        checkSendChanges();
    }//GEN-LAST:event_formFieldFocusLost

    private void formFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFieldFocusGained
        logger.fine("formFieldFocusGained");
        keyTimer.start();
    }//GEN-LAST:event_formFieldFocusGained

    private void expandButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_expandButtonActionPerformed
        setExpandedState(expandButton.isSelected());
    }//GEN-LAST:event_expandButtonActionPerformed

    private void setExpandedState(boolean expanded) {
        detailsPanel.setVisible(expanded);
        if(expanded) {
            setPreferredSize(new Dimension(300,300));
            this.revalidate();
            expandButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/jdesktop/wonderland/modules/rockwellcollins/stickynote/client/resources/upArrow23x10.png")));
            if(hudComponent == null) {
                parentPanel.remove(this);
                hudComponent = mainHUD.createComponent(this);
                mainHUD.addComponent(hudComponent);
                hudComponent.setVisible(true);
                hudComponent.addEventListener(new HUDEventListener() {

                    public void HUDObjectChanged(HUDEvent event) {
                        if(event.getEventType().equals(HUDEvent.HUDEventType.CLOSED)) {
                            setExpandedState(false);

                        }
                    }
                });
            }

        } else {
            setPreferredSize(new Dimension(300,30));
            this.revalidate();
            expandButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/jdesktop/wonderland/modules/rockwellcollins/stickynote/client/resources/downArrow23x10.png")));
            if(hudComponent != null) {
                //hudComponent.setVisible(false);
                SwingUtilities.invokeLater(new Runnable() { public void run() {
                    mainHUD.removeComponent(hudComponent);
                    hudComponent = null;
                    
                }});
                parentPanel.add(this);
                parentPanel.revalidate();
                cell.getApp().getControlArb().releaseControl();
            }
        }
    }

    private boolean ortho = false;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField assigneeField;
    private javax.swing.JPanel detailsPanel;
    private javax.swing.JTextField dueField;
    private javax.swing.JToggleButton expandButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea notesPane;
    private javax.swing.JTextField statusField;
    private javax.swing.JTextField taskNameField;
    // End of variables declaration//GEN-END:variables

    public static void main(String args[]) {
        JWindow j = new JWindow();
        //JFrame j = new JFrame();
//        j.addMouseMotionListener(new MouseMotionAdapter() {
//           public void mouseMoved(java.awt.event.MouseEvent evt) {
//                System.out.println(evt);
//            }
//        });
        System.out.println(j.getLayout());
        j.add(new TaskStickyNotePanel());
        j.pack();
        j.setVisible(true);
    }

    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == keyTimer) {
            // Check to see if we need to send a message w/ new text to the clients
            checkSendChanges();
        }
    }

    private synchronized void checkSendChanges() {
        logger.fine("Checking to see if we need to send changes.");
        StickyNoteCellClientState testState = new StickyNoteCellClientState();
        testState.setNoteAssignee(assigneeField.getText());
        testState.setNoteDue(dueField.getText());
        testState.setNoteName(taskNameField.getText());
        testState.setNoteStatus(statusField.getText());
        testState.setNoteText(notesPane.getText());
        testState.setNoteType(StickyNoteTypes.TASK);
        testState.setNoteColor(lastSyncState.getNoteColor());

        if (testState.hasChanges(lastSyncState)) {
            cell.sendSyncMessage(testState);
            lastSyncState.copyLocal(testState);
            logger.fine("Sent sync message to server.");
        }
    }

    public void processMessage(final StickyNoteSyncMessage pcm) {
         lastSyncState = pcm.getState();
         setFields();     
    }

    public void setFields() {
        SwingUtilities.invokeLater(new Runnable() {

            public void run() {
                if(lastSyncState == null) {
                    return;
                }
                assigneeField.setText(lastSyncState.getNoteAssignee());
                dueField.setText(lastSyncState.getNoteDue());
                taskNameField.setText(lastSyncState.getNoteName());
                statusField.setText(lastSyncState.getNoteStatus());
                notesPane.setText(lastSyncState.getNoteText());
                setColor(lastSyncState.getNoteColor());
            }
        });
    }

    public void setColor(String color) {
        Color newColor = StickyNoteCell.parseColorString(color);

        this.setBackground(newColor);
        taskNameField.setBackground(newColor);
        expandButton.setBackground(newColor);
        detailsPanel.setBackground(newColor);
        assigneeField.setBackground(newColor);
        dueField.setBackground(newColor);
        statusField.setBackground(newColor);
        jScrollPane2.setBackground(newColor);
        notesPane.setBackground(newColor);
        parentPanel.setBackground(newColor);

        lastSyncState.setNoteColor(color);
    }
}
