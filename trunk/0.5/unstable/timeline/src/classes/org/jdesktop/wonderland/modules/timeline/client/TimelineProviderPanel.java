/**
 * Project Wonderland
 *
 * Copyright (c) 2004-2009, Sun Microsystems, Inc., All Rights Reserved
 *
 * Redistributions in source code form must reproduce the above
 * copyright and this condition.
 *
 * The contents of this file are subject to the GNU General Public
 * License, Version 2 (the "License"); you may not use this file
 * except in compliance with the License. A copy of the License is
 * available at http://www.opensource.org/licenses/gpl-license.php.
 *
 * Sun designates this particular file as subject to the "Classpath"
 * exception as provided by Sun in the License file that accompanied
 * this code.
 */
package org.jdesktop.wonderland.modules.timeline.client;

/**
 * A query panel for a provider
 *
 * @author nsimpson
 */
public class TimelineProviderPanel extends javax.swing.JPanel {

    public TimelineProviderPanel() {
        initComponents();
    }

    /**
     * Set the user visible name of the provider
     * @param name the provider name
     */
    public void setProviderName(String name) {
        providerCheckBox.setText(name);
        validate();
    }

    /**
     * Get the user visible name of the provider
     * @return the provider name
     */
    public String getProviderName() {
        return providerCheckBox.getText();
    }

    /**
     * Mark this provider as selected/unselected
     * @param selected true to mark the provider as selected, false to
     * unselect
     */
    public void selectProvider(boolean selected) {
        providerCheckBox.setSelected(selected);
    }

    /**
     * Get whether this provider is selected
     * @return true if the provider is selected, false otherwise
     */
    public boolean isProviderSelected() {
        return providerCheckBox.isSelected();
    }

    /**
     * Add a query to the set of available query criteria
     * @param criteria a new query
     */
    public void addQueryCriteria(Object criteria) {
        providerComboBox.addItem(criteria);
    }

    /**
     * Remove a query from the the set of available query criteria
     * @param criteria the query criteria to remove
     */
    public void removeQueryCriteria(Object criteria) {
        providerComboBox.removeItem(criteria);
    }

    /**
     * Get the selected query criteria
     * @return the currently selected query criteria
     */
    public Object getQueryCriteria() {
        return providerComboBox.getSelectedItem();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        providerCheckBox = new javax.swing.JCheckBox();
        providerComboBox = new javax.swing.JComboBox();
        providerAdvancedButton = new javax.swing.JButton();

        providerCheckBox.setText("Provider");
        providerCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                providerCheckBoxActionPerformed(evt);
            }
        });

        providerComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "query criteria" }));
        providerComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                providerComboBoxActionPerformed(evt);
            }
        });

        providerAdvancedButton.setText("Advanced...");
        providerAdvancedButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                providerAdvancedButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(providerCheckBox)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(providerComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 177, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(providerAdvancedButton))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(providerCheckBox)
                .add(providerComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(providerAdvancedButton))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void providerCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_providerCheckBoxActionPerformed
        // TODO: include this provider in query
}//GEN-LAST:event_providerCheckBoxActionPerformed

    private void providerAdvancedButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_providerAdvancedButtonActionPerformed
        // TODO: display advanced configuration dialog for provider
}//GEN-LAST:event_providerAdvancedButtonActionPerformed

    private void providerComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_providerComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_providerComboBoxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton providerAdvancedButton;
    private javax.swing.JCheckBox providerCheckBox;
    private javax.swing.JComboBox providerComboBox;
    // End of variables declaration//GEN-END:variables

}
