/**
 * Project Wonderland
 *
 * Copyright (c) 2004-2009, Sun Microsystems, Inc., All Rights Reserved
 *
 * Redistributions in source code form must reproduce the above
 * copyright and this condition.
 *
 * The contents of this file are subject to the GNU General Public
 * License, Version 2 (the "License"); you may not use this file
 * except in compliance with the License. A copy of the License is
 * available at http://www.opensource.org/licenses/gpl-license.php.
 *
 * Sun designates this particular file as subject to the "Classpath"
 * exception as provided by Sun in the License file that accompanied
 * this code.
 */
package org.jdesktop.wonderland.modules.cmu.client;

import org.jdesktop.wonderland.modules.cmu.common.PlaybackDefaults;

/**
 *
 * @author kevin
 */
public class CMUJPanel extends javax.swing.JPanel implements PlaybackChangeListener, GroundPlaneChangeListener {

    private final static String PLAYBUTTON_PATH = "/org/jdesktop/wonderland/modules/cmu/client/resources/control_play.png";
    private final static String PAUSEBUTTON_PATH = "/org/jdesktop/wonderland/modules/cmu/client/resources/control_pause.png";
    private final int PLAYBACK_MIN;
    private final int PLAYBACK_MAX;
    private boolean playing;
    private transient final Object playbackLock = new Object();
    private final CMUCell cell;

    /** Creates new form CMUHUD */
    public CMUJPanel(CMUCell cell) {
        initComponents();
        PLAYBACK_MIN = playbackSlider.getMinimum();
        PLAYBACK_MAX = playbackSlider.getMaximum();
        this.cell = cell;
        this.cell.addPlaybackChangeListener(this);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        groundVisibleBox = new javax.swing.JCheckBox();
        playbackSlider = new javax.swing.JSlider();
        playPauseButton = new javax.swing.JButton();
        restartButton = new javax.swing.JButton();
        speedResetButton = new javax.swing.JButton();
        javax.swing.JLabel speedFixedLabel = new javax.swing.JLabel();
        speedLabel = new javax.swing.JLabel();

        groundVisibleBox.setText("Ground visible?");
        groundVisibleBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                groundVisibleBoxMouseReleased(evt);
            }
        });

        playbackSlider.setFont(new java.awt.Font("DejaVu Sans", 0, 1));
        playbackSlider.setMaximum(10);
        playbackSlider.setPaintTrack(false);
        playbackSlider.setSnapToTicks(true);
        playbackSlider.setToolTipText("Playback speed");
        playbackSlider.setValue(1);
        playbackSlider.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        playbackSlider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                playbackSliderMouseReleased(evt);
            }
        });
        playbackSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                playbackSliderStateChanged(evt);
            }
        });

        playPauseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/jdesktop/wonderland/modules/cmu/client/resources/control_play.png"))); // NOI18N
        playPauseButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        playPauseButton.setBorderPainted(false);
        playPauseButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                playPauseButtonMouseReleased(evt);
            }
        });

        restartButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/jdesktop/wonderland/modules/cmu/client/resources/control_start.png"))); // NOI18N
        restartButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        restartButton.setBorderPainted(false);
        restartButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                restartButtonMouseReleased(evt);
            }
        });

        speedResetButton.setText("Reset");
        speedResetButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        speedResetButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                speedResetButtonMouseReleased(evt);
            }
        });

        speedFixedLabel.setText("Speed:");

        speedLabel.setText("1x");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(speedFixedLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(speedLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(speedResetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(playbackSlider, 0, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(playPauseButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(restartButton, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(groundVisibleBox)))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(speedFixedLabel)
                    .addComponent(speedLabel)
                    .addComponent(speedResetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(playbackSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(playPauseButton)
                    .addComponent(restartButton)
                    .addComponent(groundVisibleBox, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void playPauseButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playPauseButtonMouseReleased
        // Toggle play/pause
        cell.setPlaying(!isPlaying());
    }//GEN-LAST:event_playPauseButtonMouseReleased

    private void playbackSliderMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playbackSliderMouseReleased
        cell.setPlaybackSpeed((float) playbackSlider.getValue());
    }//GEN-LAST:event_playbackSliderMouseReleased

    private void playbackSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_playbackSliderStateChanged
        speedLabel.setText(playbackSlider.getValue() + "x");
    }//GEN-LAST:event_playbackSliderStateChanged

    private void speedResetButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_speedResetButtonMouseReleased
        cell.setPlaybackSpeed(PlaybackDefaults.DEFAULT_START_SPEED);
    }//GEN-LAST:event_speedResetButtonMouseReleased

    private void groundVisibleBoxMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_groundVisibleBoxMouseReleased
        cell.setGroundPlaneShowing(groundVisibleBox.isSelected());
    }//GEN-LAST:event_groundVisibleBoxMouseReleased

    private void restartButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_restartButtonMouseReleased
        cell.restart();
    }//GEN-LAST:event_restartButtonMouseReleased

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox groundVisibleBox;
    private javax.swing.JButton playPauseButton;
    private javax.swing.JSlider playbackSlider;
    private javax.swing.JButton restartButton;
    private javax.swing.JLabel speedLabel;
    private javax.swing.JButton speedResetButton;
    // End of variables declaration//GEN-END:variables

    //TODO: THREAD SAFETY!
    public void playbackChanged(PlaybackChangeEvent e) {
        synchronized (this.playbackLock) {
            // Set play/pause appropriately
            setPlaying(e.isPlaying());

            // Set playback speed
            setPlaybackSpeed(e.getPlaybackSpeed());
        }
    }

    private void setPlaybackSpeed(float fPlaybackSpeed) {
        int playbackSpeed = (int) fPlaybackSpeed;
        if (playbackSpeed < PLAYBACK_MIN) {
            playbackSpeed = PLAYBACK_MIN;
        }
        if (playbackSpeed > PLAYBACK_MAX) {
            playbackSpeed = PLAYBACK_MAX;
        }
        synchronized (this.playbackLock) {
            playbackSlider.setValue(playbackSpeed);
        }
    }

    private boolean isPlaying() {
        synchronized (this.playbackLock) {
            return playing;
        }
    }

    private void setPlaying(boolean playing) {
        synchronized (this.playbackLock) {
            if (playing != this.playing) {
                this.playing = playing;
                if (playing) {
                    playPauseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(PAUSEBUTTON_PATH)));
                } else {
                    playPauseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(PLAYBUTTON_PATH)));
                }
            }
        }
    }

    public void groundPlaneChanged(GroundPlaneChangeEvent e) {
        this.groundVisibleBox.setSelected(e.isShowingPlane());
    }
}
