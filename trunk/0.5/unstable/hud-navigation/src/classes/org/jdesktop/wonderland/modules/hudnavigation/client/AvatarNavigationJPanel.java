 /**
 * Project Wonderland
 *
 * Copyright (c) 2004-2009, Sun Microsystems, Inc., All Rights Reserved
 *
 * Redistributions in source code form must reproduce the above
 * copyright and this condition.
 *
 * The contents of this file are subject to the GNU General Public
 * License, Version 2 (the "License"); you may not use this file
 * except in compliance with the License. A copy of the License is
 * available at http://www.opensource.org/licenses/gpl-license.php.
 *
 * Sun designates this particular file as subject to the "Classpath" 
 * exception as provided by Sun in the License file that accompanied 
 * this code.
 */
package org.jdesktop.wonderland.modules.hudnavigation.client;

import imi.character.avatar.AvatarContext.TriggerNames;
import java.util.logging.Logger;
import org.jdesktop.wonderland.client.cell.Cell.RendererType;
import org.jdesktop.wonderland.client.cell.CellRenderer;
import org.jdesktop.wonderland.client.cell.view.ViewCell;
import org.jdesktop.wonderland.client.jme.ViewManager;
import org.jdesktop.wonderland.modules.avatarbase.client.jme.cellrenderer.AvatarImiJME;
import org.jdesktop.wonderland.modules.avatarbase.client.jme.cellrenderer.WlAvatarCharacter;

/**
 * A JPanel to display simple navigation controls for an Avatar
 *
 * @author Jordan Slott <jslott@dev.java.net>
 */
public class AvatarNavigationJPanel extends javax.swing.JPanel {

    // The error logger
    private static final Logger LOGGER =
            Logger.getLogger(AvatarNavigationJPanel.class.getName());

    // The avatar character, needed to given input to
    private WlAvatarCharacter avatarCharacter = null;

    /**
     * Creates a new JPanel. This method assumes there is a primary view Cell
     * that already exists.
     */
    public AvatarNavigationJPanel() {
        initComponents();

        // Fetch the primary view Cell, assume it exists.
        ViewManager viewManager = ViewManager.getViewManager();
        ViewCell viewCell = viewManager.getPrimaryViewCell();
        CellRenderer rend = viewCell.getCellRenderer(RendererType.RENDERER_JME);
        if (!(rend instanceof AvatarImiJME)) {
            LOGGER.warning("Cell renderer for view " + viewCell.getName() +
                    " is not of type AvatarImiJME.");
            return;
        }

        // Fetch out the avatar character from this
        avatarCharacter = ((AvatarImiJME)rend).getAvatarCharacter();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        forwardB = new javax.swing.JButton();
        backwardB = new javax.swing.JButton();
        leftB = new javax.swing.JButton();
        rightB = new javax.swing.JButton();

        forwardB.setText("Walk Forward");
        forwardB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                directionBMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                directionBMouseReleased(evt);
            }
        });

        backwardB.setText("Walk Backwards");
        backwardB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                directionBMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                directionBMouseReleased(evt);
            }
        });

        leftB.setText("Turn Left");
        leftB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                directionBMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                directionBMouseReleased(evt);
            }
        });

        rightB.setText("Turn Right");
        rightB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                directionBMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                directionBMouseReleased(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(leftB)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 113, Short.MAX_VALUE)
                .add(rightB)
                .add(47, 47, 47))
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(98, 98, 98)
                        .add(forwardB))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(99, 99, 99)
                        .add(backwardB)))
                .addContainerGap(102, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(new java.awt.Component[] {backwardB, forwardB}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        jPanel1Layout.linkSize(new java.awt.Component[] {leftB, rightB}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(forwardB)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(leftB)
                    .add(rightB))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(backwardB)
                .addContainerGap())
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void directionBMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_directionBMousePressed
        if (evt.getSource() == forwardB) {
            avatarCharacter.triggerActionStart(TriggerNames.Move_Forward);
        } else if (evt.getSource() == rightB) {
            avatarCharacter.triggerActionStart(TriggerNames.Move_Right);
        } else if (evt.getSource() == backwardB) {
            avatarCharacter.triggerActionStart(TriggerNames.Move_Back);
        } else if (evt.getSource() == leftB) {
            avatarCharacter.triggerActionStart(TriggerNames.Move_Left);
        }
}//GEN-LAST:event_directionBMousePressed

    private void directionBMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_directionBMouseReleased
        if (evt.getSource() == forwardB) {
            avatarCharacter.triggerActionStop(TriggerNames.Move_Forward);
        } else if (evt.getSource() == rightB) {
            avatarCharacter.triggerActionStop(TriggerNames.Move_Right);
        } else if (evt.getSource() == backwardB) {
            avatarCharacter.triggerActionStop(TriggerNames.Move_Back);
        } else if (evt.getSource() == leftB) {
            avatarCharacter.triggerActionStop(TriggerNames.Move_Left);
        }
}//GEN-LAST:event_directionBMouseReleased

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backwardB;
    private javax.swing.JButton forwardB;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton leftB;
    private javax.swing.JButton rightB;
    // End of variables declaration//GEN-END:variables
}
