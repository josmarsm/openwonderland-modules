/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ConstructPanel.java
 *
 * Created on Aug 10, 2009, 10:22:50 PM
 */

package org.jdesktop.wonderland.modules.marbleous.client.ui;

import java.awt.Image;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.jdesktop.wonderland.client.cell.registry.spi.CellFactorySPI;
import org.jdesktop.wonderland.client.cell.utils.CellCreationException;
import org.jdesktop.wonderland.client.cell.utils.CellUtils;
import org.jdesktop.wonderland.common.cell.state.CellServerState;
import org.jdesktop.wonderland.modules.marbleous.common.TrackSegmentType;

/**
 *
 * @author bh37721
 */
public class ConstructPanel extends javax.swing.JPanel implements ListSelectionListener {

    /* A map of track segment type names and their track segment types */
    private final Map<String, TrackSegmentType> segmentTypeMap = new HashMap();

    /* The "No Preview Available" image */
    private Image noPreviewAvailableImage = null;

    private Container container;

    void setContainer(Container aContainer) {
        container = aContainer;
    }

    public interface Container {

    }

    /** Creates new form ConstructPanel */
    public ConstructPanel() {
        initComponents();
        updateListValues();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        createButton = new javax.swing.JButton();
        cellScrollPane = new javax.swing.JScrollPane();
        cellList = new javax.swing.JList();
        previewPanel = new javax.swing.JPanel();
        previewLabel = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        jLabel1.setText("Track Segment To Add:");

        createButton.setText("Add");
        createButton.setEnabled(false);
        createButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createButtoncreateActionPerformed(evt);
            }
        });

        cellList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        cellScrollPane.setViewportView(cellList);

        previewPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        previewPanel.setMinimumSize(new java.awt.Dimension(128, 128));
        previewPanel.setPreferredSize(new java.awt.Dimension(128, 128));
        previewPanel.setLayout(new java.awt.GridLayout(1, 0));

        previewLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        previewLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        previewLabel.setIconTextGap(0);
        previewPanel.add(previewLabel);

        jButton1.setText("Run");
        jButton1.setActionCommand("run");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(cellScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 254, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(previewPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addComponent(createButton)
                        .addGap(64, 64, 64)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cellScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 231, Short.MAX_VALUE)
                    .addComponent(previewPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(createButton)
                    .addComponent(jButton1))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void createButtoncreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createButtoncreateActionPerformed

        synchronized (segmentTypeMap) {
            // From the selected value, find the proper means to create the object
            String typeName = (String) cellList.getSelectedValue();
            TrackSegmentType segmentType = segmentTypeMap.get(typeName);

            // TODO: Add the new segment to the track.
            System.err.println("Segment add: type = " + typeName);
        }

}//GEN-LAST:event_createButtoncreateActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed


    /**
     * Updates the list of values displayed from the track segment factory
     */
    private void updateListValues() {
        // Let's synchronized around segmentTypeMap so that any selections do
        // not interfere with changes in this map
        synchronized (segmentTypeMap) {
            // Clear out any existing entries in the map of supported types
            segmentTypeMap.clear();

            // Fetch the registry of cells and for each, get the palette info and
            // populate the list.
            TrackSegmentType[] segmentTypes = TrackSegmentType.getSupportedTypes();
            List<String> listNames = new LinkedList();

            // Loop through each segment type we find. Insert the type names into
            // a list. Ignore any types without a name.
            for (TrackSegmentType segmentType : segmentTypes) {
                try {
                    String name = segmentType.getName();
                    if (name != null) {
                        listNames.add(name);
                        segmentTypeMap.put(name, segmentType);
                    }
                } catch (java.lang.Exception excp) {
                    // Just ignore, but log a message
                    Logger logger = Logger.getLogger(ConstructPanel.class.getName());
                    logger.log(Level.WARNING, "No name for track segment type " +
                            segmentType, excp);
                }
            }

            // Set the names of the list, first sorting the list in alphabetical
            // order
            Collections.sort(listNames);
            cellList.setListData(listNames.toArray(new String[]{}));
            cellList.setDragEnabled(false);
        }
    }
    
    /**
     * Handles when a selection has been made of the list of cell type names.
     * @param e
     */
    public void valueChanged(ListSelectionEvent e) {

        // We synchronized around the segmentTypeMap so that this action does not
        // interfere with any changes in the map.
        synchronized (segmentTypeMap) {

            // Fetch the name of the segment selected. If it happens to
            // be null (not sure why this would happen), then simply return.
            String selectedName = (String) cellList.getSelectedValue();
            if (selectedName == null) {
                // If nothing is selected, then disable the Insert button, the
                // preview image and disable drag-and-drop from the preview
                // label.
                createButton.setEnabled(false);
                previewLabel.setIcon(null);

                /*
                 // Make sure the recognizers are not null, and set their
                // components to null;
                if (previewRecognizer != null) {
                    previewRecognizer.setComponent(null);
                }

                if (listRecognizer != null) {
                    listRecognizer.setComponent(null);
                }
                */
                return;
            }

            // Next, fetch the Cell factory associated with the display name.
            // If it happens to be null (not sure why this would happen), then
            // simply return.
            TrackSegmentType segmentType = segmentTypeMap.get(selectedName);
            if (segmentType == null) {
                return;
            }

            // Enable the Insert button
            createButton.setEnabled(true);

            // Otherwise, update the preview image, if one exists, otherwise
            // use the default image.
            Image previewImage = segmentType.getPreviewImage();
            if (previewImage != null) {
                ImageIcon icon = new ImageIcon(previewImage);
                previewLabel.setIcon(icon);

                // Pass the necessary information for drag and drop
                //gestureListener.segmentType = cellFactory;
                //gestureListener.previewImage = previewImage;
            }
            else {
                ImageIcon icon = new ImageIcon(noPreviewAvailableImage);
                previewLabel.setIcon(icon);

                // Pass the necessary information for drag and drop
                //gestureListener.cellFactory = cellFactory;
                //gestureListener.previewImage = noPreviewAvailableImage;
            }

            // Enable drag-and-drop from the preview image, creating the
            // recognizer if necessary
            /*
             if (previewRecognizer == null) {
                previewRecognizer =
                        dragSource.createDefaultDragGestureRecognizer(previewLabel,
                        DnDConstants.ACTION_COPY_OR_MOVE, gestureListener);
            }
            else {
                previewRecognizer.setComponent(previewLabel);
            }
            */

            // Add support for drag from the text list of cells, creating the
            // recognizer if necessary
            /*
             if (listRecognizer == null) {
                listRecognizer =
                        dragSource.createDefaultDragGestureRecognizer(cellList,
                        DnDConstants.ACTION_COPY_OR_MOVE, gestureListener);
            }
            else {
                listRecognizer.setComponent(cellList);
            }
            */
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JList cellList;
    protected javax.swing.JScrollPane cellScrollPane;
    protected javax.swing.JButton createButton;
    protected javax.swing.JButton jButton1;
    protected javax.swing.JLabel jLabel1;
    protected javax.swing.JLabel previewLabel;
    protected javax.swing.JPanel previewPanel;
    // End of variables declaration//GEN-END:variables

}
