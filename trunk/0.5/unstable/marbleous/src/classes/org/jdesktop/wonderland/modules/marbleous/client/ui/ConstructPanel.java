/**
 * Project Wonderland
 *
 * Copyright (c) 2004-2009, Sun Microsystems, Inc., All Rights Reserved
 *
 * Redistributions in source code form must reproduce the above
 * copyright and this condition.
 *
 * The contents of this file are subject to the GNU General Public
 * License, Version 2 (the "License"); you may not use this file
 * except in compliance with the License. A copy of the License is
 * available at http://www.opensource.org/licenses/gpl-license.php.
 *
 * Sun designates this particular file as subject to the "Classpath"
 * exception as provided by Sun in the License file that accompanied
 * this code.
 */

package org.jdesktop.wonderland.modules.marbleous.client.ui;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.net.URL;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.ListCellRenderer;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.jdesktop.wonderland.modules.marbleous.common.Track;
import org.jdesktop.wonderland.modules.marbleous.common.TrackManager;
import org.jdesktop.wonderland.modules.marbleous.common.TrackSegment;
import org.jdesktop.wonderland.modules.marbleous.common.TrackSegmentType;

/**
 * Panel used to construct the roller coaster and start it running
 * @author Bernard Horan
 */
public class ConstructPanel extends javax.swing.JPanel implements ListSelectionListener {

    /* The "No Preview Available" image */
    private Image noPreviewAvailableImage = null;

    /** The track. */
    private Track track;
       
    /** Number of segments in the track. */
    private int numSegments;

    private Container container;

    private List<TrackSegmentType> segmentTypes = new ArrayList<TrackSegmentType>();

    private TrackListModel segmentListModel;

    

    public interface Container {

    }

    /** Creates new form ConstructPanel */
    public ConstructPanel() {
        initComponents();

        // Create the icon for the "No Preview Available" image
        URL url = ConstructPanel.class.getResource("resources/nopreview.png");
        noPreviewAvailableImage = Toolkit.getDefaultToolkit().createImage(url);

        // Listen for list selection events and update the preview panel with
        // the selected item's image
        typeList.addListSelectionListener(this);

        initializeLists();
    }

    void setContainer(Container aContainer) {
        container = aContainer;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        addButton = new javax.swing.JButton();
        typeScrollPane = new javax.swing.JScrollPane();
        typeList = new javax.swing.JList();
        previewPanel = new javax.swing.JPanel();
        previewLabel = new javax.swing.JLabel();
        runButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        segmentScrollPane = new javax.swing.JScrollPane();
        segmentList = new javax.swing.JList();

        jLabel1.setText("Track Segment Type to Add:");

        addButton.setText("Add");
        addButton.setEnabled(false);
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        typeList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        typeScrollPane.setViewportView(typeList);

        previewPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        previewPanel.setMinimumSize(new java.awt.Dimension(128, 128));
        previewPanel.setPreferredSize(new java.awt.Dimension(128, 128));
        previewPanel.setLayout(new java.awt.GridLayout(1, 0));

        previewLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        previewLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        previewLabel.setIconTextGap(0);
        previewPanel.add(previewLabel);

        runButton.setText("Run");
        runButton.setActionCommand("run");
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Track Segments:");

        segmentList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        segmentList.setEnabled(false);
        segmentScrollPane.setViewportView(segmentList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(typeScrollPane, 0, 0, Short.MAX_VALUE)
                            .addComponent(segmentScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 186, Short.MAX_VALUE))
                        .addGap(74, 74, 74)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(previewPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(addButton)
                                .addGap(18, 18, 18)
                                .addComponent(runButton)
                                .addGap(21, 21, 21)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(previewPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(runButton)
                            .addComponent(addButton)))
                    .addComponent(typeScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(segmentScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(50, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        TrackSegmentType selectedType = (TrackSegmentType) typeList.getSelectedValue();
        TrackSegment newSegment = selectedType.createSegment();
        // This adds the segment to the underlying model (the track)
        segmentListModel.addSegment(newSegment);
        //TODO restore code to enable the list?

}//GEN-LAST:event_addButtonActionPerformed

    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_runButtonActionPerformed


    /**
     * Updates the list of values displayed from the track segment factory
     */
    private void initializeLists() {
        typeList.setDragEnabled(false);
        segmentTypes.addAll(TrackManager.getTrackManager().getTrackSegmentTypes());
        Collections.sort(segmentTypes);
        DefaultListModel typeListModel = new DefaultListModel();
        for (Iterator it = segmentTypes.iterator(); it.hasNext();) {
            typeListModel.addElement(it.next());
        }
        typeList.setModel(typeListModel);
        typeList.setCellRenderer(new TypeListRenderer());

        //TODo remove after testing
        if (track == null) {
            track = new Track();
        }
        segmentListModel = new TrackListModel(track);
        segmentList.setModel(segmentListModel);
    }
    
    /**
     * Handles when a selection has been made of the list of cell type names.
     * @param e
     */
    public void valueChanged(ListSelectionEvent e) {
        TrackSegmentType selectedType = (TrackSegmentType) typeList.getSelectedValue();
        if (selectedType == null) {
            // If nothing is selected, then disable the Insert button, the
                // preview image and disable drag-and-drop from the preview
                // label.
                addButton.setEnabled(false);
                previewLabel.setIcon(null);

                /*
                 // Make sure the recognizers are not null, and set their
                // components to null;
                if (previewRecognizer != null) {
                    previewRecognizer.setComponent(null);
                }

                if (listRecognizer != null) {
                    listRecognizer.setComponent(null);
                }
                */
                return;
            }

            System.out.println("Selected Type: " + selectedType);

            // Enable the Insert button
            addButton.setEnabled(true);



            // Otherwise, update the preview image, if one exists, otherwise
            // use the default image.
            Image previewImage = selectedType.getPreviewImage();
            System.out.println("Preview image: " + previewImage);

            if (previewImage != null) {
                ImageIcon icon = new ImageIcon(previewImage);
                previewLabel.setIcon(icon);

                // Pass the necessary information for drag and drop
                //gestureListener.segmentType = cellFactory;
                //gestureListener.previewImage = previewImage;
            }
            else {
                //TODO restore this after testing
                //ImageIcon icon = new ImageIcon(noPreviewAvailableImage);
                //previewLabel.setIcon(icon);

                // Pass the necessary information for drag and drop
                //gestureListener.cellFactory = cellFactory;
                //gestureListener.previewImage = noPreviewAvailableImage;
            }

            // Enable drag-and-drop from the preview image, creating the
            // recognizer if necessary
            /*
             if (previewRecognizer == null) {
                previewRecognizer =
                        dragSource.createDefaultDragGestureRecognizer(previewLabel,
                        DnDConstants.ACTION_COPY_OR_MOVE, gestureListener);
            }
            else {
                previewRecognizer.setComponent(previewLabel);
            }
            */

            // Add support for drag from the text list of cells, creating the
            // recognizer if necessary
            /*
             if (listRecognizer == null) {
                listRecognizer =
                        dragSource.createDefaultDragGestureRecognizer(cellList,
                        DnDConstants.ACTION_COPY_OR_MOVE, gestureListener);
            }
            else {
                listRecognizer.setComponent(cellList);
            }
            */
        
    }

    /** Give this panel the track to construct. */
    public void setTrack (Track track) {
        this.track = track;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                JPanel constructPanel = new ConstructPanel();
                JFrame frame = new JFrame();
                frame.getContentPane().add(constructPanel, BorderLayout.CENTER);
                frame.addWindowListener(
                        new WindowAdapter() {

                            public void windowClosing(WindowEvent e) {
                                System.exit(0);
                            }
                        });
                frame.setBounds(constructPanel.getBounds());
                frame.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JButton addButton;
    protected javax.swing.JLabel jLabel1;
    protected javax.swing.JLabel jLabel2;
    protected javax.swing.JLabel previewLabel;
    protected javax.swing.JPanel previewPanel;
    protected javax.swing.JButton runButton;
    protected javax.swing.JList segmentList;
    protected javax.swing.JScrollPane segmentScrollPane;
    protected javax.swing.JList typeList;
    protected javax.swing.JScrollPane typeScrollPane;
    // End of variables declaration//GEN-END:variables

    class TypeListRenderer extends JLabel implements ListCellRenderer {
     // This is the only method defined by ListCellRenderer.
     // We just reconfigure the JLabel each time we're called.

     public Component getListCellRendererComponent(
       JList list,
       Object value,            // value to display
       int index,               // cell index
       boolean isSelected,      // is the cell selected
       boolean cellHasFocus)    // the list and the cell have the focus
     {
         TrackSegmentType type = (TrackSegmentType) value;
         String s = type.getName();
         setText(s);
   	   if (isSelected) {
             setBackground(list.getSelectionBackground());
	       setForeground(list.getSelectionForeground());
	   }
         else {
	       setBackground(list.getBackground());
	       setForeground(list.getForeground());
	   }
	   setEnabled(list.isEnabled());
	   setFont(list.getFont());
         setOpaque(true);
         return this;
     }
 }

}
