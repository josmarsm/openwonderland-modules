/**
 * Copyright (c) 2012, WonderBuilders, Inc., All Rights Reserved
 */

package org.jdesktop.wonderland.modules.appframe.client;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.jdesktop.wonderland.client.jme.JmeClientMain;
import org.jdesktop.wonderland.client.cell.asset.AssetUtils;
import org.jdesktop.wonderland.client.jme.dnd.FileListDataFlavorHandler;
import org.jdesktop.wonderland.client.jme.dnd.spi.DataFlavorHandlerSPI.ImportResultListener;
import org.jdesktop.wonderland.common.cell.state.CellServerState;
import org.jdesktop.wonderland.modules.appframe.common.AppFrameApp;
import org.jdesktop.wonderland.modules.appframe.common.AppFrameConstants;
import org.jdesktop.wonderland.modules.sharedstate.client.SharedStateComponent;

/**
 *
 * @author nilang
 */
//this class provides facility to add documents from server using wlcontent protocoal
public class AddServerDocument extends javax.swing.JPanel {

    public JFrame parent;
    public AppFrame parentCell;
    private static final ResourceBundle BUNDLE = ResourceBundle.getBundle(
            "org/jdesktop/wonderland/client/jme/content/Bundle");

    /** Creates new form AddServerDocument */
    public AddServerDocument(JFrame parent, final AppFrame parentCell) {
        initComponents();
        this.parent = parent;
        this.parentCell = parentCell;

        jFileChooser1.setControlButtonsAreShown(false);
        jLabel2.setToolTipText("Enter wlcontent URL to add document from server");
        jButton2.setEnabled(false);
        jFileChooser1.addPropertyChangeListener(new PropertyChangeListener() {
            public void propertyChange(PropertyChangeEvent evt) {
                try {
                    if (JFileChooser.SELECTED_FILE_CHANGED_PROPERTY.equals(evt.getPropertyName())) {
                        if (jFileChooser1.getSelectedFile() != null) {
                            jButton2.setEnabled(true);
                        } else {
                            jButton2.setEnabled(false);
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });
        jTextField1.getDocument().addDocumentListener(new DocumentListener() {

            public void insertUpdate(DocumentEvent e) {
                if (parentCell.getFileExtension(jTextField1.getText()) != null && jTextField1.getText().contains("wlcontent://")) {
                    jButton2.setEnabled(true);
                } else {
                    jButton2.setEnabled(false);
                }
            }

            public void removeUpdate(DocumentEvent e) {
                if (parentCell.getFileExtension(jTextField1.getText()) != null && jTextField1.getText().contains("wlcontent://")) {
                    jButton2.setEnabled(true);
                } else {
                    jButton2.setEnabled(false);
                }
            }

            public void changedUpdate(DocumentEvent e) {
                if (parentCell.getFileExtension(jTextField1.getText()) != null && jTextField1.getText().contains("wlcontent://")) {
                    jButton2.setEnabled(true);
                } else {
                    jButton2.setEnabled(false);
                }
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(618, 520));

        jFileChooser1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jFileChooser1MouseClicked(evt);
            }
        });
        jFileChooser1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFileChooser1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Or File URL:");

        jTextField1.setMinimumSize(new java.awt.Dimension(8000, 20));
        jTextField1.setPreferredSize(new java.awt.Dimension(2147483647, 25));

        jButton1.setText("Cancel");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Open");
        jButton2.setBorder(null);
        jButton2.setBorderPainted(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 2, 11));
        jLabel1.setText("Enter wlcontent URL to add document from server");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jFileChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 389, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(436, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jFileChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel1)
                        .addGap(11, 11, 11)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton1))
                .addGap(20, 20, 20))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jFileChooser1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFileChooser1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFileChooser1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        try {
            List<File> fileList = new ArrayList<File>();
            if (jFileChooser1.getSelectedFile() != null) {
                fileList.add(jFileChooser1.getSelectedFile());
                FileListDataFlavorHandler.importFile(fileList, false, new ImportResultListener() {

                    public void importSuccess(String uri) {
                        if (parentCell.addDocument.equalsIgnoreCase("pin")) {

                            parentCell.appFrameProperties.newPinToMenu.put(jFileChooser1.getSelectedFile().getName(), uri);

                            parentCell.appFrameProperties.populatePinTOMenu();

                        } else {

                            parentCell.savePrevious();
                            parentCell.dirtyMap.putBoolean("dirty", false);
                            DropTargetListener dtl = new DropTargetListener(parentCell);
                            CellServerState css = dtl.createCell(uri);
                            if (css != null) {
                                SharedStateComponent ssc = parentCell.getComponent(SharedStateComponent.class);
                                parentCell.historyMap = ssc.get(AppFrameConstants.History_MAP);
                                try {
                                    if (parentCell.historyMap.size() >= 20 && parentCell.historyMap.get(css.getName()) == null) {
                                        parentCell.dropItem();
                                    } else {
                                    }
                                    String sss = parentCell.encodeState(css);
                                    parentCell.historyMap.put(css.getName(), new AppFrameApp(sss, new Date()
                                            , parentCell.getSession().getUserID().getUsername(), new Date()
                                            ,parentCell.getContentURI(sss)));
                                } catch (IOException ex) {
                                    ex.printStackTrace();
                                }
                            }
                        }
                    }

                    public void importFailure(Throwable cause, String message) {
                       
                    }
                });
            } else {
                URL realURL;
                InputStream is;
                try {
                    realURL = AssetUtils.getAssetURL(jTextField1.getText());
                    is = realURL.openStream();
                    is.read();

                } catch (MalformedURLException ex) {
                    final JFrame frame = JmeClientMain.getFrame().getFrame();
                    if (parentCell.addDocument.equalsIgnoreCase("pin")) {
                        String message = "Unable to Pin Document with Url {0}";
                        message = MessageFormat.format(message, jTextField1.getText());
                        JOptionPane.showMessageDialog(frame, message,
                                "Pin Failed",
                                JOptionPane.ERROR_MESSAGE);

                    } else {
                        String message = BUNDLE.getString("Launch_Failed_Message");
                        message = MessageFormat.format(message, jTextField1.getText());
                        JOptionPane.showMessageDialog(frame, message,
                                BUNDLE.getString("Launch_Failed"),
                                JOptionPane.ERROR_MESSAGE);
                    }

                    Logger.getLogger(AddServerDocument.class.getName()).log(Level.SEVERE, null, ex);
                    return;
                } catch (IOException ex) {

                    final JFrame frame = JmeClientMain.getFrame().getFrame();
                    if (parentCell.addDocument.equalsIgnoreCase("pin")) {
                        String message = "Unable to Pin Document with Url {0}";
                        message = MessageFormat.format(message, jTextField1.getText());
                        JOptionPane.showMessageDialog(frame, message,
                                "Pin Failed",
                                JOptionPane.ERROR_MESSAGE);
                    } else {
                        String message = BUNDLE.getString("Launch_Failed_Message");
                        message = MessageFormat.format(message, jTextField1.getText());
                        JOptionPane.showMessageDialog(frame, message,
                                BUNDLE.getString("Launch_Failed"),
                                JOptionPane.ERROR_MESSAGE);
                    }
                    Logger.getLogger(AddServerDocument.class.getName()).log(Level.SEVERE, null, ex);
                    return;
                }


                if (parentCell.addDocument.equalsIgnoreCase("pin")) {
                    parentCell.appFrameProperties.newPinToMenu.put(DropTargetListener.getFileName(jTextField1.getText()), jTextField1.getText());
                    parentCell.appFrameProperties.populatePinTOMenu();

                } else {
                    DropTargetListener dtl = new DropTargetListener(parentCell);
                    CellServerState css = dtl.createCell(jTextField1.getText());
                    if (css != null) {
                        SharedStateComponent ssc = parentCell.getComponent(SharedStateComponent.class);
                        parentCell.historyMap = ssc.get(AppFrameConstants.History_MAP);
                        try {
                            if (parentCell.historyMap.get(css.getName()) != null) {
                                AppFrameApp afa = (AppFrameApp) parentCell.historyMap.get(css.getName());
                                String sss = parentCell.encodeState(css);
                                afa.setState(sss);
                                afa.setContentURI(parentCell.getContentURI(sss));
                                afa.setLastUsed(new Date());
                                parentCell.historyMap.put(css.getName(), afa);
                            } else {
                                String sss = parentCell.encodeState(css);
                                parentCell.historyMap.put(css.getName(), new AppFrameApp(sss, new Date()
                                        , parentCell.getSession().getUserID().getUsername(), new Date()
                                        ,parentCell.getContentURI(sss)));
                            }
                        } catch (IOException ex) {
                            ex.printStackTrace();
                        }
                    }
                }
            }
            parent.setVisible(false);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        parent.setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jFileChooser1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jFileChooser1MouseClicked
        // TODO add your handling code here:
        if (jFileChooser1.getSelectedFile() != null) {
            jButton2.setEnabled(true);
        } else {
            jButton2.setEnabled(false);
        }
    }//GEN-LAST:event_jFileChooser1MouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}

