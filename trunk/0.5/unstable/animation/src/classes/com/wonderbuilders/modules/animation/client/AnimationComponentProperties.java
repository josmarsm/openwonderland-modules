/**
 * Copyright (c) 2012, WonderBuilders, Inc., All Rights Reserved
 */
package com.wonderbuilders.modules.animation.client;

import com.jme.scene.Node;
import com.jme.scene.Spatial;
import com.jmex.model.collada.ColladaAnimation;
import com.jmex.model.collada.ColladaAnimationGroup;
import com.jmex.model.collada.ColladaRootNode;
import com.wonderbuilders.modules.animation.common.Animation;
import com.wonderbuilders.modules.animation.common.AnimationComponentServerState;
import com.wonderbuilders.modules.animation.common.EZScriptAnimationControl;
import com.wonderbuilders.modules.animation.common.FrameRange;
import java.util.ResourceBundle;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import org.jdesktop.mtgame.RenderComponent;
import org.jdesktop.wonderland.client.cell.Cell;
import org.jdesktop.wonderland.client.cell.properties.CellPropertiesEditor;
import org.jdesktop.wonderland.client.cell.properties.annotation.PropertiesFactory;
import org.jdesktop.wonderland.client.cell.properties.spi.PropertiesFactorySPI;
import org.jdesktop.wonderland.client.jme.cellrenderer.CellRendererJME;
import org.jdesktop.wonderland.client.jme.utils.traverser.ProcessNodeInterface;
import org.jdesktop.wonderland.client.jme.utils.traverser.TreeScan;
import org.jdesktop.wonderland.common.cell.state.CellServerState;

/**
 * GUI panel for component configuration.
 *
 * @author Vladimir Djurovic
 */
@PropertiesFactory(AnimationComponentServerState.class)
public class AnimationComponentProperties extends JPanel implements PropertiesFactorySPI {

    /**
     * Resource bundle.
     */
    private static final ResourceBundle BUNDLE = ResourceBundle.getBundle(
            "com/wonderbuilders/modules/animation/client/resources/strings");
    /**
     * Panel for manual frame range specification.
     */
    private AdvancedContainerPanel advancedPanel;
    /**
     * Editor for this cell.
     */
    private CellPropertiesEditor editor;
    /**
     * Current animation state.
     */
    private Animation animation;
    
    /** Current animation group for a cell. */
    private ColladaAnimationGroup animationGroup;
    
    /** Total number of key frames in animation. */
    private int numFrames = 0;

    /**
     * Creates new form AnimationComponentProperties.
     */
    public AnimationComponentProperties() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        triggerButtonGroup = new javax.swing.ButtonGroup();
        animationPlayTypeButtonGroup = new javax.swing.ButtonGroup();
        advancedTypeButtonGroup = new javax.swing.ButtonGroup();
        titleLabel = new javax.swing.JLabel();
        nameLabel = new javax.swing.JLabel();
        nametextField = new javax.swing.JTextField();
        triggerLabel = new javax.swing.JLabel();
        leftClickRB = new javax.swing.JRadioButton();
        proximityRB = new javax.swing.JRadioButton();
        rangeTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        rightClickRB = new javax.swing.JRadioButton();
        playOnceRB = new javax.swing.JRadioButton();
        alternatePlayRB = new javax.swing.JRadioButton();
        reverseNameLabel = new javax.swing.JLabel();
        reverseNameTextField = new javax.swing.JTextField();
        loopAnimationRB = new javax.swing.JRadioButton();
        loopStartLabel = new javax.swing.JLabel();
        loopStartTextField = new javax.swing.JTextField();
        loopStopLabel = new javax.swing.JLabel();
        loopStopTextField = new javax.swing.JTextField();
        manualFrameRB = new javax.swing.JRadioButton();
        frameRangeScrollPane = new javax.swing.JScrollPane();
        addRangeButton = new javax.swing.JButton();
        includeEZCB = new javax.swing.JCheckBox();
        ezScriptRB = new javax.swing.JRadioButton();
        advancedRB = new javax.swing.JRadioButton();

        titleLabel.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("com/wonderbuilders/modules/animation/client/resources/strings"); // NOI18N
        titleLabel.setText(bundle.getString("AnimationComponentProperties.titleLabel.text")); // NOI18N

        nameLabel.setLabelFor(nametextField);
        nameLabel.setText(bundle.getString("AnimationComponentProperties.nameLabel.text")); // NOI18N

        nametextField.setText(bundle.getString("AnimationComponentProperties.nametextField.text")); // NOI18N
        nametextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                nametextFieldKeyTyped(evt);
            }
        });

        triggerLabel.setText(bundle.getString("AnimationComponentProperties.triggerLabel.text")); // NOI18N

        triggerButtonGroup.add(leftClickRB);
        leftClickRB.setSelected(true);
        leftClickRB.setText(bundle.getString("AnimationComponentProperties.leftClickRB.text")); // NOI18N
        leftClickRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leftClickRBActionPerformed(evt);
            }
        });

        triggerButtonGroup.add(proximityRB);
        proximityRB.setText(bundle.getString("AnimationComponentProperties.proximityRB.text")); // NOI18N
        proximityRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                proximityRBActionPerformed(evt);
            }
        });

        rangeTextField.setText(bundle.getString("AnimationComponentProperties.rangeTextField.text")); // NOI18N
        rangeTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                rangeTextFieldKeyTyped(evt);
            }
        });

        jLabel1.setText(bundle.getString("AnimationComponentProperties.jLabel1.text")); // NOI18N

        triggerButtonGroup.add(rightClickRB);
        rightClickRB.setText(bundle.getString("AnimationComponentProperties.rightClickRB.text")); // NOI18N
        rightClickRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rightClickRBActionPerformed(evt);
            }
        });

        animationPlayTypeButtonGroup.add(playOnceRB);
        playOnceRB.setSelected(true);
        playOnceRB.setText(bundle.getString("AnimationComponentProperties.playOnceRB.text")); // NOI18N
        playOnceRB.setToolTipText(bundle.getString("AnimationComponentProperties.playOnceRB.toolTipText")); // NOI18N
        playOnceRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playOnceRBActionPerformed(evt);
            }
        });

        animationPlayTypeButtonGroup.add(alternatePlayRB);
        alternatePlayRB.setText(bundle.getString("AnimationComponentProperties.alternatePlayRB.text")); // NOI18N
        alternatePlayRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alternatePlayRBActionPerformed(evt);
            }
        });

        reverseNameLabel.setLabelFor(reverseNameTextField);
        reverseNameLabel.setText(bundle.getString("AnimationComponentProperties.reverseNameLabel.text")); // NOI18N

        reverseNameTextField.setText(bundle.getString("AnimationComponentProperties.reverseNameTextField.text")); // NOI18N
        reverseNameTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                reverseNameTextFieldKeyTyped(evt);
            }
        });

        animationPlayTypeButtonGroup.add(loopAnimationRB);
        loopAnimationRB.setText(bundle.getString("AnimationComponentProperties.loopAnimationRB.text")); // NOI18N
        loopAnimationRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loopAnimationRBActionPerformed(evt);
            }
        });

        loopStartLabel.setText(bundle.getString("AnimationComponentProperties.loopStartLabel.text")); // NOI18N

        loopStartTextField.setText(bundle.getString("AnimationComponentProperties.loopStartTextField.text")); // NOI18N
        loopStartTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                loopStartTextFieldKeyTyped(evt);
            }
        });

        loopStopLabel.setText(bundle.getString("AnimationComponentProperties.loopStopLabel.text")); // NOI18N

        loopStopTextField.setText(bundle.getString("AnimationComponentProperties.loopStopTextField.text")); // NOI18N
        loopStopTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                loopStopTextFieldKeyTyped(evt);
            }
        });

        advancedTypeButtonGroup.add(manualFrameRB);
        manualFrameRB.setSelected(true);
        manualFrameRB.setText(bundle.getString("AnimationComponentProperties.manualFrameRB.text")); // NOI18N
        manualFrameRB.setEnabled(false);
        manualFrameRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manualFrameRBActionPerformed(evt);
            }
        });

        addRangeButton.setText(bundle.getString("AnimationComponentProperties.addRangeButton.text")); // NOI18N
        addRangeButton.setBorder(null);
        addRangeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRangeButtonActionPerformed(evt);
            }
        });

        includeEZCB.setSelected(true);
        includeEZCB.setText(bundle.getString("AnimationComponentProperties.includeEZCB.text")); // NOI18N
        includeEZCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                includeEZCBActionPerformed(evt);
            }
        });

        advancedTypeButtonGroup.add(ezScriptRB);
        ezScriptRB.setText(bundle.getString("AnimationComponentProperties.ezScriptRB.text")); // NOI18N
        ezScriptRB.setEnabled(false);
        ezScriptRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ezScriptRBActionPerformed(evt);
            }
        });

        animationPlayTypeButtonGroup.add(advancedRB);
        advancedRB.setText(bundle.getString("AnimationComponentProperties.advancedRB.text")); // NOI18N
        advancedRB.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                advancedRBStateChanged(evt);
            }
        });
        advancedRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                advancedRBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(titleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(nameLabel))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(80, 80, 80)
                        .addComponent(nametextField, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addRangeButton)
                        .addGap(352, 352, 352))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(includeEZCB)
                                    .addComponent(playOnceRB)
                                    .addComponent(alternatePlayRB)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(triggerLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(leftClickRB)
                                            .addComponent(proximityRB)
                                            .addComponent(rightClickRB))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(rangeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel1)))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(frameRangeScrollPane)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(reverseNameLabel)
                                        .addComponent(loopAnimationRB)
                                        .addComponent(loopStartLabel)
                                        .addComponent(loopStopLabel))
                                    .addComponent(advancedRB))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(manualFrameRB)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(ezScriptRB)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addComponent(reverseNameTextField)
                                    .addComponent(loopStartTextField)
                                    .addComponent(loopStopTextField))))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameLabel)
                    .addComponent(nametextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(includeEZCB)
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(triggerLabel)
                    .addComponent(leftClickRB))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(proximityRB)
                    .addComponent(rangeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rightClickRB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(playOnceRB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(alternatePlayRB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(reverseNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(reverseNameLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(loopAnimationRB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loopStartLabel)
                    .addComponent(loopStartTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loopStopLabel)
                    .addComponent(loopStopTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(manualFrameRB)
                    .addComponent(ezScriptRB)
                    .addComponent(advancedRB))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(frameRangeScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(addRangeButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void playOnceRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playOnceRBActionPerformed
        editor.setPanelDirty(this.getClass(), true);
    }//GEN-LAST:event_playOnceRBActionPerformed

    private void alternatePlayRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alternatePlayRBActionPerformed
        editor.setPanelDirty(this.getClass(), true);
    }//GEN-LAST:event_alternatePlayRBActionPerformed

    private void loopAnimationRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loopAnimationRBActionPerformed
        editor.setPanelDirty(this.getClass(), true);
    }//GEN-LAST:event_loopAnimationRBActionPerformed

    private void manualFrameRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manualFrameRBActionPerformed
        // clear all items from scrol pane
        if(manualFrameRB.isSelected()){
            advancedPanel.removeAll();
            //show EZScript commands configured
            for(FrameRange fr: animation.getRanges()){
                advancedPanel.addChildPanel(new ManualAnimationPanel(true, fr));
            }
        }
        editor.setPanelDirty(this.getClass(), true);
        advancedPanel.validate();
    }//GEN-LAST:event_manualFrameRBActionPerformed

    private void nametextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nametextFieldKeyTyped
        editor.setPanelDirty(this.getClass(), true);
    }//GEN-LAST:event_nametextFieldKeyTyped

    private void leftClickRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leftClickRBActionPerformed
        editor.setPanelDirty(this.getClass(), true);
    }//GEN-LAST:event_leftClickRBActionPerformed

    private void proximityRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_proximityRBActionPerformed
        editor.setPanelDirty(this.getClass(), true);
    }//GEN-LAST:event_proximityRBActionPerformed

    private void rightClickRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rightClickRBActionPerformed
        editor.setPanelDirty(this.getClass(), true);
    }//GEN-LAST:event_rightClickRBActionPerformed

    private void rangeTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rangeTextFieldKeyTyped
        editor.setPanelDirty(this.getClass(), true);
    }//GEN-LAST:event_rangeTextFieldKeyTyped

    private void reverseNameTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_reverseNameTextFieldKeyTyped
        editor.setPanelDirty(this.getClass(), true);
    }//GEN-LAST:event_reverseNameTextFieldKeyTyped

    private void loopStartTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_loopStartTextFieldKeyTyped
        editor.setPanelDirty(this.getClass(), true);
    }//GEN-LAST:event_loopStartTextFieldKeyTyped

    private void loopStopTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_loopStopTextFieldKeyTyped
        editor.setPanelDirty(this.getClass(), true);
    }//GEN-LAST:event_loopStopTextFieldKeyTyped

    private void addRangeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRangeButtonActionPerformed
        if(manualFrameRB.isSelected()){
            FrameRange fr = new FrameRange();
            fr.setMaxFrame(numFrames);
            advancedPanel.addChildPanel(new ManualAnimationPanel(true, fr));
        } else if(ezScriptRB.isSelected()){
            EZScriptAnimationControl ezScript = new EZScriptAnimationControl();
            advancedPanel.addChildPanel(new EZScriptAnimationPanel(ezScript));
        }
        
        editor.setPanelDirty(this.getClass(), true);
        advancedPanel.validate();
    }//GEN-LAST:event_addRangeButtonActionPerformed

    private void advancedRBStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_advancedRBStateChanged
        manualFrameRB.setEnabled(advancedRB.isSelected());
        ezScriptRB.setEnabled(advancedRB.isSelected());
    }//GEN-LAST:event_advancedRBStateChanged

    private void ezScriptRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ezScriptRBActionPerformed
         // clear all items from scrol pane
        if(ezScriptRB.isSelected()){
            advancedPanel.removeAll();
            //show EZScript commands configured
            for(EZScriptAnimationControl ctrl: animation.getScriptFunctions()){
                advancedPanel.addChildPanel(new EZScriptAnimationPanel(ctrl));
            }
        }
        editor.setPanelDirty(this.getClass(), true);
        advancedPanel.validate();
    }//GEN-LAST:event_ezScriptRBActionPerformed

    private void advancedRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_advancedRBActionPerformed
        editor.setPanelDirty(this.getClass(), true);
    }//GEN-LAST:event_advancedRBActionPerformed

    private void includeEZCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_includeEZCBActionPerformed
        editor.setPanelDirty(this.getClass(), true);
    }//GEN-LAST:event_includeEZCBActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addRangeButton;
    private javax.swing.JRadioButton advancedRB;
    private javax.swing.ButtonGroup advancedTypeButtonGroup;
    private javax.swing.JRadioButton alternatePlayRB;
    private javax.swing.ButtonGroup animationPlayTypeButtonGroup;
    private javax.swing.JRadioButton ezScriptRB;
    private javax.swing.JScrollPane frameRangeScrollPane;
    private javax.swing.JCheckBox includeEZCB;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JRadioButton leftClickRB;
    private javax.swing.JRadioButton loopAnimationRB;
    private javax.swing.JLabel loopStartLabel;
    private javax.swing.JTextField loopStartTextField;
    private javax.swing.JLabel loopStopLabel;
    private javax.swing.JTextField loopStopTextField;
    private javax.swing.JRadioButton manualFrameRB;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nametextField;
    private javax.swing.JRadioButton playOnceRB;
    private javax.swing.JRadioButton proximityRB;
    private javax.swing.JTextField rangeTextField;
    private javax.swing.JLabel reverseNameLabel;
    private javax.swing.JTextField reverseNameTextField;
    private javax.swing.JRadioButton rightClickRB;
    private javax.swing.JLabel titleLabel;
    private javax.swing.ButtonGroup triggerButtonGroup;
    private javax.swing.JLabel triggerLabel;
    // End of variables declaration//GEN-END:variables

    /**
     * Returns human-readable name of the component.
     *
     * @return
     */
    @Override
    public String getDisplayName() {
        return BUNDLE.getString("Animation_Component");
    }

    @Override
    public void setCellPropertiesEditor(CellPropertiesEditor editor) {
        this.editor = editor;
    }

    @Override
    public JPanel getPropertiesJPanel() {
        return this;
    }

    @Override
    public void open() {
        CellServerState css = editor.getCellServerState();
        AnimationComponentServerState state = (AnimationComponentServerState) css.getComponentServerState(AnimationComponentServerState.class);
        if (state == null) {
            state = new AnimationComponentServerState();
        }

        animation = state.getAnimation();
        if (animation == null) {
            animation = new Animation();
        }
        
        // find animation group
        CellRendererJME renderer = (CellRendererJME)editor.getCell().getCellRenderer(Cell.RendererType.RENDERER_JME);
            RenderComponent rc = renderer.getEntity().getComponent(RenderComponent.class);
            Node sceneRoot = rc.getSceneRoot();
            if(sceneRoot instanceof RenderComponent.AttachPointNode){
                sceneRoot = (Node)((RenderComponent.AttachPointNode)sceneRoot).getChild(0);
            }
            TreeScan.findNode(sceneRoot, new ProcessNodeInterface() {

                public boolean processNode(Spatial node) {
                    if(node instanceof ColladaRootNode){
                        if(((ColladaRootNode)node).getCurrentGroup() != null){
                            animationGroup = ((ColladaRootNode)node).getCurrentGroup();
                        }
                        return false;
                    }
                    return true;
                }
            });
        

        String name = animation.getName();
        // if name is not assigned, use entity name as default
        if(name == null || name.isEmpty()){
            if(animationGroup != null){
                nametextField.setText(animationGroup.getName());
            } else {
                nametextField.setText(editor.getCell().getName());
            }
        } else {
            nametextField.setText(name);
        }
        
        
        setGUIForTriggerType(animation.getTrigger());
        setGUIForPlayType(animation.getPlayType());
        loopAnimationRB.setEnabled(animationGroup != null);
        loopStartTextField.setEnabled(animationGroup != null);
        loopStopTextField.setEnabled(animationGroup != null);
        includeEZCB.setSelected(animation.isIncludeEZScript());
        
        reverseNameTextField.setText(animation.getReverseCommand());
        loopStartTextField.setText(animation.getStartLoop());
        loopStopTextField.setText(animation.getStopLoop());
        
        // set frame ranges panels
        if(animation.getPlayType() == Animation.AnimationPlayType.EZSCRIPT_FUNCTIONS){
            advancedPanel = new AdvancedContainerPanel(animation.getScriptFunctions());
        } else{
            advancedPanel = new AdvancedContainerPanel(animation.getRanges());
        }
        advancedPanel.setEditor(editor);
        frameRangeScrollPane.setViewportView(advancedPanel);
        
    }

    @Override
    public void close() {
    }

    @Override
    public void restore() {
    }

    @Override
    public void apply() {
        // first, check if user input is valid
        if(!validateInput()){
            return;
        }
        CellServerState css = editor.getCellServerState();
        AnimationComponentServerState state = (AnimationComponentServerState) css.getComponentServerState(AnimationComponentServerState.class);
        if (state == null) {
            state = new AnimationComponentServerState();
        }

        animation = state.getAnimation();
        if (animation == null) {
            animation = new Animation();
        }
        animation.setName(nametextField.getText());
        // set trigger type
        if(leftClickRB.isSelected()){
            animation.setTrigger(Animation.AnimationTrigger.LEFT_CLICK);
        } else if(rightClickRB.isSelected()){
            animation.setTrigger(Animation.AnimationTrigger.RIGHT_CLICK);
        } else if(proximityRB.isSelected()){
            animation.setTrigger(Animation.AnimationTrigger.PROXIMITY);
            animation.setProximityRange(Float.valueOf(rangeTextField.getText()));
        }
        // set play type
        if(playOnceRB.isSelected()){
            animation.setPlayType(Animation.AnimationPlayType.PLAY_ONCE);
        } else if(alternatePlayRB.isSelected()){
            animation.setPlayType(Animation.AnimationPlayType.FORWARD_REVERSE);
        } else if(loopAnimationRB.isSelected()){
            animation.setPlayType(Animation.AnimationPlayType.LOOP);
        } else if(manualFrameRB.isSelected()){
            animation.setPlayType(Animation.AnimationPlayType.FRAME_RANGE);
        } else if(ezScriptRB.isSelected()){
            animation.setPlayType(Animation.AnimationPlayType.EZSCRIPT_FUNCTIONS);
        }
        
        if(advancedRB.isSelected() && manualFrameRB.isSelected()){
            animation.setRanges(advancedPanel.createFrameRangeData(numFrames));
        } else if(advancedRB.isSelected() && ezScriptRB.isSelected()){
            animation.setScriptFunctions(advancedPanel.createEZScriptControls());
        }
         
        
        String revName = reverseNameTextField.getText();
        if(revName != null && !revName.isEmpty()){
            animation.setReverseCommand(reverseNameTextField.getText());
        } else {
            animation.setReverseCommand(null);
        }
        
        String startLoop = loopStartTextField.getText();
        if(startLoop != null && !startLoop.isEmpty()){
            animation.setStartLoop(startLoop);
        } else {
            animation.setStartLoop(null);
        }
        String stopLoop = loopStopTextField.getText();
        if(stopLoop != null && !stopLoop.isEmpty()){
            animation.setStopLoop(stopLoop);
        } else {
            animation.setStopLoop(null);
        }
        animation.setIncludeEZScript(includeEZCB.isSelected());

        state.setAnimation(animation);

        editor.addToUpdateList(state);
    }
    
    /**
     * Set up GUI controls based on trigger type.
     * 
     * @param trigger trigger type
     */
    private void setGUIForTriggerType(Animation.AnimationTrigger trigger){
        switch(trigger)   {
            case LEFT_CLICK:
                leftClickRB.setSelected(true);
                break;
            case RIGHT_CLICK:
                rightClickRB.setSelected(true);
                break;
            case PROXIMITY:
                proximityRB.setSelected(true);
                rangeTextField.setText(String.format("%.1f",animation.getProximityRange()));
                break;
        }
    }
    
    /**
     * Set up GUI controls based on animation play type.
     * 
     * @param playType play type
     */
    private void setGUIForPlayType(Animation.AnimationPlayType playType){
        numFrames = 0;
        if(animationGroup != null){
            for(ColladaAnimation anim : animationGroup.getAnimations()){
                numFrames += anim.getKeyFrames().size();
            }
        }
        // create text for frame range with number of frames
        StringBuilder sb = new StringBuilder(BUNDLE.getString("AnimationComponentProperties.manualFrameRB.text"));
        sb.append(" (0 - ").append(numFrames - 1).append(")");
        manualFrameRB.setText(sb.toString());
        switch(playType){
            case PLAY_ONCE:
                playOnceRB.setSelected(true);
                break;
            case FORWARD_REVERSE:
                alternatePlayRB.setSelected(true);
                break;
            case LOOP:
                loopAnimationRB.setSelected(true);
                break;
            case FRAME_RANGE:
                advancedRB.setSelected(true);
                manualFrameRB.setSelected(true);
                break;
            case EZSCRIPT_FUNCTIONS:
                advancedRB.setSelected(true);
                ezScriptRB.setSelected(true);
                break;
        }
    }
    
    /**
     * Checks validity of user-entered data. It will display warning dialog if input is invalid.
     * 
     * @return <code>true</code> if input is valid, <code>false</code> otherwise
     */
    private boolean validateInput(){
        if(proximityRB.isSelected() && (rangeTextField.getText() == null || rangeTextField.getText().isEmpty())){
            JOptionPane.showMessageDialog(this, BUNDLE.getString("error.invalidrange"), BUNDLE.getString("error.invalidinput.title"), JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if (advancedRB.isSelected() && manualFrameRB.isSelected()) {
            if (!advancedPanel.verifyInput()) {
                JOptionPane.showMessageDialog(this, BUNDLE.getString("error.invalidframes"), BUNDLE.getString("error.invalidinput.title"), JOptionPane.ERROR_MESSAGE);
                return false;
            }
        }
        
        return true;
    }
}
