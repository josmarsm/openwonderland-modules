/**
 * Copyright (c) 2012, WonderBuilders, Inc., All Rights Reserved
 */
package com.wonderbuilders.modules.animation.client;

import com.wonderbuilders.modules.animation.common.FrameRange;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 *
 * @author Vladimir Djurovic
 */
public class ManualAnimationPanel extends javax.swing.JPanel implements DocumentListener {
    
    private int maxFrame;

    /**
     * Creates new form ManualAnimationPanel. Panel can include remove button (to remove itself from container)
     * and can be initialize with {@link FrameRange} object to populate controls.
     * 
     * @param includeRemoveButton whether to include remove button or not. If <code>false</code>, button will not be included.
     * @param range frame range used to initialize panel controls
     */
    public ManualAnimationPanel(boolean includeRemoveButton, FrameRange range) {
        initComponents();
        if(!includeRemoveButton){
            removeButton.setVisible(false);
        }
        if(range != null){
            startFrameField.setText(Integer.toString(range.getStart()));
            endFrameField.setText(Integer.toString(range.getEnd()));
            commandField.setText(range.getCommand());
            maxFrame = range.getMaxFrame();
        }
        startFrameField.getDocument().addDocumentListener(this);
        endFrameField.getDocument().addDocumentListener(this);
        commandField.getDocument().addDocumentListener(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        frameRangeLabel = new javax.swing.JLabel();
        startFrameField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        endFrameField = new javax.swing.JTextField();
        commandField = new javax.swing.JTextField();
        removeButton = new javax.swing.JButton();

        setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("com/wonderbuilders/modules/animation/client/resources/strings"); // NOI18N
        frameRangeLabel.setText(bundle.getString("ManualAnimationPanel.frameRangeLabel.text")); // NOI18N
        add(frameRangeLabel);

        startFrameField.setColumns(4);
        startFrameField.setText(bundle.getString("ManualAnimationPanel.startFrameField.text")); // NOI18N
        add(startFrameField);

        jLabel1.setText(bundle.getString("ManualAnimationPanel.jLabel1.text")); // NOI18N
        add(jLabel1);

        endFrameField.setColumns(4);
        endFrameField.setText(bundle.getString("ManualAnimationPanel.endFrameField.text")); // NOI18N
        add(endFrameField);

        commandField.setColumns(10);
        commandField.setText(bundle.getString("ManualAnimationPanel.commandField.text")); // NOI18N
        add(commandField);

        removeButton.setText(bundle.getString("ManualAnimationPanel.removeButton.text")); // NOI18N
        removeButton.setBorder(null);
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });
        add(removeButton);
    }// </editor-fold>//GEN-END:initComponents

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        ((AdvancedContainerPanel)getParent()).removeChildPanel(this);
    }//GEN-LAST:event_removeButtonActionPerformed

    /**
     * Verify that user input is correct.
     * 
     * @return <code>true</code> if input is valid, <code>false</code> otherwise
     */
    public boolean verifyInput(){
        boolean status = true;
        // verify that both commands are present
        String startText = startFrameField.getText();
        String endText = endFrameField.getText();
        status &= (startText != null && !startText.isEmpty());
        status &= (endText != null && !endText.isEmpty());
        status &= (commandField.getText() != null && !commandField.getText().isEmpty());
        // verify that end frame > start frame
        if(status){
            int start = Integer.parseInt(startText);
            int end = Integer.parseInt(endText);
            status &= (end > start);
            status &= (maxFrame > start && maxFrame >= end);
        }
        
        return status;
    }
    
    /**
     * Returns {@link FrameRange} object for this panel.
     * 
     * @return frame range object
     */
    public FrameRange getFrameRange(){
        FrameRange fr = new FrameRange();
        fr.setStart(Integer.parseInt(startFrameField.getText()));
        fr.setEnd(Integer.parseInt(endFrameField.getText()));
        fr.setCommand(commandField.getText());
        
        return fr;
    }
    
    /**
     * Mark panel as dirty.
     */
    public void markDirty(){
        ((AdvancedContainerPanel)getParent()).markDirty();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField commandField;
    private javax.swing.JTextField endFrameField;
    private javax.swing.JLabel frameRangeLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton removeButton;
    private javax.swing.JTextField startFrameField;
    // End of variables declaration//GEN-END:variables

    public void insertUpdate(DocumentEvent e) {
        markDirty();
    }

    public void removeUpdate(DocumentEvent e) {
        markDirty();
    }

    public void changedUpdate(DocumentEvent e) {
        markDirty();
    }
}
