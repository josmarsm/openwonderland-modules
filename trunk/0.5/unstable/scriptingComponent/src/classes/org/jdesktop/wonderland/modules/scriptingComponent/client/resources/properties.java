
import java.lang.reflect.Method;
import java.util.Enumeration;
import java.util.Vector;
import javax.script.ScriptContext;

/*
 * SetScripts3.java
 *
 * Created on March 7, 2009, 1:14 PM
 */



/**
 *
 * @author  morris
 */
class properties extends javax.swing.JFrame {
    
    private static ScriptContext myContext;
    private static Class sc = null;
    private static Object myClassObject = null;
    private final static String newline = "\n";
    private final static int MAX_EVENTS = 25;

    /** Creates new form SetScripts3 */
    public properties()
        {
        initComponents();
        retrieveScriptTable();
        setScriptNameCombo();
        jComboBox1.setMaximumRowCount(6);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextScriptContent = new javax.swing.JTextArea();
        jSaveEdit = new javax.swing.JButton();
        jRetrieveEdit = new javax.swing.JButton();
        jTestScript = new javax.swing.JButton();
        jCheckUserScripts = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextObject = new javax.swing.JTextField();
        EditRetrieveScript = new javax.swing.JButton();
        jEditExit = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ScriptsTable = new javax.swing.JTable();
        jScriptsSave = new javax.swing.JButton();
        jScriptsExit = new javax.swing.JButton();
        jScriptsRetrieve = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jButtonGetAvatarLocation = new javax.swing.JButton();
        AvatarX = new javax.swing.JLabel();
        AvatarY = new javax.swing.JLabel();
        AvatarZ = new javax.swing.JLabel();
        jComboSoundFiles = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextScriptContent.setColumns(20);
        jTextScriptContent.setRows(5);
        jScrollPane2.setViewportView(jTextScriptContent);

        jSaveEdit.setText("Save Script");
        jSaveEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSaveEditActionPerformed(evt);
            }
        });

        jRetrieveEdit.setText("Retrieve Properties");
        jRetrieveEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRetrieveEditActionPerformed(evt);
            }
        });

        jTestScript.setText("Test Script");
        jTestScript.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTestScriptActionPerformed(evt);
            }
        });

        jCheckUserScripts.setText("User Scripts");
        jCheckUserScripts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckUserScriptsActionPerformed(evt);
            }
        });

        jLabel2.setText("Object");

        jLabel3.setText("Script Name");

        jTextObject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextObjectActionPerformed(evt);
            }
        });

        EditRetrieveScript.setText("Retrieve Script");
        EditRetrieveScript.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditRetrieveScriptActionPerformed(evt);
            }
        });

        jEditExit.setText("Exit");
        jEditExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jEditExitActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 643, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jEditExit, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSaveEdit, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(EditRetrieveScript, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTestScript, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jRetrieveEdit, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE))
                .addGap(102, 102, 102)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jTextObject, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE)
                                .addGap(6, 6, 6))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jCheckUserScripts, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRetrieveEdit)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextObject, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTestScript)
                    .addComponent(jLabel3)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(EditRetrieveScript)
                    .addComponent(jCheckUserScripts))
                .addGap(18, 18, 18)
                .addComponent(jSaveEdit)
                .addGap(18, 18, 18)
                .addComponent(jEditExit)
                .addContainerGap(41, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Edit", jPanel1);

        ScriptsTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        ScriptsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Mouse Left", null, null, null},
                {"Mouse Middle", null, null, null},
                {"Mouse Right", null, null, null},
                {"Mouse Left + Shift", null, null, null},
                {"Mouse Middle + Shift", null, null, null},
                {"Mouse Right + Shift", null, null, null},
                {"Mouse Left + Control", null, null, null},
                {"Mouse Middle + Control", null, null, null},
                {"Mouse Right + Control", null, null, null},
                {"Mouse Left + Alt", null, null, null},
                {"Mouse Middle + Alt", null, null, null},
                {"Mouse Right + Alt", null, null, null},
                {"Timer", null, null, null},
                {"Startup", null, null, null},
                {"Proximity", null, null, null},
                {"Message 1", null, null, null},
                {"Message 2", null, null, null},
                {"Message 3", null, null, null},
                {"Message 4", null, null, null},
                {"Intercell", null, null, null},
                {"Chat", null, null, null},
                {"Presence", null, null, null},
                {"Controller", null, null, null},
                {"Properties", null, null, null},
                {"Avatar", null, null, null}
            },
            new String [] {
                "Event", "Name", "Type", "ResourceScript"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        ScriptsTable.setRequestFocusEnabled(false);
        ScriptsTable.setRowHeight(23);
        ScriptsTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(ScriptsTable);

        jScriptsSave.setText("Save");
        jScriptsSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jScriptsSaveActionPerformed(evt);
            }
        });

        jScriptsExit.setText("Exit");
        jScriptsExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jScriptsExitActionPerformed(evt);
            }
        });

        jScriptsRetrieve.setText("Retrieve");
        jScriptsRetrieve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jScriptsRetrieveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 496, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScriptsExit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScriptsRetrieve, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScriptsSave, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE))
                .addGap(78, 78, 78))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 626, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScriptsSave)
                        .addGap(18, 18, 18)
                        .addComponent(jScriptsRetrieve)
                        .addGap(18, 18, 18)
                        .addComponent(jScriptsExit)))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Script Properties", jPanel2);

        jButtonGetAvatarLocation.setText("Get Avatar Location");
        jButtonGetAvatarLocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGetAvatarLocationActionPerformed(evt);
            }
        });

        AvatarX.setText("Avatar X");

        AvatarY.setText("Avatar Y");

        AvatarZ.setText("Avatar Z");

        jComboSoundFiles.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonGetAvatarLocation)
                .addGap(66, 66, 66)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(AvatarZ)
                    .addComponent(AvatarY)
                    .addComponent(AvatarX))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addComponent(jComboSoundFiles, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(93, 93, 93))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(168, 168, 168)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonGetAvatarLocation)
                            .addComponent(AvatarX))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(AvatarY)
                        .addGap(18, 18, 18)
                        .addComponent(AvatarZ))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jComboSoundFiles, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(383, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Robot", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 664, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(16, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 696, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jSaveEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSaveEditActionPerformed
        String theText = jTextScriptContent.getText();
        if(getGlobalScripts().booleanValue())
            {
            contentWriteFile("scripts/" + jTextObject.getText(), jComboBox1.getSelectedItem().toString(), theText, 1);
            jComboBox1.getSelectedItem().toString();
            }
        else
            {
            contentWriteFile("scripts/" + jTextObject.getText(), jComboBox1.getSelectedItem().toString(), theText, 0);
            }
}//GEN-LAST:event_jSaveEditActionPerformed

    private void jRetrieveEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRetrieveEditActionPerformed
        jTextObject.setText(getCellName());
        Boolean scripts = getGlobalScripts();

        if(!scripts.booleanValue())
            {
            jCheckUserScripts.setSelected(true);
            }
        else
            {
            jCheckUserScripts.setSelected(false);
            }

}//GEN-LAST:event_jRetrieveEditActionPerformed

    private void jTestScriptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTestScriptActionPerformed
/*        String theText = jTextScriptContent.getText();
        if(getGlobalScripts().booleanValue())
            {
            contentWriteFile("scripts/" + jTextObject.getText(), jTextScriptName.getText(), theText, 1);
            }
        else
            {
            contentWriteFile("scripts/" + jTextObject.getText(), jTextScriptName.getText(), theText, 0);
            }
*/
        testExecuteScript(jComboBox1.getSelectedItem().toString());
    }//GEN-LAST:event_jTestScriptActionPerformed

    private void jCheckUserScriptsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckUserScriptsActionPerformed
        if(jCheckUserScripts.isSelected())
            {
            setGlobalScripts(false);
            }
        else
            {
            setGlobalScripts(true);
            }

    }//GEN-LAST:event_jCheckUserScriptsActionPerformed

    private void jScriptsRetrieveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jScriptsRetrieveActionPerformed
        retrieveScriptTable();
        setScriptNameCombo();

    }//GEN-LAST:event_jScriptsRetrieveActionPerformed

    private void jScriptsSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jScriptsSaveActionPerformed
        for(int i = 0; i < MAX_EVENTS; i++)
            {
            Object nameCell = ScriptsTable.getValueAt(i, 1);
            setScriptName(nameCell.toString(), i);
            Object typeCell = ScriptsTable.getValueAt(i, 2);
            setScriptType(typeCell.toString(), i);
            Boolean resourceCell = (Boolean) ScriptsTable.getValueAt(i, 3);
            setEventResource(resourceCell, i);
            setScriptNameCombo();
            }
    }//GEN-LAST:event_jScriptsSaveActionPerformed

    private void jScriptsExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jScriptsExitActionPerformed
        setVisible(false);
    }//GEN-LAST:event_jScriptsExitActionPerformed

    private void EditRetrieveScriptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditRetrieveScriptActionPerformed
        retrieveScriptTable();
        int theIndex = jComboBox1.getSelectedIndex();
        if((Boolean)ScriptsTable.getValueAt(theIndex, 3))
            {
            contentReadResource(jComboBox1.getSelectedItem().toString());
            }
        else
            {
            String script = "scripts/" + jTextObject.getText() + "/" + jComboBox1.getSelectedItem().toString();
            System.out.println("Path = " + script);
            if(getGlobalScripts().booleanValue())
                {
                contentReadFile(script, 1);
                }
            else
                {
                contentReadFile(script, 0);
                }
            }
        Vector v = getContentRead();

        jTextScriptContent.setText("");
        for(Enumeration e = v.elements(); e.hasMoreElements();)
            {
            String myString = (String) e.nextElement();
            System.out.println("Item = " + myString);

            jTextScriptContent.append(myString + newline);
            }
    }//GEN-LAST:event_EditRetrieveScriptActionPerformed

    private void jEditExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jEditExitActionPerformed
        setVisible(false);
    }//GEN-LAST:event_jEditExitActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButtonGetAvatarLocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGetAvatarLocationActionPerformed
        float[] location = getAvatarLocation();
        AvatarX.setText(String.valueOf(location[0]));
        AvatarY.setText(String.valueOf(location[1]));
        AvatarZ.setText(String.valueOf(location[2]));

        Vector v = getFileList("sounds", 1);

        jComboSoundFiles.removeAllItems();
        for(Enumeration e = v.elements(); e.hasMoreElements();)
            {
            String myString = (String) e.nextElement();
            System.out.println("Item = " + myString);

            jComboSoundFiles.addItem(myString);
            }

    }//GEN-LAST:event_jButtonGetAvatarLocationActionPerformed

    private void jTextObjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextObjectActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextObjectActionPerformed

    public static void setScriptContext(ScriptContext ctx)
        {
        myContext = ctx;
        System.out.println("Inside setScriptContext");
        }
   
    private void testMethod(String message)
        {
// Do setup for testMethod(String)
        try
            {
            Class partypes[] = new Class[1];
            partypes[0] = message.getClass();
            Method meth = sc.getMethod("testMethod", partypes);
            
            Object arglist[] = new Object[1];
            arglist[0] = message;
            Object retobj = meth.invoke(myClassObject, arglist);
            }
        catch(Exception e)
            {
            System.out.println("Exception for testMethod");
            }
        }
    
    private void testExecuteScript(String theScript)
        {
// Do setup for testMethod(String)
        try
            {
            Class partypes[] = new Class[1];
            partypes[0] = theScript.getClass();
            Method meth = sc.getMethod("testExecuteScript", partypes);

            Object arglist[] = new Object[1];
            arglist[0] = theScript;
            meth.invoke(myClassObject, arglist);
            }
        catch(Exception e)
            {
            System.out.println("Exception for testExecuteScript");
            }
        }

    private String getScriptName(int which)
        {
// Do setup for testMethod(String)
        Object retobj = null;
        try
            {
            Class partypes[] = new Class[1];
            partypes[0] = Integer.TYPE;
            Method meth = sc.getMethod("getScriptName", partypes);
            Object arglist[] = new Object[1];
            arglist[0] = new Integer(which);
            retobj = meth.invoke(myClassObject, arglist);
            }
        catch(Exception e)
            {
            System.out.println("Exception for getScriptName");
            e.printStackTrace();
            }
        return (String)retobj;
        }
    
    private String getScriptType(int which)
        {
// Do setup for testMethod(String)
        Object retobj = null;
        try
            {
            Class partypes[] = new Class[1];
            partypes[0] = Integer.TYPE;
            Method meth = sc.getMethod("getScriptType", partypes);
            
            Object arglist[] = new Object[1];
            arglist[0] = new Integer(which);
            retobj = meth.invoke(myClassObject, arglist);
            }
        catch(Exception e)
            {
            System.out.println("Exception for getScriptType");
            }
        return (String)retobj;
        }

    private Boolean getEventResource(int which)
        {
// Do setup for testMethod(String)
        Object retobj = null;
        try
            {
            Class partypes[] = new Class[1];
            partypes[0] = Integer.TYPE;
            Method meth = sc.getMethod("getEventResource", partypes);

            Object arglist[] = new Object[1];
            arglist[0] = new Integer(which);
            retobj = meth.invoke(myClassObject, arglist);
            }
        catch(Exception e)
            {
            System.out.println("Exception for getEventResource");
            }
        return (Boolean)retobj;
        }
    
    
    private void setScriptName(String name, int which)
        {
// Do setup for testMethod(String)
        Object retobj = null;
        try
            {
            Class partypes[] = new Class[2];
            partypes[0] = name.getClass();
            partypes[1] = Integer.TYPE;
            Method meth = sc.getMethod("setScriptName", partypes);
            Object arglist[] = new Object[2];
            arglist[0] = name;
            arglist[1] = new Integer(which);
            meth.invoke(myClassObject, arglist);
            }
        catch(Exception e)
            {
            System.out.println("Exception for setScriptName");
            e.printStackTrace();
            }
        }
    
    private void setScriptType(String name, int which)
        {
// Do setup for testMethod(String)
        Object retobj = null;
        try
            {
            Class partypes[] = new Class[2];
            partypes[0] = name.getClass();
            partypes[1] = Integer.TYPE;
            Method meth = sc.getMethod("setScriptType", partypes);
            Object arglist[] = new Object[2];
            arglist[0] = name;
            arglist[1] = new Integer(which);
            meth.invoke(myClassObject, arglist);
            }
        catch(Exception e)
            {
            System.out.println("Exception for setScriptType");
            e.printStackTrace();
            }
        }

    private void setEventResource(Boolean resource, int which)
        {
// Do setup for testMethod(String)
        try
            {
            Class partypes[] = new Class[2];
            partypes[0] = Boolean.TYPE;
            partypes[1] = Integer.TYPE;
            Method meth = sc.getMethod("setEventResource", partypes);
            Object arglist[] = new Object[2];
            arglist[0] = new Boolean(resource);
            arglist[1] = new Integer(which);
            meth.invoke(myClassObject, arglist);
            }
        catch(Exception e)
            {
            System.out.println("Exception for setEventResource");
            e.printStackTrace();
            }
        }
    
    private String getCellName()
        {
// Do setup for testMethod(String)
        Object retobj = null;
        try
            {
            Class partypes[] = new Class[0];
            Method meth = sc.getMethod("getCellName", partypes);
            Object arglist[] = new Object[0];
            retobj = meth.invoke(myClassObject, arglist);
            }
        catch(Exception e)
            {
            System.out.println("Exception for getCellName");
            e.printStackTrace();
            }
        return (String)retobj;
        }
    
    private String getCellOwner()
        {
// Do setup for testMethod(String)
        Object retobj = null;
        try
            {
            Class partypes[] = new Class[0];
            Method meth = sc.getMethod("getCellOwner", partypes);
            Object arglist[] = new Object[0];
            retobj = meth.invoke(myClassObject, arglist);
            }
        catch(Exception e)
            {
            System.out.println("Exception for getOwner");
            e.printStackTrace();
            }
        return (String)retobj;
        }
    

    private Boolean getGlobalScripts()
        {
// Do setup for testMethod(String)
        Object retobj = null;
        try
            {
            Class partypes[] = new Class[0];
            Method meth = sc.getMethod("getGlobalScripts", partypes);
            Object arglist[] = new Object[0];
            retobj = meth.invoke(myClassObject, arglist);
            }
        catch(Exception e)
            {
            System.out.println("Exception for getGlobalScripts");
            e.printStackTrace();
            }
        return (Boolean)retobj;
        }

    private void setScriptFile(String message)
        {
// Do setup for testMethod(String)
        try
            {
            Class partypes[] = new Class[1];
            partypes[0] = message.getClass();
            Method meth = sc.getMethod("setScriptFile", partypes);
            
            Object arglist[] = new Object[1];
            arglist[0] = message;
            meth.invoke(myClassObject, arglist);
            }
        catch(Exception e)
            {
            System.out.println("Exception for setScriptFile");
            }
        }
    
    private void setGlobalScripts(boolean global)
        {
// Do setup for testMethod(String)
        try
            {
            Class partypes[] = new Class[1];
            partypes[0] = Boolean.TYPE;
            Method meth = sc.getMethod("setGlobalScripts", partypes);

            Object arglist[] = new Object[1];
            arglist[0] = new Boolean(global);
            meth.invoke(myClassObject, arglist);
            }
        catch(Exception e)
            {
            System.out.println("Exception for setGlobalScripts");
            }
        }

    private void setScriptURL(String message)
        {
// Do setup for testMethod(String)
        try
            {
            Class partypes[] = new Class[1];
            partypes[0] = message.getClass();
            Method meth = sc.getMethod("setScriptURL", partypes);
            
            Object arglist[] = new Object[1];
            arglist[0] = message;
            meth.invoke(myClassObject, arglist);
            }
        catch(Exception e)
            {
            System.out.println("Exception for setScriptURL");
            }
        }

    private void contentWriteFile(String cellName, String scriptFile, String content, int area)
        {
// Do setup for testMethod(String)
        Object retobj = null;
        try
            {
            Class partypes[] = new Class[4];
            partypes[0] = cellName.getClass();
            partypes[1] = scriptFile.getClass();
            partypes[2] = content.getClass();
            partypes[3] = Integer.TYPE;
            Method meth = sc.getMethod("contentWriteFile", partypes);
            Object arglist[] = new Object[4];
            arglist[0] = cellName;
            arglist[1] = scriptFile;
            arglist[2] = content;
            arglist[3] = new Integer(area);
            meth.invoke(myClassObject, arglist);
            }
        catch(Exception e)
            {
            System.out.println("Exception for contentWriteFile");
            e.printStackTrace();
            }
        }

    private Integer contentReadFile(String scriptPath, int area)
        {
// Do setup for testMethod(String)
        Object retobj = null;
        try
            {
            Class partypes[] = new Class[2];
            partypes[0] = scriptPath.getClass();
            partypes[1] = Integer.TYPE;
            Method meth = sc.getMethod("contentReadFile", partypes);
            Object arglist[] = new Object[2];
            arglist[0] = scriptPath;
            arglist[1] = new Integer(area);
            retobj = meth.invoke(myClassObject, arglist);
            }
        catch(Exception e)
            {
            System.out.println("Exception for setScriptName");
            e.printStackTrace();
            }
        return (Integer)retobj;
        }

    private Vector getFileList(String scriptPath, int area)
        {
// Do setup for testMethod(String)
        Object retobj = null;
        try
            {
            Class partypes[] = new Class[2];
            partypes[0] = scriptPath.getClass();
            partypes[1] = Integer.TYPE;
            Method meth = sc.getMethod("getFileList", partypes);
            Object arglist[] = new Object[2];
            arglist[0] = scriptPath;
            arglist[1] = new Integer(area);
            retobj = meth.invoke(myClassObject, arglist);
            }
        catch(Exception e)
            {
            System.out.println("Exception for getFileList");
            e.printStackTrace();
            }
        return (Vector)retobj;
        }

    private Integer getScriptIndex(String scriptFile)
        {
// Do setup for testMethod(String)
        Object retobj = null;
        try
            {
            Class partypes[] = new Class[1];
            partypes[0] = scriptFile.getClass();
            Method meth = sc.getMethod("getScriptIndex", partypes);
            Object arglist[] = new Object[1];
            arglist[0] = scriptFile;
            retobj = meth.invoke(myClassObject, arglist);
            }
        catch(Exception e)
            {
            System.out.println("Exception for getScriptIndex");
            e.printStackTrace();
            }
        return (Integer)retobj;
        }

    private void contentReadResource(String script)
        {
// Do setup for testMethod(String)
        Object retobj = null;
        try
            {
            Class partypes[] = new Class[1];
            partypes[0] = script.getClass();
            Method meth = sc.getMethod("contentReadResource", partypes);
            Object arglist[] = new Object[1];
            arglist[0] = script;
            retobj = meth.invoke(myClassObject, arglist);
            }
        catch(Exception e)
            {
            System.out.println("Exception for setScriptResource");
            e.printStackTrace();
            }
        }

    private Vector getContentRead()
        {
// Do setup for testMethod(String)
        Object retobj = null;
        try
            {
            Class partypes[] = new Class[0];
            Method meth = sc.getMethod("getContentRead", partypes);
            Object arglist[] = new Object[0];
            retobj = meth.invoke(myClassObject, arglist);
            }
        catch(Exception e)
            {
            System.out.println("Exception for getContentRead");
            e.printStackTrace();
            }
        return (Vector)retobj;
        }

    private float[] getAvatarLocation()
        {
// Do setup for testMethod(String)
        Object retobj = null;
        try
            {
            Class partypes[] = new Class[0];
            Method meth = sc.getMethod("getAvatarLocation", partypes);
            Object arglist[] = new Object[0];
            retobj = meth.invoke(myClassObject, arglist);
            }
        catch(Exception e)
            {
            System.out.println("Exception for getContentRead");
            e.printStackTrace();
            }
        return (float[])retobj;
        }

    private String getContentReadString()
        {
// Do setup for testMethod(String)
        Object retobj = null;
        try
            {
            Class partypes[] = new Class[0];
            Method meth = sc.getMethod("getContentReadString", partypes);
            Object arglist[] = new Object[0];
            retobj = meth.invoke(myClassObject, arglist);
            }
        catch(Exception e)
            {
            System.out.println("Exception for getContentReadString");
            e.printStackTrace();
            }
        return (String)retobj;
        }

    private void retrieveScriptTable()
        {
        for(int i = 0; i < MAX_EVENTS; i++)
            {
            ScriptsTable.setValueAt(getScriptName(i), i, 1);
            ScriptsTable.setValueAt(getScriptType(i), i, 2);
            ScriptsTable.setValueAt(getEventResource(i), i, 3);
            }
        }

    public void setScriptNameCombo()
        {
        jComboBox1.removeAllItems();
        for(int i = 0; i < MAX_EVENTS; i++)
            {
            jComboBox1.addItem(ScriptsTable.getValueAt(i, 1));
            }
        }
  
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) 
        {
        java.awt.EventQueue.invokeLater(new Runnable() 
            {
            public void run() 
                {
// Get the ScriptingComponent reference of class that called us
                myClassObject = myContext.getAttribute("MyClass");
                sc = myClassObject.getClass();


                new properties().setVisible(true);
                }
            });
        }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel AvatarX;
    private javax.swing.JLabel AvatarY;
    private javax.swing.JLabel AvatarZ;
    private javax.swing.JButton EditRetrieveScript;
    private javax.swing.JTable ScriptsTable;
    private javax.swing.JButton jButtonGetAvatarLocation;
    private javax.swing.JCheckBox jCheckUserScripts;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboSoundFiles;
    private javax.swing.JButton jEditExit;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JButton jRetrieveEdit;
    private javax.swing.JButton jSaveEdit;
    private javax.swing.JButton jScriptsExit;
    private javax.swing.JButton jScriptsRetrieve;
    private javax.swing.JButton jScriptsSave;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton jTestScript;
    private javax.swing.JTextField jTextObject;
    private javax.swing.JTextArea jTextScriptContent;
    // End of variables declaration//GEN-END:variables
    
}
