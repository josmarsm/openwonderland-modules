/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.jdesktop.wonderland.modules.ezscript.client;

import java.util.Collection;
import javax.swing.DefaultListModel;
import org.jdesktop.wonderland.client.ClientContext;
import org.jdesktop.wonderland.client.cell.Cell;
import org.jdesktop.wonderland.client.cell.CellCache;
import org.jdesktop.wonderland.client.comms.WonderlandSession;
import org.jdesktop.wonderland.client.jme.ClientContextJME;
import org.jdesktop.wonderland.client.login.LoginManager;
import org.jdesktop.wonderland.common.cell.CellID;

/**
 *
 * @author Ryan
 */
public class TriggerQueryPanel extends javax.swing.JPanel {

    /**
     * Creates new form TriggerQueryPanel
     */
    public TriggerQueryPanel() {
        initComponents();

        remoteTriggersList.setModel(new DefaultListModel());
        localTriggersList.setModel(new DefaultListModel());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        cellNameField = new javax.swing.JTextField();
        getTriggersButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        remoteTriggersList = new javax.swing.JList();
        refreshButton = new javax.swing.JButton();
        executeButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        localTriggersList = new javax.swing.JList();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        jLabel1.setText("Enter cell name to query:");

        getTriggersButton.setText("Get Triggers!");
        getTriggersButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getTriggersButtonActionPerformed(evt);
            }
        });

        remoteTriggersList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(remoteTriggersList);

        refreshButton.setText("Refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        executeButton.setText("Execute!");
        executeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                executeButtonActionPerformed(evt);
            }
        });

        localTriggersList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(localTriggersList);

        jLabel2.setText("Triggers for all clients:");

        jLabel3.setText("Triggers for only this client:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cellNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(getTriggersButton))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(refreshButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(executeButton))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(155, 155, 155)
                                .addComponent(jLabel3)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cellNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(getTriggersButton)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE))
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(65, 65, 65)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(refreshButton)
                    .addComponent(executeButton))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private DefaultListModel getRemoteListModel() {
        return (DefaultListModel) remoteTriggersList.getModel();
    }

    private DefaultListModel getLocalListModel() {
        return (DefaultListModel) remoteTriggersList.getModel();
    }

    private void clearRemoteList() {
        getRemoteListModel().removeAllElements();
    }

    private void clearLocalList() {
        getLocalListModel().removeAllElements();
    }

    private CellCache getCellCache() {
        WonderlandSession session = LoginManager.getPrimary().getPrimarySession();

        return ClientContextJME.getCellCache(session);

    }

    private Cell getCellByName(String name) {
        CellID id = ScriptManager.getInstance().getCellID(name);
        return getCellCache().getCell(id);
    }

    private void executeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_executeButtonActionPerformed
        Cell cell = getCellByName(cellNameField.getText());
        EZScriptComponent ez = getEZScriptComponent(cell);

        String localTriggerName = (String) localTriggersList.getSelectedValue();
        String remoteTriggerName = (String) remoteTriggersList.getSelectedValue();
        if(localTriggerName != null) {
            ez.executeLocalTrigger(localTriggerName);
        }
        
        if(remoteTriggerName != null) {
            ez.executeRemoteTrigger(remoteTriggerName);
        }
        
        
    }//GEN-LAST:event_executeButtonActionPerformed

    private void getTriggersButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getTriggersButtonActionPerformed

        clearLocalList();
        clearRemoteList();
        
        
        Cell cell = getCellByName(cellNameField.getText());

        Collection<String> remote = getEZScriptComponent(cell).getRemoteTriggerList();
        Collection<String> local = getEZScriptComponent(cell).getLocalTriggerList();

        for (String trigger : remote) {
            getRemoteListModel().addElement(trigger);
        }

        for (String trigger : local) {
            getLocalListModel().addElement(trigger);
        }
    }//GEN-LAST:event_getTriggersButtonActionPerformed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        clearLocalList();
        clearRemoteList();
        
        CellID id = ScriptManager.getInstance().getCellID(cellNameField.getText());

        Cell cell = getCellCache().getCell(id);

        Collection<String> remote = getEZScriptComponent(cell).getRemoteTriggerList();
        Collection<String> local = getEZScriptComponent(cell).getLocalTriggerList();

        for (String trigger : remote) {
            getRemoteListModel().addElement(trigger);
        }

        for (String trigger : local) {
            getLocalListModel().addElement(trigger);
        }


    }//GEN-LAST:event_refreshButtonActionPerformed

    private EZScriptComponent getEZScriptComponent(Cell cell) {
        EZScriptComponent ez = cell.getComponent(EZScriptComponent.class);

        if (ez == null) {
            throw new UnsupportedOperationException("NO EZSCRIPT COMPONENT FOUND!");
        } else {
            return ez;
        }



    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField cellNameField;
    private javax.swing.JButton executeButton;
    private javax.swing.JButton getTriggersButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList localTriggersList;
    private javax.swing.JButton refreshButton;
    private javax.swing.JList remoteTriggersList;
    // End of variables declaration//GEN-END:variables
}
