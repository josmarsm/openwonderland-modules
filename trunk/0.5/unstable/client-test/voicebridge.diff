Index: modules/tools/voicebridge/nbproject/project.xml
===================================================================
--- modules/tools/voicebridge/nbproject/project.xml	(revision 4754)
+++ modules/tools/voicebridge/nbproject/project.xml	(working copy)
@@ -55,7 +55,7 @@
         <java-data xmlns="http://www.netbeans.org/ns/freeform-project-java/1">
             <compilation-unit>
                 <package-root>src/classes</package-root>
-                <classpath mode="compile">../../../lib/jaxb/jaxb-api.jar:../../../lib/jaxb/jsr173_1.0_api.jar:../../../web/utils/dist/wonderland-web-utils.jar:../../../web/runner/dist/wonderland-runner-core.jar:../../foundation/darkstar-api/build/lib/darkstar-api.jar:../audio-manager/lib/voip.jar:../../../core/ext/common/commons-httpclient-3.0.1.jar:../webdav/build/client/webdav-client.jar:../../../core/build/lib/wonderland-client.jar:../../foundation/content-repository/build/client/contentrepo-client.jar</classpath>
+                <classpath mode="compile">../../../lib/jaxb/jaxb-api.jar:../../../lib/jaxb/jsr173_1.0_api.jar:../../../web/utils/dist/wonderland-web-utils.jar:../../../web/runner/dist/wonderland-runner-core.jar:../../foundation/darkstar-api/build/lib/darkstar-api.jar:../../../core/ext/common/commons-httpclient-3.0.1.jar:../webdav/build/client/webdav-client.jar:../../../core/build/lib/wonderland-client.jar:../../foundation/content-repository/build/client/contentrepo-client.jar:build/lib/bridge/bridge.jar:build/lib/bridge/voip.jar</classpath>
                 <source-level>1.5</source-level>
             </compilation-unit>
         </java-data>

Property changes on: modules/tools/voicebridge/lib/zip
___________________________________________________________________
Modified: svn:ignore
   - bridge-recorder.zip

   + bridge-recorder.zip
bridge-echo.zip


Index: modules/tools/voicebridge/lib/zip/voicebridge-dist.zip
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: modules/tools/voicebridge/src/classes/org/jdesktop/wonderland/modules/voicebridge/server/VoicebridgeRunner.java
===================================================================
--- modules/tools/voicebridge/src/classes/org/jdesktop/wonderland/modules/voicebridge/server/VoicebridgeRunner.java	(revision 4754)
+++ modules/tools/voicebridge/src/classes/org/jdesktop/wonderland/modules/voicebridge/server/VoicebridgeRunner.java	(working copy)
@@ -89,6 +89,7 @@
         Collection<String> out = super.getDeployFiles();
         out.add("voicebridge-dist.zip");
         out.add("bridge-recorder.zip");
+        out.add("bridge-echo.zip");
         return out;
     }
     
Index: modules/tools/voicebridge/src/classes/org/jdesktop/wonderland/modules/voicebridge/echo/BridgeEchoInitializer.java
===================================================================
--- modules/tools/voicebridge/src/classes/org/jdesktop/wonderland/modules/voicebridge/echo/BridgeEchoInitializer.java	(revision 0)
+++ modules/tools/voicebridge/src/classes/org/jdesktop/wonderland/modules/voicebridge/echo/BridgeEchoInitializer.java	(revision 0)
@@ -0,0 +1,220 @@
+/**
+ * Open Wonderland
+ *
+ * Copyright (c) 2011, Open Wonderland Foundation, All Rights Reserved
+ *
+ * Redistributions in source code form must reproduce the above
+ * copyright and this condition.
+ *
+ * The contents of this file are subject to the GNU General Public
+ * License, Version 2 (the "License"); you may not use this file
+ * except in compliance with the License. A copy of the License is
+ * available at http://www.opensource.org/licenses/gpl-license.php.
+ *
+ * The Open Wonderland Foundation designates this particular file as
+ * subject to the "Classpath" exception as provided by the Open Wonderland
+ * Foundation in the License file that accompanied this code.
+ */
+package org.jdesktop.wonderland.modules.voicebridge.echo;
+
+import com.sun.voip.CallParticipant;
+import com.sun.voip.MixDataSource;
+import com.sun.voip.RtpPacket;
+import com.sun.voip.server.ConferenceManager;
+import com.sun.voip.server.ConferenceMember;
+import com.sun.voip.server.ConferenceMemberListener;
+import com.sun.voip.server.MemberSender;
+import com.sun.voip.server.MixDescriptor;
+import java.io.IOException;
+import java.nio.IntBuffer;
+import java.text.ParseException;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+
+/**
+ * Create a special conference that echoes data back to the user
+ * @author Jonathan Kaplan <jonathankap@wonderbuilders.com>
+ */
+public class BridgeEchoInitializer implements ConferenceMemberListener {
+    private static final Logger LOGGER =
+            Logger.getLogger(BridgeEchoInitializer.class.getName());
+    
+    private final ConferenceManager echoConf;
+    private final Map<String, EchoBuffer> buffers = 
+            new HashMap<String, EchoBuffer>();
+    
+    public BridgeEchoInitializer() {
+        // create a permanent conference named "echo"
+        echoConf = ConferenceManager.getConference("echo");
+        echoConf.setPermanent(true);
+        
+        try {
+            echoConf.setMediaInfo("PCM/16000/2");
+        } catch (ParseException ex) {
+            LOGGER.log(Level.WARNING, "Unable to set media preference", ex);
+        }
+    
+        echoConf.addMemberListener(this);
+    }
+
+    public void memberJoined(ConferenceMember cm) {
+    }
+    
+    public void memberInitialized(ConferenceMember cm) {
+        LOGGER.log(Level.INFO, "Member {0} joined {1}",
+                   new Object[]{cm.getSourceId(), echoConf.getId()});
+        
+        try {
+            EchoBuffer buffer = new EchoBuffer(echoConf);
+            
+            buffers.put(cm.getSourceId(), buffer);
+            
+            MixDescriptor md = new MixDescriptor(buffer, 1.0d);
+            cm.getMixManager().addMix(md);
+        
+            // start writing after we start reading, to ensure that the
+            // buffer wraps around once to give the appropriate delay
+            cm.getMemberReceiver().addForwardMember(buffer);
+        } catch (IOException ioe) {
+            LOGGER.log(Level.WARNING, "Error adding recevier to member", ioe);
+        }
+    }
+
+    public void memberLeft(ConferenceMember cm) {
+        LOGGER.log(Level.INFO, "Member {0} left {1}",
+                   new Object[]{cm.getSourceId(), echoConf.getId()});
+        
+        EchoBuffer buffer = buffers.remove(cm.getSourceId());
+        cm.getMemberReceiver().removeForwardMember(buffer);
+    }
+    
+    private static class EchoBuffer extends MemberSender
+        implements MixDataSource
+    {
+        private final ConferenceManager conference;
+        private final IntBuffer buffer;
+        
+        private int[] currentContrib;
+        private int[] previousContrib;
+
+        private int readPointer;
+        private int writePointer;
+        
+        public EchoBuffer(ConferenceManager conference) throws IOException {
+            super (new CallParticipant(), null);
+            
+            this.conference = conference;
+            
+            int sampleSize = 8;
+            //if (conference.getMediaInfo().getPayload() == RtpPacket.PCM_PAYLOAD) {
+            //    sampleSize = 16;
+            //}
+            
+            int sampleRate = conference.getMediaInfo().getSampleRate();
+            int channels = conference.getMediaInfo().getChannels();
+            
+            // buffer required for one second of audio
+            int oneSecond = (sampleSize * sampleRate * channels) / 8;
+            
+            int bufferSize = 3 * oneSecond;
+            buffer = IntBuffer.allocate(bufferSize);
+        
+            // advance the read pointer a little ahead of the write pointer
+            // so the buffer wraps around once before playing anything back
+            // (in order to delay the output)
+            float samples = 5f * (RtpPacket.PACKET_PERIOD / 1000f);
+            readPointer = (int) (samples * oneSecond);
+            
+            LOGGER.log(Level.INFO, "Created echo buffer size {0}", bufferSize);
+        }
+        
+        public String getSourceId() {
+            return "echo";
+        }
+
+        @Override
+        public synchronized boolean sendData(int[] dataToSend) {            
+            // store data in the buffer
+            int pos = 0;
+            while (pos < dataToSend.length) {
+                buffer.position(writePointer);
+
+                int amount = Math.min(dataToSend.length - pos, buffer.remaining());
+                buffer.put(dataToSend, pos, amount);
+                
+                pos += amount;
+                writePointer += amount;
+                
+                if (writePointer == buffer.capacity()) {
+                    writePointer = 0;
+                }
+            }
+            
+            return true;
+        }
+        
+        protected int[] getLinearData(float time) {
+            int sampleSize = 8;
+            //if (conference.getMediaInfo().getPayload() == RtpPacket.PCM_PAYLOAD) {
+            //    sampleSize = 16;
+            //}
+            
+            int sampleRate = conference.getMediaInfo().getSampleRate();
+            int channels = conference.getMediaInfo().getChannels();
+            
+            int readSize = (int) (time * ((sampleSize * sampleRate * channels) / 8));
+          
+            int[] out = new int[readSize];
+            int pos = 0;
+            
+            while (pos < out.length) {
+                buffer.position(readPointer);
+                
+                int amount = Math.min(out.length - pos, buffer.remaining());
+                buffer.get(out, pos, amount);
+                
+                pos += amount;
+                readPointer += amount;
+                
+                if (readPointer == buffer.capacity()) {
+                    readPointer = 0;
+                }
+            }
+            
+            return out;
+        }
+
+        @Override
+        public boolean memberIsReadyForSenderData() {
+            return true;
+        }
+        
+        public synchronized void saveCurrentContribution() {
+            previousContrib = currentContrib;
+            currentContrib = getLinearData(RtpPacket.PACKET_PERIOD / 1000f); 
+        }
+
+        public int[] getPreviousContribution() {
+            return previousContrib;
+        }
+
+        public int[] getCurrentContribution() {
+            previousContrib = currentContrib;
+            currentContrib = getLinearData(RtpPacket.PACKET_PERIOD / 1000f);
+            
+            return currentContrib;
+        }
+
+        public boolean contributionIsInCommonMix() {
+            return false;
+        }
+
+        @Override
+        public String toAbbreviatedString() {
+            return "echo";
+        }
+    }
+    
+}
Index: modules/tools/voicebridge/build.xml
===================================================================
--- modules/tools/voicebridge/build.xml	(revision 4754)
+++ modules/tools/voicebridge/build.xml	(working copy)
@@ -9,6 +9,8 @@
     <property name="module.packagename" value="org.jdesktop.wonderland.modules.voicebridge"/>
     <property name="bridge-recorder.build.dir" value="build/bridge-recorder"/>
     <property name="bridge-recorder.zipname" value="bridge-recorder.zip"/>
+    <property name="echo.build.dir" value="build/bridge-echo"/>
+    <property name="echo.zipname" value="bridge-echo.zip"/>
     
     <!-- import common build file -->
     <import file="${modules.dir}/build-tools/build-scripts/module-build.xml"/>
@@ -20,7 +22,9 @@
     </pathconvert>   
        
     <pathconvert property="module-recorder.classpath">
-        <path location = "${modules.dir}/tools/audio-manager/lib/voip.jar"/>
+        <path location = "${current.dir}/build/lib/bridge/voip.jar"/>
+        <path location = "${current.dir}/build/lib/bridge/bridge.jar"/>
+        
         <path location = "${top.dir}/core/ext/common/commons-httpclient-3.0.1.jar"/>
         <path location = "${top.dir}/core/build/lib/wonderland-client.jar"/>
         <path location = "${top.dir}/core/build/lib/wonderland-common.jar"/>
@@ -28,11 +32,29 @@
         <path location = "${modules.dir}/tools/webdav/build/client/webdav-client.jar"/>
         <path location = "${modules.dir}/tools/webdav/lib/webdavclient4j-core-0.92.jar"/>
     </pathconvert>
+
+    <target name="-bridge-init" depends="-module-init, -check-bridge-zip" 
+            unless="bridge.uptodate">
+        <!-- unzip bridge jars into build/lib/bridge -->
+        <mkdir dir="${build.lib.dir}/bridge"/>
+        
+        <unzip src="${current.dir}/lib/zip/voicebridge-dist.zip" 
+               dest="${build.lib.dir}/bridge"/>
+        <touch file="${build.lib.dir}/bridge/unzip.timestamp"/>
+    </target>
     
-    <target name="build" depends="-module-init,  -module-compile-server,
-                                                 -module-compile-recorder"/>
+    <target name="-check-bridge-zip">
+        <uptodate property="bridge.uptodate"
+                  srcfile="${current.dir}/lib/zip/voicebridge-dist.zip"
+                  targetfile="${build.lib.dir}/bridge/unzip.timestamp"/>
+                  
+    </target>
+    
+    <target name="build" depends="-bridge-init,  -module-compile-server,
+                                                 -module-compile-recorder,
+                                                 -module-compile-echo"/>
 
-    <target name="-module-compile-recorder" depends="-module-init, -module-compile-common">
+    <target name="-module-compile-recorder" depends="-bridge-init, -module-compile-common">
         <wl-compile>
             <compile-classes>
                 <include name="${module.src}/recorder/**"/>
@@ -43,6 +65,18 @@
             </compile-classpath>
         </wl-compile>
     </target>
+    
+    <target name="-module-compile-echo" depends="-bridge-init, -module-compile-common">
+        <wl-compile>
+            <compile-classes>
+                <include name="${module.src}/echo/**"/>
+            </compile-classes>
+            <compile-classpath>
+                <pathelement path="${module-recorder.classpath}"/>
+                <!--<pathelement path="${module-web.classpath}"/>-->
+            </compile-classpath>
+        </wl-compile>
+    </target>
 
     <target name="-jar-bridge-recorder" depends="-module-compile-recorder">
         <!-- create the bridge-recorder.jar -->
@@ -89,7 +123,26 @@
         </zip>
     </target>
     
-    <target name="dist" depends="build, -jar-bridge-recorder">
+    <target name="-jar-echo" depends="-module-compile-echo">
+        <!-- create the bridge-recorder.jar -->
+        <mkdir dir="${current.dir}/${echo.build.dir}"/>
+        <jar destfile="${current.dir}/${echo.build.dir}/bridge-echo.jar">
+            <fileset dir="${build.classes.dir}">
+                <include name="${module.src}/echo/**"/>
+            </fileset>
+            <manifest>
+                <attribute name="Bridge-Module-Info" value="org.jdesktop.wonderland.modules.voicebridge.echo.BridgeEchoInitializer"/>
+            </manifest>
+        </jar>
+
+        <!--create bridge-recorder.zip-->
+        <zip destfile="${current.dir}/lib/zip/${echo.zipname}">
+            <!-- include the jar file -->
+            <zipfileset file="${current.dir}/${echo.build.dir}/bridge-echo.jar" prefix="modules"/>
+        </zip>
+    </target>
+    
+    <target name="dist" depends="build, -jar-bridge-recorder, -jar-echo">
         <mkdir dir="${module.dist.dir}"/>
         
         <module name="${module.name}" majorVersion="0" minorVersion="5" jarfile="${module.dist.dir}/${module.name}.jar"
@@ -100,6 +153,7 @@
             <part name="runner" dir="${current.dir}/lib/zip">
                 <include name="voicebridge-dist.zip"/>
                 <include name="${bridge-recorder.zipname}"/>
+                <include name="${echo.zipname}"/>
             </part>
 
             <part name="weblib">
