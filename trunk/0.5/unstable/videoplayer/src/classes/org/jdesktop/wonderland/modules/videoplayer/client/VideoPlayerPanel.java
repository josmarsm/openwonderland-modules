/**
 * Open Wonderland
 *
 * Copyright (c) 2010, Open Wonderland Foundation, All Rights Reserved
 *
 * Redistributions in source code form must reproduce the above
 * copyright and this condition.
 *
 * The contents of this file are subject to the GNU General Public
 * License, Version 2 (the "License"); you may not use this file
 * except in compliance with the License. A copy of the License is
 * available at http://www.opensource.org/licenses/gpl-license.php.
 *
 * The Open Wonderland Foundation designates this particular file as
 * subject to the "Classpath" exception as provided by the Open Wonderland
 * Foundation in the License file that accompanied this code.
 */
/**
 * Project Wonderland
 *
 * Copyright (c) 2004-2010, Sun Microsystems, Inc., All Rights Reserved
 *
 * Redistributions in source code form must reproduce the above
 * copyright and this condition.
 *
 * The contents of this file are subject to the GNU General Public
 * License, Version 2 (the "License"); you may not use this file
 * except in compliance with the License. A copy of the License is
 * available at http://www.opensource.org/licenses/gpl-license.php.
 *
 * Sun designates this particular file as subject to the "Classpath"
 * exception as provided by Sun in the License file that accompanied
 * this code.
 */
package org.jdesktop.wonderland.modules.videoplayer.client;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.KeyEvent;
import java.util.logging.Logger;
import javax.swing.JPanel;
import java.awt.image.BufferedImage;
import java.text.NumberFormat;

/**
 * A panel for displaying video.
 *
 * @author nsimpson
 */
public class VideoPlayerPanel extends JPanel implements FrameListener {

    private static final Logger logger = Logger.getLogger(VideoPlayerPanel.class.getName());
    private VideoPlayerWindow window;
    private BufferedImage frame;
    private NumberFormat formatter = NumberFormat.getInstance();

    public VideoPlayerPanel(VideoPlayerWindow window) {
        this.window = window;
        initComponents();
        showSource(java.util.ResourceBundle.getBundle("org/jdesktop/wonderland/modules/videoplayer/client/resources/Bundle").getString("NO_VIDEO"));
        setConnected(false);
    }

    /**
     * Resize the video panel to the specified size
     * @param size the new size of the video panel
     */
    public void resizeToFit(final Dimension size) {
        if ((size.getWidth() == 0) || (size.getHeight() == 0)) {
            // don't allow the window to shrink to invisibility
            return;
        }

        if (!size.equals(new Dimension(window.getWidth(), window.getHeight()))) {
            // resize the video player window
            logger.fine("resizing to: " + size);
            window.setSize((int) size.getWidth(), (int) size.getHeight());
        }
    }

    /**
     * Show the video URL
     * @param source the URL of the video
     */
    public void showSource(String source) {
        sourceValueLabel.setText(source);
    }

    /**
     * Set the connected indicator status
     * @param connected whether the video is connected
     */
    public void setConnected(boolean connected) {
        connectedPanel.setBackground(connected ? Color.GREEN : Color.GRAY);
    }

    /**
     * Disply the current frames per second value
     * @param fps the current frames per second
     */
    public void showFPS(double fps) {
        formatter.setMaximumFractionDigits(1);
        formatter.setMinimumFractionDigits(1);
        String fpsStr = formatter.format(fps);
        fpsValueLabel.setText(fpsStr);
        fpsStr = null;
    }

    public void frameUpdate(BufferedImage frame) {
        this.frame = frame;
        repaint();
    }

    @Override
    public void paint(Graphics g) {
        Graphics2D g2 = (Graphics2D) g;

        if (frame != null) {
            if ((frame.getWidth(null) != getWidth()) || (frame.getHeight(null) != getHeight())) {
                resizeToFit(new Dimension(frame.getWidth(null), frame.getHeight(null)));
            }
            g2.drawImage(frame, 0, 0, null);
        } else {
            g2.setBackground(Color.BLACK);
            g2.fillRect(0, 0, getWidth(), getHeight());
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        statusPanel = new javax.swing.JPanel();
        sourceValueLabel = new javax.swing.JLabel();
        fpsLabel = new javax.swing.JLabel();
        fpsValueLabel = new javax.swing.JLabel();
        connectedPanel = new javax.swing.JPanel();

        setBackground(new java.awt.Color(204, 204, 204));
        setPreferredSize(new java.awt.Dimension(1024, 576));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                formMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                formMouseEntered(evt);
            }
        });
        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                formFocusLost(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        statusPanel.setBackground(new java.awt.Color(0, 0, 0));

        sourceValueLabel.setForeground(new java.awt.Color(255, 255, 255));
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("org/jdesktop/wonderland/modules/videoplayer/client/resources/Bundle"); // NOI18N
        sourceValueLabel.setText(bundle.getString("NO_VIDEO")); // NOI18N

        fpsLabel.setFont(fpsLabel.getFont().deriveFont(fpsLabel.getFont().getStyle() | java.awt.Font.BOLD));
        fpsLabel.setForeground(new java.awt.Color(255, 255, 255));
        fpsLabel.setText(bundle.getString("FPS:")); // NOI18N

        fpsValueLabel.setForeground(new java.awt.Color(255, 255, 255));
        fpsValueLabel.setText(bundle.getString("0.0")); // NOI18N

        connectedPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        org.jdesktop.layout.GroupLayout connectedPanelLayout = new org.jdesktop.layout.GroupLayout(connectedPanel);
        connectedPanel.setLayout(connectedPanelLayout);
        connectedPanelLayout.setHorizontalGroup(
            connectedPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 12, Short.MAX_VALUE)
        );
        connectedPanelLayout.setVerticalGroup(
            connectedPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 12, Short.MAX_VALUE)
        );

        org.jdesktop.layout.GroupLayout statusPanelLayout = new org.jdesktop.layout.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(connectedPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(sourceValueLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 876, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(fpsLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(fpsValueLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 44, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(statusPanelLayout.createSequentialGroup()
                .add(5, 5, 5)
                .add(statusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.CENTER)
                    .add(sourceValueLabel)
                    .add(connectedPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(fpsLabel)
                    .add(fpsValueLabel))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, statusPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap(551, Short.MAX_VALUE)
                .add(statusPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        switch (evt.getKeyCode()) {
            case KeyEvent.VK_M:
                // mute/unmute
                logger.info(window.isMuted() ? "unmuting" : "muting");
                window.mute(!window.isMuted(), false);
                break;
            case KeyEvent.VK_P:
                // play/pause
                logger.fine("play/pause");
                if (window.isPlaying()) {
                    window.pause();
                } else {
                    window.play();
                }
                break;
            case KeyEvent.VK_S:
                // re-sync with shared state
                logger.fine(window.isSynced() ? "unsyncing" : "syncing");
                window.sync(!window.isSynced());
                break;
        }
    }//GEN-LAST:event_formKeyPressed

    private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_formFocusGained

    private void formFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_formFocusLost

    private void formMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseEntered
        requestFocus();
    }//GEN-LAST:event_formMouseEntered

    private void formMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_formMouseExited

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel connectedPanel;
    private javax.swing.JLabel fpsLabel;
    private javax.swing.JLabel fpsValueLabel;
    private javax.swing.JLabel sourceValueLabel;
    private javax.swing.JPanel statusPanel;
    // End of variables declaration//GEN-END:variables
}
