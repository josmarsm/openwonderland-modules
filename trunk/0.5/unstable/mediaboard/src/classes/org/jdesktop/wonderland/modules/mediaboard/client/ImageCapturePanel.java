/**
  * iSocial Project
  * http://isocial.missouri.edu
  *
  * Copyright (c) 2011, University of Missouri iSocial Project, All 
  * Rights Reserved
  *
  * Redistributions in source code form must reproduce the above
  * copyright and this condition.
  *
  * The contents of this file are subject to the GNU General Public
  * License, Version 2 (the "License"); you may not use this file
  * except in compliance with the License. A copy of the License is
  * available at http://www.opensource.org/licenses/gpl-license.php.
  *
  * The iSocial project designates this particular file as
  * subject to the "Classpath" exception as provided by the iSocial
  * project in the License file that accompanied this code.
  */

package org.jdesktop.wonderland.modules.mediaboard.client;

import java.awt.Toolkit;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import org.apache.batik.ext.awt.image.spi.ImageTagRegistry;
import org.jdesktop.wonderland.client.cell.Cell;
import org.jdesktop.wonderland.client.comms.WonderlandSession;
import org.jdesktop.wonderland.client.hud.HUDComponent;
import org.jdesktop.wonderland.client.jme.ClientContextJME;
import org.jdesktop.wonderland.client.login.ServerSessionManager;
import org.jdesktop.wonderland.modules.appbase.client.ControlArb;
import org.jdesktop.wonderland.modules.appbase.client.ControlArb.ControlChangeListener;
import org.jdesktop.wonderland.modules.contentrepo.client.ContentRepository;
import org.jdesktop.wonderland.modules.contentrepo.client.ContentRepositoryRegistry;
import org.jdesktop.wonderland.modules.contentrepo.common.ContentCollection;
import org.jdesktop.wonderland.modules.contentrepo.common.ContentNode.Type;
import org.jdesktop.wonderland.modules.contentrepo.common.ContentResource;
import org.jdesktop.wonderland.modules.mediaboard.client.webcamera.CameraUtils;
import org.w3c.dom.Element;

/**
 *
 * @author Ryan
 */
public class ImageCapturePanel extends javax.swing.JPanel implements ControlChangeListener {

    /** Creates new form ImageCapturePanel */
    private static int index = 0;
    private static String filename;
    private int tries = 2;
    private String URLAsString = null;
    private WhiteboardDocument document;
    private HUDComponent component;
    private boolean fail = false;
    private static final Logger logger =
            Logger.getLogger(ImageCapturePanel.class.getName());
    public ImageCapturePanel(WhiteboardDocument document) {
        initComponents();
        triesLabel.setText("You have "+tries+" left.");
        this.document = document;
        this.document.getWindow().getApp().getControlArb().addListener(this);
        //this.component = component;
        
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */

     public void setHUDComponent(HUDComponent component) {
         this.component = component;
     }

    public void addAcceptButtonActionPerformed(ActionListener listener) {
        acceptButton.addActionListener(listener);
    }

    /**
    * @param args the command line arguments
    */


    public String getPictureURLAsString() {
        index += 1;
        System.out.println(URLAsString);
        return URLAsString;

    }

    public void setFormVisible(boolean value) {
        this.setVisible(value);
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        imageLabel = new javax.swing.JLabel();
        captureButton = new javax.swing.JButton();
        acceptButton = new javax.swing.JButton();
        triesLabel = new javax.swing.JLabel();
        cancelButton = new javax.swing.JButton();

        captureButton.setText("Take Picture!");
        captureButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                captureButtonActionPerformed(evt);
            }
        });

        acceptButton.setText("Accept");
        acceptButton.setEnabled(false);
        acceptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptButtonActionPerformed(evt);
            }
        });

        triesLabel.setText("You have 2 tries left.");

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(imageLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 530, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(layout.createSequentialGroup()
                .add(197, 197, 197)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(triesLabel)
                    .add(captureButton)))
            .add(layout.createSequentialGroup()
                .add(174, 174, 174)
                .add(acceptButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(cancelButton))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(imageLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 278, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(captureButton)
                .add(6, 6, 6)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(acceptButton)
                    .add(cancelButton))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(triesLabel)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void updateFilename() {
        Cell cell = ClientContextJME.getViewManager().getPrimaryViewCell();
        String name = cell.getCellCache().getSession().getUserID().getUsername();
        index += 1;
        filename = name+Integer.toString(index)+".jpg";
    }
    private void captureButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_captureButtonActionPerformed

        fail = false;
        URLAsString = new String();

        Runtime rt = Runtime.getRuntime();
        
        try {
            //Process pr = rt.exec("imagecapture myPicture.jpg");
            ImageTagRegistry.getRegistry().flushCache();

            //craft file name
            Cell cell = ClientContextJME.getViewManager().getPrimaryViewCell();
            String name = cell.getCellCache().getSession().getUserID().getUsername();
            name = name.replace(' ', '_');

            filename = name+Integer.toString(index);//+ ".jpg";
            System.out.println("Processing file: " + filename);

            // kind of basackwards... let's look into doing this a better way.

//            Process pr = rt.exec("./imagesnap " + filename);
//            pr.waitFor();

          //  pr = rt.exec("curl http://isocial-sas.missouri.edu:8080/content-repository/wonderland-content-repository/browse/"+filename+"?action=delete");
           // pr.waitFor();
//           File file = new File(filename);
           File file = CameraUtils.CaptureImageToFile(filename, ".png");
           WonderlandSession session = cell.getCellCache().getSession();           
           ServerSessionManager manager = session.getSessionManager();
           ContentRepository repository = ContentRepositoryRegistry.getInstance().getRepository(manager);

            ContentCollection groupsRoot = (ContentCollection)repository.getRoot().getChild("groups");
            if(groupsRoot == null) {
                System.out.println("groupsRoot is null");
            }
            ContentCollection mediaRoot = (ContentCollection)groupsRoot.getChild("media");
            if(mediaRoot == null) {
                System.out.println("mediaRoot is NULL!");
            }
            ContentCollection photosRoot = (ContentCollection)mediaRoot.getChild("photos");
            if(photosRoot == null) {
                System.out.println("photosRoot is NULL!");
                return;
            }

            while(true) {
                if(photosRoot.getChild(filename) != null) {
                    updateFilename();
                }
                else {
                    break;
                }
            }
            ContentResource resource = (ContentResource)photosRoot.createChild(filename,Type.RESOURCE);
            resource.put(file);
            URLAsString=resource.getURL().toString();

            ImageIcon icon = new ImageIcon(resource.getURL());
            BufferedImage sourceImage = CameraUtils.CaptureImage();//ImageIO.read(file);
            
            if(sourceImage == null) {
                logger.warning("source Image is null!");
            }
            //BufferedImage targetImage = new BufferedImage(imageLabel.getSize().width, imageLabel.getSize().height, BufferedImage.TYPE_INT_ARGB);
            //Graphics2D g2D = targetImage.createGraphics();

            int width = imageLabel.getSize().width;
            int height = imageLabel.getSize().height;
            //AffineTransform at =
                //    AffineTransform.getScaleInstance(imageLabel.getSize().width/sourceImage.getWidth(),
              //                                       imageLabel.getSize().height/sourceImage.getHeight());
            
            //g2D.drawRenderedImage(sourceImage, at);
            //File scaledFile = new File(filename);
           // ImageIO.write(targetImage, "JPG", scaledFile);
            
            imageLabel.setIcon(new ImageIcon(sourceImage.getScaledInstance(width, height, 0)));
            //imageLabel.setIcon(icon);

        } catch(Exception e) {
            e.printStackTrace();
            fail = true;
            logger.warning("Unable to take picture. Failing gracefully.");
            JOptionPane.showMessageDialog(this, "This computer is unable to take pictures, please click cancel to continue.", "Imagesnap Error", JOptionPane.ERROR_MESSAGE);
        }
/*
            pr = rt.exec("curl --form file=@"+filename+" --form press=Upload http://isocial-temp.missouri.edu:8080/content-repository/wonderland-content-repository/browse");
            pr.waitFor();

            URL url = new URL("http://isocial-temp.missouri.edu:8080/content-repository/wonderland-content-repository/browse/"+filename);
            ImageIcon ikon = new ImageIcon(url);
         //   ImageIcon ikon = new ImageIcon("http://isocial-temp.missouri.edu:8080/content-repository/wonderland-content-repository/browse/myTest2.jpg");
           // MediaTracker m = new MediaTracker(imageLabel);

            System.out.println(ikon.getImageLoadStatus());


            imageLabel.setIcon(ikon);
            
        } catch(Exception e) {
           System.out.println("fail!");
           e.printStackTrace();
        }*/
        finally {
            tries -= 1;
            acceptButton.setEnabled(true);
            if(tries == 0) {
                captureButton.setEnabled(false);
                
            }
            triesLabel.setText("You have " + tries + " left.");
        }
    }//GEN-LAST:event_captureButtonActionPerformed

    private void acceptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptButtonActionPerformed
        // TODO add your handling code here:
        //this.setVisible(false);
        if(!fail) {
            Element element = null;
            int width = document.getWindow().getWidth();
            if(width > 1200) {
                element = document.createImageElement(150, 250, URLAsString);
            }
            else {
                element = document.createImageElement(300, 500, URLAsString);
            }
            
            document.getWindow().addNewElement(element, true);
        }
        
        component.setVisible(false);
        component.setWorldVisible(false);
    }//GEN-LAST:event_acceptButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        // TODO add your handling code here:
       
        if(component.isWorldVisible()) {
            component.setVisible(false);
            component.setWorldVisible(false);
        }
    }//GEN-LAST:event_cancelButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton acceptButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton captureButton;
    private javax.swing.JLabel imageLabel;
    private javax.swing.JLabel triesLabel;
    // End of variables declaration//GEN-END:variables

    public void updateControl(ControlArb ca) {
       if(!ca.hasControl()) {
           component.setVisible(false);
           component.setWorldVisible(false);
       }
    }

}
