<?xml version="1.0" encoding="UTF-8"?>
<project name="isocial-sheets" default="dist" basedir=".">
    <!-- current directory needed in all scripts -->
    <dirname property="current.dir" file="${ant.file.isocial-sheets}"/>

    <!-- import properties from the common modules properties. These values
         may overwrite some values in my.module.properties, such as the
         location of the Wonderland directory in the case of the entire modules
         directory being checked out instead of an individual file -->
<!--    <property file="${current.dir}/../modules-unstable.properties"/> -->

    <!-- import properties for this module -->
    <property file="${current.dir}/my.module.properties"/>

    <property name="modules.dir" location="${wonderland.dir}/modules"/>
    <property name="module.src" value="${module.plugin.src}"/>
    <property name="module.jarname" value="${module.name}"/>

    <pathconvert property="module-client.classpath">
        <path location="${modules.dir}/foundation/security/build/lib/client/security-client.jar"/>
        <path location="${modules.dir}/tools/sharedstate/build/client/sharedstate-client.jar"/>
<!--        <path location="${current.dir}/../Dock/build/client/Dock-client.jar"/>-->
<!--        <path location="${wonderland.dir}/../wonderland-modules/unstable/EZScript/build/client/EZScript-client.jar"/>-->
    </pathconvert>

    <pathconvert property="module-common.classpath">
        <path location="${modules.dir}/tools/sharedstate/build/client/sharedstate-client.jar"/>
    </pathconvert>

    <pathconvert property="module-server.classpath">
        <path location="${modules.dir}/tools/sharedstate/build/server/sharedstate-server.jar"/>
        <path location="${modules.dir}/foundation/security/build/lib/server/security-server.jar"/>
    </pathconvert>

    <pathconvert property="module-web.classpath">
        <path location="${wonderland.dir}/web/front/dist/wonderland-webadmin-core.jar"/>
        <path location="${wonderland.dir}/core/build/lib/wonderland-client.jar"/>
        <path location="${wonderland.dir}/core/build/lib/wonderland-common.jar"/>
        <path location="${modules.dir}/foundation/darkstar-api/build/lib/darkstar-api.jar"/>
        <path location="${wonderland.dir}/web/runner/dist/wonderland-runner-api.jar"/>
        <path location="${modules.dir}/foundation/content-repository/build/lib/contentrepo-spi.jar"/>
        <path location="${wonderland.dir}/web/wfs/dist/wonderland-wfs.jar"/>
        <path location="${modules.dir}/foundation/security/build/lib/weblib/wonderland-security-weblib.jar"/>
    </pathconvert>

    <pathconvert property="module-weblib.classpath">
        <path location="${wonderland.dir}/core/build/lib/wonderland-client.jar"/>
        <path location="${wonderland.dir}/core/build/lib/wonderland-common.jar"/>
        
        <path location="${modules.dir}/foundation/content-repository/build/lib/contentrepo-spi.jar"/>
        <path location="${modules.dir}/foundation/darkstar-api/build/lib/darkstar-api.jar"/>
        <path location="${wonderland.dir}/web/runner/dist/wonderland-runner-api.jar"/>
    </pathconvert>

    <!-- import common build file -->
    <import file="${modules.dir}/build-tools/build-scripts/module-build.xml"/>

    <target name="build" depends="-module-init, -module-compile-common,
                                                -module-compile-server,
                                                -module-compile-client,
                                                -module-compile-web,
                                                -isocial-sheets-compile-weblib"/>

    <target name="-isocial-sheets-compile-weblib" depends="-module-init">
        <wl-compile>
            <compile-classes>
                <include name="${module.src}/weblib/**"/>
            </compile-classes>

            <compile-classpath>
                <pathelement path="${web.classpath}"/>
                <pathelement path="${module-weblib.classpath}"/>
            </compile-classpath>
        </wl-compile>
    </target>

    <target name="-isocial-sheets-create-jars">
        <mkdir dir="${build.dir}/client"/>
        <mkdir dir="${build.dir}/server"/>
        <mkdir dir="${build.lib.dir}/web"/>

        <jar file="${build.dir}/client/${module.name}-client.jar" basedir="${build.classes.dir}">
            <include name="${module.src}/client/**"/>
            <include name="${module.src}/common/**"/>

                    <!-- include icons -->
            <fileset dir="${current.dir}/src/classes">
                <include name="${module.src}/client/**/*.properties"/>
            </fileset>
        </jar>

        <jar file="${build.dir}/server/${module.name}-server.jar" basedir="${build.classes.dir}">
            <include name="${module.src}/server/**"/>
            <include name="${module.src}/common/**"/>
        </jar>

        <jar file="${build.lib.dir}/web/${module.name}-weblib.jar">
            <fileset dir="${build.classes.dir}">
                <include name="${module.src}/weblib/**"/>
                <include name="${module.src}/common/**"/>
            </fileset>
        </jar>
    </target>

    <target name="-isocial-sheets-build-submodules">
        <!-- build submodules -->
        <iterate target="dist"/>

        <!-- extract the parts -->
        <mkdir dir="${build.dir}/modules"/>

        <subant target="deploy">
            <property name="isocial.deploy.dir" location="${build.dir}/modules"/>
            <fileset dir="${current.dir}" includes="*/build.xml"/>
        </subant>

        <!-- unzip .wars -->
        <mkdir dir="${build.dir}/modules/wars"/>
        <foreach target="-extract-war" param="file">
            <fileset dir="${build.dir}/modules/web"/>
        </foreach>

        <!-- generate application.xml -->
        <pathconvert property="application.wars" pathsep=",">
            <path>
                <fileset dir="${build.dir}/modules/web">
                    <include name="*.war"/>
                </fileset>
            </path>
            <mapper type="flatten"/>
        </pathconvert>

        <!-- create a temporary file and store local jar names to it -->
        <delete file="${build.dir}/modules/ear/application.wars"/>
        <mkdir dir="${build.dir}/modules/ear"/>
        
        <for param="war.name" list="${application.wars}">
            <sequential>
                <echo file="${build.dir}/modules/ear/application.wars" append="true">
                <![CDATA[<module>]]>
                <![CDATA[<web>]]>
                    <![CDATA[<web-uri>]]>@{war.name}<![CDATA[</web-uri>]]>
                    <![CDATA[<context-root>]]>isocial-sheets/@{war.name}<![CDATA[</context-root>]]>
                <![CDATA[</web>]]>
                <![CDATA[</module>]]>
                </echo>
            </sequential>
        </for>

        <!-- read the local jar files into a property -->
        <loadfile property="local.wars" srcfile="${build.dir}/modules/ear/application.wars"/>

        <!-- copy the source .jnlp file and substitute the jar locations -->
        <copy todir="${build.dir}/modules/ear" file="${current.dir}/ear/application.xml" overwrite="true">
            <filterset begintoken="%" endtoken="%">
                <filter token="LOCAL_WARS" value="${local.wars}"/>
            </filterset>
        </copy>

    </target>

    <target name="-extract-war">
        <basename file="${file}" property="war"/>
        <mkdir dir="${build.dir}/modules/wars/${war}"/>
        <unzip src="${file}" dest="${build.dir}/modules/wars/${war}"/>
    </target>

    <target name="dist" depends="build, -isocial-sheets-create-jars, -isocial-sheets-build-submodules">
        <mkdir dir="${module.dist.dir}"/>

        <module name="${module.name}" majorVersion="${module.version.major}" minorVersion="${module.version.minor}" miniVersion="${module.version.mini}" jarfile="${module.dist.dir}/${module.name}.jar" moduleDescription="${module.description}" builddir="${build.dir}">
            <requires name="security" majorversion="0" minorversion="5"/>

            <client dir="${build.dir}/client"/>
            <client dir="${build.dir}/modules/client"/>

            <server dir="${build.dir}/server"/>
            <server dir="${build.dir}/modules/server"/>

            <part name="web">
                <jar name="${module.name}.ear">
                    <zipfileset dir="${build.classes.dir}" prefix="${module.name}.war/WEB-INF/classes">
                        <include name="${module.src}/web/**"/>
                    </zipfileset>
                    <zipfileset dir="${current.dir}/web" prefix="${module.name}.war"/>
                    
                    <!-- include all .war files -->
                    <fileset dir="${build.dir}/modules/wars"/>

                    <zipfileset dir="${build.lib.dir}/web" prefix="lib">
                        <include name="*.jar"/>
                    </zipfileset>
                    <zipfileset dir="${build.dir}/modules/weblib" prefix="lib">
                        <include name="*.jar"/>
                    </zipfileset>
                    <zipfileset dir="${build.dir}/modules/ear" prefix="META-INF">
                        <include name="application.xml"/>
                    </zipfileset>
                </jar>
            </part>
        </module>
    </target>

    <macrodef name="iterate">
        <attribute name="target"/>
        <sequential>
            <subant target="@{target}">
                <fileset dir="${current.dir}">
                    <include name="*/build.xml"/>
                    <exclude name="sample-data/build.xml"/>
                </fileset>
                <fileset dir="${current.dir}">
                    <include name="sample-data/build.xml"/>
                </fileset>
            </subant>
        </sequential>
    </macrodef>

                                           
    <target name="deploy" depends="dist, -module-deploy"/>
    <target name="clean" depends="-module-clean">
        <iterate target="clean"/>
    </target>
</project>
