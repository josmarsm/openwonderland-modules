/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.jdesktop.wonderland.modules.isocial.scavenger.client.components;

import com.jme.math.Vector3f;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.*;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.sound.sampled.*;
import javax.swing.AbstractAction;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import org.jdesktop.wonderland.client.cell.Cell;
import org.jdesktop.wonderland.client.cell.asset.AssetUtils;
import org.jdesktop.wonderland.client.jme.ClientContextJME;
import org.jdesktop.wonderland.client.jme.ViewManager;
import org.jdesktop.wonderland.modules.contentrepo.client.ContentRepository;
import org.jdesktop.wonderland.modules.contentrepo.client.ContentRepositoryRegistry;
import org.jdesktop.wonderland.modules.contentrepo.common.ContentCollection;
import org.jdesktop.wonderland.modules.contentrepo.common.ContentNode;
import org.jdesktop.wonderland.modules.contentrepo.common.ContentRepositoryException;
import org.jdesktop.wonderland.modules.contentrepo.common.ContentResource;
import org.jdesktop.wonderland.modules.isocial.client.ISocialManager;
import org.jdesktop.wonderland.modules.isocial.scavenger.common.MyMessage;
import org.jdesktop.wonderland.modules.isocial.scavenger.common.Question;

/**
 *
 * @author Wish6
 */
public class RecordingPanel extends javax.swing.JPanel {

    /**
     * Creates new form RecordingPanel
     */
    private String callId;
    private Timer timer;
    public MyMessage msgObj;
    private Clip globalClip;
    private Cell parentCell;
    //private boolean recording=true;
    
    private String RECORDING = "Recording...";
    private static final String START_MSG = "Click to Record";
    String MAXLENGTH;
    private String max_length = "2";
    private static final String STOP_MSG = "Click to Stop";

    private String recordStatus;
    private String playStatus;
    private String playURL;
    private String playFile;
    private boolean flag;
    private String untitledFileName;
    
    //private boolean firstRecording = false;
    public RecordingPanel(Cell parentCell,String userName) {
        MAXLENGTH = "("+max_length+" minute maximum)";
        initComponents();
        RECORDING = "Recording...("+max_length+":00)";
        this.parentCell = parentCell;
        
        recordStatus = "empty";
        playStatus = "not_playing";
        flag = false;
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel5 = new javax.swing.JLabel();
        msg_label = new javax.swing.JLabel();
        time_label = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        playLabel = new javax.swing.JLabel();
        stopLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        fileName = new javax.swing.JTextField();

        setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/jdesktop/wonderland/modules/isocial/scavenger/client/resources/RecordPressed.png"))); // NOI18N
        jLabel5.setText("jLabel1");
        jLabel5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel5MouseClicked(evt);
            }
        });

        msg_label.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        msg_label.setText(START_MSG);

        time_label.setText(MAXLENGTH);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Listen : ");

        playLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/jdesktop/wonderland/modules/isocial/scavenger/client/resources/mPlayDisabled-32.png"))); // NOI18N
        playLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                playLabelMouseClicked(evt);
            }
        });

        stopLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/jdesktop/wonderland/modules/isocial/scavenger/client/resources/Stop1Disabled-32.png"))); // NOI18N
        stopLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                stopLabelMouseClicked(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Name Recording : ");

        fileName.setText("untitled");
        fileName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileNameActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(msg_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(time_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jLabel3)
                        .addGap(21, 21, 21)
                        .addComponent(playLabel)
                        .addGap(18, 18, 18)
                        .addComponent(stopLabel)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fileName, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(msg_label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(time_label))
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(stopLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(playLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jLabel3)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(fileName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel5MouseClicked
        // TODO add your handling code here:
        if ((!recordStatus.equals("recording")) && playStatus.equals("not_playing")) {
            try {
                startRecording();
                recordStatus = "recording";
            } catch (UnsupportedAudioFileException ex) {
                Logger.getLogger(RecordingPanel.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(RecordingPanel.class.getName()).log(Level.SEVERE, null, ex);
            } catch (LineUnavailableException ex) {
                Logger.getLogger(RecordingPanel.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ContentRepositoryException ex) {
                Logger.getLogger(RecordingPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (recordStatus.equals("recording")) {
            try {
                getTimer().stop();
                stopRecording();
                recordStatus = "not_empty";
                playURL = "temp";
                playFile = untitledFileName;
                //cancleButton.setEnabled(true);
            } catch (UnsupportedAudioFileException ex) {
                Logger.getLogger(RecordingPanel.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(RecordingPanel.class.getName()).log(Level.SEVERE, null, ex);
            } catch (LineUnavailableException ex) {
                Logger.getLogger(RecordingPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jLabel5MouseClicked

    private void playLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playLabelMouseClicked
        // TODO add your handling code here:
        if(recordStatus.equals("not_empty") && playStatus.equals("not_playing")) {
            try {
                play();
                playStatus = "playing";
            } catch (ContentRepositoryException ex) {
                Logger.getLogger(RecordingPanel.class.getName()).log(Level.SEVERE, null, ex);
            } catch (UnsupportedAudioFileException ex) {
                Logger.getLogger(RecordingPanel.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(RecordingPanel.class.getName()).log(Level.SEVERE, null, ex);
            } catch (LineUnavailableException ex) {
                Logger.getLogger(RecordingPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_playLabelMouseClicked

    private void stopLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_stopLabelMouseClicked
        // TODO add your handling code here:
        if(playStatus.equals("playing")) {
            stop();
            playStatus = "not_playing";
        }
    }//GEN-LAST:event_stopLabelMouseClicked

    private void fileNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fileNameActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JTextField fileName;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel msg_label;
    private javax.swing.JLabel playLabel;
    private javax.swing.JLabel stopLabel;
    private javax.swing.JLabel time_label;
    // End of variables declaration//GEN-END:variables

    public void stopRecording() throws UnsupportedAudioFileException, IOException, LineUnavailableException
    {             
        msg_label.setText(START_MSG);
        time_label.setText(MAXLENGTH);
        playLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/jdesktop/wonderland/modules/isocial/scavenger/client/resources/mPlayPressedBlue-32.png")));
        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/jdesktop/wonderland/modules/isocial/scavenger/client/resources/RecordPressed.png")));
        MyMessage mObj = new MyMessage("END_RECORDING",null,callId,null,ISocialManager.INSTANCE.getSession().getUsername()); 
        this.parentCell.sendCellMessage(mObj);
        
        //play endinng tone
        AudioInputStream inputStream = null;
        AudioInputStream inputS = null;
        URL url = RecordingPanel.class.getResource("/org/jdesktop/wonderland/modules/isocial/scavenger/client/resources/start_tone.au");
        inputS = AudioSystem.getAudioInputStream(url);
        final Clip clip  = AudioSystem.getClip();
        clip.open(inputS);
        clip.start();
        
    }
    
    public void startRecording() throws ContentRepositoryException, UnsupportedAudioFileException, IOException, LineUnavailableException
    {
        
        if(recordStatus.equals("empty"))
        {
            //create directory if not exists
            ContentRepositoryRegistry registry = ContentRepositoryRegistry.getInstance();
            ContentRepository repo = registry.getRepository(ISocialManager.INSTANCE.getSession());
            ContentCollection user = (ContentCollection) repo.getUserRoot().getParent().getChild(ISocialManager.INSTANCE.getUsername());
            ContentCollection qca = (ContentCollection) user.getChild("question-capability-audio");
            if(qca==null) {
                qca = (ContentCollection) user.createChild("question-capability-audio", ContentNode.Type.COLLECTION);
            }
            ContentCollection temp = (ContentCollection) qca.getChild("temp");
            if(temp==null) {
                temp = (ContentCollection) qca.createChild("temp", ContentNode.Type.COLLECTION);
            }
            untitledFileName = "untitled";
            flag = true;
            //prompt user for file name
            /*String fname1 = JOptionPane.showInputDialog(this, "Enter File Name : ", "File Name", JOptionPane.QUESTION_MESSAGE);
            //System.out.println("fname1 : "+fname1);
            if(fname1!=null) {
                if(!fname1.trim().equals("")) {
                    if(qca.getChild(fname1+".au")!=null) {
                        JOptionPane.showMessageDialog(this, "File already exists");
                    }
                    else {
                        qca.createChild(fname1+".au",ContentNode.Type.RESOURCE);
                        oldfileName1 = fileName1;
                        fileName1 = fname1;
                        firstRecording=true;
                        flag = true;
                    }
                }
            }*/
       }
       else
       {
            int answer = JOptionPane.showConfirmDialog(this.getTopLevelAncestor(), "Replace recording?","Replace Recording",JOptionPane.YES_NO_OPTION);
            if(answer==JOptionPane.YES_OPTION) {  
                flag= true;
            }
            else {
                flag = false;
            }
       } 
       if(flag)
       {
            playLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/jdesktop/wonderland/modules/isocial/scavenger/client/resources/mPlayDisabled-32.png")));
            ViewManager vm=ClientContextJME.getViewManager();
            final Vector3f v = vm.getPrimaryViewCell().getWorldTransform().getTranslation(null);
            callId  = String.valueOf(Math.random());
            msg_label.setText(RECORDING);
            time_label.setText(STOP_MSG);
            jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/jdesktop/wonderland/modules/isocial/scavenger/client/resources/StopRed.png")));
            
            //playing starting tone
            URL url = RecordingPanel.class.getResource("/org/jdesktop/wonderland/modules/isocial/scavenger/client/resources/start_tone.au");
            AudioInputStream inputStream = AudioSystem
                             .getAudioInputStream(url);
            final Clip clip  = AudioSystem.getClip();
            clip.open(inputStream);
            final long len = clip.getFrameLength();
            clip.addLineListener(new LineListener() {
                public void update(LineEvent event) {
                    if(!clip.isRunning()) {
                        MyMessage mObj = new MyMessage("START_RECORDING",untitledFileName,callId,v,ISocialManager.INSTANCE.getSession().getUsername()); 
                        parentCell.sendCellMessage(mObj);
                        Timer timer =null;
                        RecordingPanel.TimerListener tl = new RecordingPanel.TimerListener();
                        timer  = new Timer(1000,tl);
                        setTimer(timer);
                        tl.setTimer(timer);
                        timer.start();
                    }
                 }
            });       
            clip.start();
       }
    }
    
    public void play() throws ContentRepositoryException, UnsupportedAudioFileException, IOException, LineUnavailableException {
        ContentRepositoryRegistry registry = ContentRepositoryRegistry.getInstance();
        ContentRepository repo = registry.getRepository(ISocialManager.INSTANCE.getSession());
        ContentCollection node = (ContentCollection) repo.getUserRoot().getParent().getChild(ISocialManager.INSTANCE.getUsername());
        ContentCollection audio = (ContentCollection) node.getChild("question-capability-audio");
        ContentCollection temp = (ContentCollection) audio.getChild("temp");
        ContentResource file = (ContentResource) temp.getChild(playFile+".au");
        
        if(file!=null) {
            playLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/jdesktop/wonderland/modules/isocial/scavenger/client/resources/mPlayDisabled-32.png")));
            stopLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/jdesktop/wonderland/modules/isocial/scavenger/client/resources/mStop1PressedBlue-32.png")));
            //Playing .au file
            AudioInputStream inputStream = null;
            final Clip clip;
            inputStream = AudioSystem.getAudioInputStream(file.getURL());
            clip = AudioSystem.getClip();
            clip.open(inputStream);
            clip.addLineListener(new RecordingPanel.MyListener(clip));
            clip.start();
            globalClip = clip;
        }
    }
    private void stop() {
        stopLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/jdesktop/wonderland/modules/isocial/scavenger/client/resources/mStop1Disabled-32.png")));
        playLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/jdesktop/wonderland/modules/isocial/scavenger/client/resources/mPlayDisabled-32.png")));
        globalClip.stop();
    }

    class TimerListener extends AbstractAction 
    {
            Timer timer;
            int i=0;
            long time;
            public void setTimer(Timer timer) {
                this.timer = timer;
                time = Long.parseLong(max_length);
                time = time * 60;
                
            }          
            public  Timer getTimer() {
                return timer;
            }          
            public void actionPerformed(ActionEvent e) {
                i++;
                long diff = time-i;
                if(diff<0){
                try {
                    timer.stop();
                    stopRecording();
                } catch (UnsupportedAudioFileException ex) {
                    Logger.getLogger(RecordingPanel.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(RecordingPanel.class.getName()).log(Level.SEVERE, null, ex);
                } catch (LineUnavailableException ex) {
                    Logger.getLogger(RecordingPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
                }     
                else {                                 
                    long min = diff/60;
                    long secs = diff - (60*min);

                    String mins = null;
                    if(min<10){
                        mins = "0"+String.valueOf(min);
                    } else {
                        mins = String.valueOf(min);
                    }
                    String secss = null;
                    if(secs<10){
                        secss = "0"+String.valueOf(secs);
                    } else {
                        secss = String.valueOf(secs);
                    }
                    msg_label.setText("Recording...("+mins+" : "+secss+")");                   
                }        
            }           
    }
    public void setTimer(Timer timer) {
        this.timer = timer;
    }
    public Timer getTimer() {
        return timer;
    }
    class MyListener implements LineListener
    {
        Clip clip;
        public MyListener(Clip clip) 
        {
            this.clip = clip;
        }
        public void update(LineEvent event) 
        {
            if(!clip.isRunning()) 
            {
                playStatus = "not_playing";
                playLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/jdesktop/wonderland/modules/isocial/scavenger/client/resources/mPlayPressedBlue-32.png")));
                stopLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/jdesktop/wonderland/modules/isocial/scavenger/client/resources/mStop1Disabled-32.png")));
            }
        }
     }     
    public String saveAudioFiles() throws MalformedURLException, IOException, ContentRepositoryException, URISyntaxException {
        String filename = fileName.getText();
        System.out.println("recordStatus : "+recordStatus);
        if(recordStatus.equals("not_empty")) {
            if(validateFileName(filename)) {
                
                ContentRepositoryRegistry registry = ContentRepositoryRegistry.getInstance();
                ContentRepository repo = registry.getRepository(ISocialManager.INSTANCE.getSession());
                ContentCollection user = (ContentCollection) repo.getUserRoot().getParent().getChild(ISocialManager.INSTANCE.getUsername());
                ContentCollection qca = (ContentCollection) user.getChild("question-capability-audio");
                ContentResource file = (ContentResource) qca.getChild(filename+".au");
                if(file!=null) {
                    JOptionPane.showMessageDialog(this, "File with the name \'"+filename+"\' already exists.");
                    return null;
                }
                StringBuilder sb = new StringBuilder("http://")
                        .append(ISocialManager.INSTANCE.getSession().getServerNameAndPort())
                        .append("/isocial-sheets/isocial-sheets/convertaufile?repository=questionCap&filename=")
                        .append(filename+"&username="+ISocialManager.INSTANCE.getSession().getUsername());
                URL url = new URL(sb.toString());
                URI uri = new URI(url.getProtocol(), url.getUserInfo()
                        , url.getHost(), url.getPort(), url.getPath()
                        , url.getQuery(), url.getRef());
                url = uri.toURL();
                System.out.println("url : "+url);
                HttpURLConnection conn = (HttpURLConnection) url.openConnection();
                ISocialManager.INSTANCE.getSession().getCredentialManager().secureURLConnection(conn);
                conn.setRequestMethod("POST");
                conn.setDoInput(true);
                conn.setDoOutput(true);
                //conn.setRequestProperty("Content-Type", "application/xml");
                // write sheet XML data
                BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                return filename;
            } else {
                JOptionPane.showMessageDialog(this, "Invalid file name.");
                return null;
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please record your answer before click on submit.");
            return null;
        }
    }
    private boolean validateFileName(String fileName) {
        Pattern pattern = Pattern.compile("([A-Z _ a-z _ 0-9])+");
        Matcher matcher = pattern.matcher(fileName);
        boolean isMatch = matcher.matches();
        return isMatch;
    }
}

