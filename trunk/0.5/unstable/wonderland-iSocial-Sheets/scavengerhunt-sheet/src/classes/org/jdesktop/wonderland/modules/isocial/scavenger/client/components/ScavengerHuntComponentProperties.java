/**
 * Copyright (c) 2012, WonderBuilders, Inc., All Rights Reserved
 */

/*
 * ScavengerHuntComponentProperties.java
 *
 * Created on Mar 28, 2012, 5:18:51 PM
 */
package org.jdesktop.wonderland.modules.isocial.scavenger.client.components;

import java.awt.event.ItemEvent;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.ResourceBundle;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import org.jdesktop.wonderland.client.cell.properties.CellPropertiesEditor;
import org.jdesktop.wonderland.client.cell.properties.annotation.PropertiesFactory;
import org.jdesktop.wonderland.client.cell.properties.spi.PropertiesFactorySPI;
import org.jdesktop.wonderland.client.jme.JmeClientMain;
import org.jdesktop.wonderland.common.cell.state.CellComponentServerState;
import org.jdesktop.wonderland.common.cell.state.CellServerState;
import org.jdesktop.wonderland.modules.isocial.client.ISocialManager;
import org.jdesktop.wonderland.modules.isocial.common.model.Sheet;
import org.jdesktop.wonderland.modules.isocial.scavenger.client.WorldSheetManager;
import org.jdesktop.wonderland.modules.isocial.scavenger.common.FindMethod;
import org.jdesktop.wonderland.modules.isocial.scavenger.common.ScavengerHuntComponentServerState;
import org.jdesktop.wonderland.modules.isocial.scavenger.common.ScavengerHuntConstants;
import org.jdesktop.wonderland.modules.isocial.scavenger.common.ScavengerHuntItem;
import org.jdesktop.wonderland.modules.isocial.scavenger.common.ScavengerHuntSheet;
import org.jdesktop.wonderland.modules.isocial.scavenger.common.SharedDataItem;
import org.jdesktop.wonderland.modules.isocial.scavenger.common.SharedFindMethod;
import org.jdesktop.wonderland.modules.sharedstate.client.SharedMapCli;
import org.jdesktop.wonderland.modules.sharedstate.client.SharedStateComponent;

/**
 *
 * @author Vladimir Djurovic
 */
@PropertiesFactory(ScavengerHuntComponentServerState.class)
public class ScavengerHuntComponentProperties extends JPanel implements PropertiesFactorySPI {

    /** Resource bundle containing component configuration data. */
    private static final ResourceBundle BUNDLE = ResourceBundle.getBundle(ScavengerHuntConstants.BUNDLE_PATH);
    private static final Logger LOGGER = Logger.getLogger(ScavengerHuntComponentProperties.class.getName());
    private CellPropertiesEditor editor = null;
    /** Represents an object used in scavenger hunt. */
    private ScavengerHuntItem item;
    private Sheet sheet;
    private FindMethod findMethod;
    private SharedMapCli globalSharedMap;

    /** Creates new form ScavengerHuntComponentProperties */
    public ScavengerHuntComponentProperties() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        findMethodButtonGroup = new javax.swing.ButtonGroup();
        answerTypeGroup = new javax.swing.ButtonGroup();
        titleLabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        nameLabel = new javax.swing.JLabel();
        objectNameField = new javax.swing.JTextField();
        findUsingLabel = new javax.swing.JLabel();
        leftClickFindRB = new javax.swing.JRadioButton();
        proximityFindRB = new javax.swing.JRadioButton();
        rightClickFindRB = new javax.swing.JRadioButton();
        distanceField = new javax.swing.JTextField();
        distanceLabel = new javax.swing.JLabel();
        selectionTextField = new javax.swing.JTextField();
        optionaPanel = new javax.swing.JPanel();
        hintsTitlsLabel = new javax.swing.JLabel();
        hint1Label = new javax.swing.JLabel();
        hint2Label = new javax.swing.JLabel();
        hint1TextField = new javax.swing.JTextField();
        hint2TextField = new javax.swing.JTextField();
        hint3Label = new javax.swing.JLabel();
        hint3TextField = new javax.swing.JTextField();
        giveUpCheckBox = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        giveUpTextField = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        questionTitleLabel3 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        questionTextArea = new javax.swing.JTextArea();
        noAnswerRB = new javax.swing.JRadioButton();
        includeTextBoxRB = new javax.swing.JRadioButton();
        includeRecButtonRB = new javax.swing.JRadioButton();

        setPreferredSize(new java.awt.Dimension(450, 620));

        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("org/jdesktop/wonderland/modules/isocial/scavenger/client/components/strings"); // NOI18N
        titleLabel.setText(bundle.getString("ScavengerHuntComponentProperties.titleLabel.text")); // NOI18N

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("ScavengerHuntComponentProperties.requiredPanel.title"))); // NOI18N

        nameLabel.setText(bundle.getString("ScavengerHuntComponentProperties.nameLabel.text")); // NOI18N

        objectNameField.setText(bundle.getString("ScavengerHuntComponentProperties.objectNameField.text")); // NOI18N
        objectNameField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                objectNameFieldKeyTyped(evt);
            }
        });

        findUsingLabel.setText(bundle.getString("ScavengerHuntComponentProperties.findUsingLabel.text")); // NOI18N

        findMethodButtonGroup.add(leftClickFindRB);
        leftClickFindRB.setSelected(true);
        leftClickFindRB.setText(bundle.getString("ScavengerHuntComponentProperties.leftClickFindRB.text")); // NOI18N
        leftClickFindRB.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                leftClickFindRBItemStateChanged(evt);
            }
        });

        findMethodButtonGroup.add(proximityFindRB);
        proximityFindRB.setText(bundle.getString("ScavengerHuntComponentProperties.proximityFindRB.text")); // NOI18N
        proximityFindRB.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                proximityFindRBItemStateChanged(evt);
            }
        });

        findMethodButtonGroup.add(rightClickFindRB);
        rightClickFindRB.setText(bundle.getString("ScavengerHuntComponentProperties.rightClickFindRB.text")); // NOI18N
        rightClickFindRB.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rightClickFindRBItemStateChanged(evt);
            }
        });

        distanceField.setText(bundle.getString("ScavengerHuntComponentProperties.distanceField.text")); // NOI18N
        distanceField.setEnabled(false);
        distanceField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                distanceFieldKeyTyped(evt);
            }
        });

        distanceLabel.setText(bundle.getString("ScavengerHuntComponentProperties.distanceLabel.text")); // NOI18N

        selectionTextField.setText(bundle.getString("ScavengerHuntComponentProperties.selectionTextField.text")); // NOI18N
        selectionTextField.setEnabled(false);
        selectionTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                selectionTextFieldKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(nameLabel)
                    .addComponent(findUsingLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(proximityFindRB)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(distanceField, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(distanceLabel))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(rightClickFindRB)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(selectionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 2, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(leftClickFindRB)
                            .addComponent(objectNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(24, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameLabel)
                    .addComponent(objectNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(findUsingLabel)
                    .addComponent(leftClickFindRB))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(proximityFindRB)
                    .addComponent(distanceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(distanceLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rightClickFindRB)
                    .addComponent(selectionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        optionaPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("ScavengerHuntComponentProperties.optionalPanel.title"))); // NOI18N

        hintsTitlsLabel.setText(bundle.getString("ScavengerHuntComponentProperties.hintsTitlsLabel.text")); // NOI18N

        hint1Label.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/jdesktop/wonderland/modules/isocial/scavenger/client/resources/icons/question-white.png"))); // NOI18N
        hint1Label.setText(bundle.getString("ScavengerHuntComponentProperties.hint1Label.text")); // NOI18N

        hint2Label.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/jdesktop/wonderland/modules/isocial/scavenger/client/resources/icons/question-blue.png"))); // NOI18N
        hint2Label.setText(bundle.getString("ScavengerHuntComponentProperties.hint2Label.text")); // NOI18N

        hint1TextField.setText(bundle.getString("ScavengerHuntComponentProperties.hint1TextField.text")); // NOI18N
        hint1TextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                hint1TextFieldKeyTyped(evt);
            }
        });

        hint2TextField.setText(bundle.getString("ScavengerHuntComponentProperties.hint2TextField.text")); // NOI18N
        hint2TextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                hint2TextFieldKeyTyped(evt);
            }
        });

        hint3Label.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/jdesktop/wonderland/modules/isocial/scavenger/client/resources/icons/question-red.png"))); // NOI18N
        hint3Label.setText(bundle.getString("ScavengerHuntComponentProperties.hint3Label.text")); // NOI18N

        hint3TextField.setText(bundle.getString("ScavengerHuntComponentProperties.hint3TextField.text")); // NOI18N
        hint3TextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                hint3TextFieldKeyTyped(evt);
            }
        });

        giveUpCheckBox.setSelected(true);
        giveUpCheckBox.setText(bundle.getString("ScavengerHuntComponentProperties.giveUpCheckBox.text")); // NOI18N
        giveUpCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                giveUpCheckBoxItemStateChanged(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/jdesktop/wonderland/modules/isocial/scavenger/client/resources/icons/question-red.png"))); // NOI18N
        jLabel1.setText(bundle.getString("ScavengerHuntComponentProperties.jLabel1.text")); // NOI18N

        giveUpTextField.setText(bundle.getString("ScavengerHuntComponentProperties.giveUpTextField.text")); // NOI18N
        giveUpTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                giveUpTextFieldKeyTyped(evt);
            }
        });

        questionTitleLabel3.setText(bundle.getString("ScavengerHuntComponentProperties.questionTitleLabel3.text")); // NOI18N

        questionTextArea.setColumns(20);
        questionTextArea.setLineWrap(true);
        questionTextArea.setRows(5);
        questionTextArea.setWrapStyleWord(true);
        questionTextArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                questionTextAreaKeyPressed(evt);
            }
        });
        jScrollPane4.setViewportView(questionTextArea);

        answerTypeGroup.add(noAnswerRB);
        noAnswerRB.setText(bundle.getString("ScavengerHuntComponentProperties.noAnswerRB.text")); // NOI18N
        noAnswerRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noAnswerRBActionPerformed(evt);
            }
        });

        answerTypeGroup.add(includeTextBoxRB);
        includeTextBoxRB.setText(bundle.getString("ScavengerHuntComponentProperties.includeTextBoxRB.text")); // NOI18N
        includeTextBoxRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                includeTextBoxRBActionPerformed(evt);
            }
        });

        answerTypeGroup.add(includeRecButtonRB);
        includeRecButtonRB.setText(bundle.getString("ScavengerHuntComponentProperties.includeRecButtonRB.text")); // NOI18N
        includeRecButtonRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                includeRecButtonRBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(questionTitleLabel3)
                            .addComponent(noAnswerRB)
                            .addComponent(includeTextBoxRB)
                            .addComponent(includeRecButtonRB))
                        .addGap(0, 118, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(questionTitleLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(noAnswerRB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(includeTextBoxRB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(includeRecButtonRB)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout optionaPanelLayout = new javax.swing.GroupLayout(optionaPanel);
        optionaPanel.setLayout(optionaPanelLayout);
        optionaPanelLayout.setHorizontalGroup(
            optionaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionaPanelLayout.createSequentialGroup()
                .addGroup(optionaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(hint1Label, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(hint2Label, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(hint3Label, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(optionaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(hint2TextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
                    .addComponent(hint3TextField, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(hint1TextField)))
            .addComponent(hintsTitlsLabel)
            .addComponent(giveUpCheckBox)
            .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, optionaPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(giveUpTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        optionaPanelLayout.setVerticalGroup(
            optionaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, optionaPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(hintsTitlsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(optionaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hint1Label)
                    .addComponent(hint1TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(optionaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hint2Label)
                    .addComponent(hint2TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(optionaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hint3Label)
                    .addComponent(hint3TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(giveUpCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(optionaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(giveUpTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(optionaPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(titleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(optionaPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(35, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void giveUpCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_giveUpCheckBoxItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            giveUpTextField.setEnabled(true);
        } else {
            giveUpTextField.setEnabled(false);
        }
        setPanelDirty();
    }//GEN-LAST:event_giveUpCheckBoxItemStateChanged

    private void objectNameFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_objectNameFieldKeyTyped
        // set panel dirty when text is changed
        setPanelDirty();
    }//GEN-LAST:event_objectNameFieldKeyTyped

    private void leftClickFindRBItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_leftClickFindRBItemStateChanged
        if (leftClickFindRB.isSelected()) {
            distanceField.setEnabled(false);
            selectionTextField.setEnabled(false);
            setPanelDirty();
        }
    }//GEN-LAST:event_leftClickFindRBItemStateChanged

    private void proximityFindRBItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_proximityFindRBItemStateChanged
        if (proximityFindRB.isSelected()) {
            distanceField.setEnabled(true);
            selectionTextField.setEnabled(false);
            setPanelDirty();
        }
    }//GEN-LAST:event_proximityFindRBItemStateChanged

    private void distanceFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_distanceFieldKeyTyped
        setPanelDirty();
    }//GEN-LAST:event_distanceFieldKeyTyped

    private void rightClickFindRBItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rightClickFindRBItemStateChanged

        if (rightClickFindRB.isSelected()) {
            distanceField.setEnabled(false);
            selectionTextField.setEnabled(true);
            setPanelDirty();
        }
    }//GEN-LAST:event_rightClickFindRBItemStateChanged

    private void selectionTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_selectionTextFieldKeyTyped
        setPanelDirty();
    }//GEN-LAST:event_selectionTextFieldKeyTyped

    private void hint1TextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_hint1TextFieldKeyTyped
        setPanelDirty();
    }//GEN-LAST:event_hint1TextFieldKeyTyped

    private void hint2TextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_hint2TextFieldKeyTyped
        setPanelDirty();
    }//GEN-LAST:event_hint2TextFieldKeyTyped

    private void hint3TextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_hint3TextFieldKeyTyped
        setPanelDirty();
    }//GEN-LAST:event_hint3TextFieldKeyTyped

    private void giveUpTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_giveUpTextFieldKeyTyped
        setPanelDirty();
    }//GEN-LAST:event_giveUpTextFieldKeyTyped

    private void questionTextAreaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_questionTextAreaKeyPressed
        setPanelDirty();
    }//GEN-LAST:event_questionTextAreaKeyPressed

    private void noAnswerRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noAnswerRBActionPerformed
        setPanelDirty();
    }//GEN-LAST:event_noAnswerRBActionPerformed

    private void includeTextBoxRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_includeTextBoxRBActionPerformed
        setPanelDirty();
    }//GEN-LAST:event_includeTextBoxRBActionPerformed

    private void includeRecButtonRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_includeRecButtonRBActionPerformed
        setPanelDirty();
    }//GEN-LAST:event_includeRecButtonRBActionPerformed

    private void setPanelDirty() {
        editor.setPanelDirty(ScavengerHuntComponentProperties.class, true);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup answerTypeGroup;
    private javax.swing.JTextField distanceField;
    private javax.swing.JLabel distanceLabel;
    private javax.swing.ButtonGroup findMethodButtonGroup;
    private javax.swing.JLabel findUsingLabel;
    private javax.swing.JCheckBox giveUpCheckBox;
    private javax.swing.JTextField giveUpTextField;
    private javax.swing.JLabel hint1Label;
    private javax.swing.JTextField hint1TextField;
    private javax.swing.JLabel hint2Label;
    private javax.swing.JTextField hint2TextField;
    private javax.swing.JLabel hint3Label;
    private javax.swing.JTextField hint3TextField;
    private javax.swing.JLabel hintsTitlsLabel;
    private javax.swing.JRadioButton includeRecButtonRB;
    private javax.swing.JRadioButton includeTextBoxRB;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JRadioButton leftClickFindRB;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JRadioButton noAnswerRB;
    private javax.swing.JTextField objectNameField;
    private javax.swing.JPanel optionaPanel;
    private javax.swing.JRadioButton proximityFindRB;
    private javax.swing.JTextArea questionTextArea;
    private javax.swing.JLabel questionTitleLabel3;
    private javax.swing.JRadioButton rightClickFindRB;
    private javax.swing.JTextField selectionTextField;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables

    public String getDisplayName() {
        return BUNDLE.getString(ScavengerHuntConstants.PROP_SCAVENGER_HUNT_NAME);
    }

    public void setCellPropertiesEditor(CellPropertiesEditor editor) {
        this.editor = editor;
    }

    public JPanel getPropertiesJPanel() {
        return this;
    }

    public void open() {
        CellServerState css = editor.getCellServerState();
        CellComponentServerState ccss = css.getComponentServerState(ScavengerHuntComponentServerState.class);
        ScavengerHuntComponentServerState state = (ScavengerHuntComponentServerState) ccss;

        try {
            List<Sheet> sheets = ISocialManager.INSTANCE.getCurrentInstance().getSheets();
            for (Sheet s : sheets) {
                if (s.getDetails() instanceof ScavengerHuntSheet) {
                    sheet = s;
                    break;
                }
            }


        } catch (IOException ex) {
            throw new RuntimeException(ex);
        }
        
        // check if the sheet is found
        if(sheet == null){
            String[] optins = {"Open sheet manager", "Cancel"};
            int result = JOptionPane.showOptionDialog(this, "No Scavenger Hunt sheet is defined.", "Select sheet", 0, JOptionPane.WARNING_MESSAGE, null, optins, null);
            if(result == 0){
                WorldSheetManager sheetManager = new WorldSheetManager(JmeClientMain.getFrame().getFrame(), true);
                sheetManager.setLocationRelativeTo(this);
                sheetManager.setVisible(true);
            } else {
                return;
            }
        }

        if (state != null && state.getItem() != null) {
            item = state.getItem();
        } else {
            item = new ScavengerHuntItem();
            if (sheet != null) {
                ScavengerHuntSheet shs = (ScavengerHuntSheet) sheet.getDetails();
                item.setQuestion(shs.getQuestion());
                item.setGiveUp(shs.isGiveUp());
                item.setGiveUpMessage(shs.getGiveUpText());
            }
            // clear fields
            hint1TextField.setText("");
            hint2TextField.setText("");
            hint3TextField.setText("");
            distanceField.setText("");
            selectionTextField.setText("");
        }

        objectNameField.setText(item.getName());
        questionTextArea.setText(item.getQuestion());
        if(item.isIncludeAnswer()){
                    includeTextBoxRB.setSelected(true);
                } else {
                    noAnswerRB.setSelected(true);
                }
                if(item.isIncludeAudio()){
                    includeRecButtonRB.setSelected(true);
                }
        List<String> hints = item.getHints();
        if (hints != null && !hints.isEmpty()) {
            hint1TextField.setText(hints.get(0));
            hint2TextField.setText(hints.get(1));
            hint3TextField.setText(hints.get(2));
        }

        giveUpCheckBox.setSelected(item.isGiveUp());
        giveUpTextField.setText(item.getGiveUpMessage());
        globalSharedMap = editor.getCell().getComponent(ScavengerHuntComponent.class).getGlobalSharedMap();
        if (globalSharedMap != null && globalSharedMap.containsKey(ScavengerHuntConstants.FIND_METHOD_KEY_NAME)) {
            findMethod = ((SharedFindMethod)globalSharedMap.get(ScavengerHuntConstants.FIND_METHOD_KEY_NAME)).getMethod();
        }

        if (findMethod == null) {
            findMethod = new FindMethod();
        }
        switch (findMethod.getFindType()) {
            case FindMethod.LEFT_CLICK:
                leftClickFindRB.setSelected(true);
                break;
            case FindMethod.PROXIMITY:
                proximityFindRB.setSelected(true);
                distanceField.setText(findMethod.getParam());
                selectionTextField.setText("");
                break;
            case FindMethod.RIGHT_CLICK:
                rightClickFindRB.setSelected(true);
                selectionTextField.setText(findMethod.getParam());
                distanceField.setText("");
                break;
        }

        editor.setPanelDirty(ScavengerHuntComponentProperties.class, false);

    }

    public void close() {
    }

    public void restore() {
    }

    public void apply() {
        CellServerState css = editor.getCellServerState();
        ScavengerHuntComponentServerState state = (ScavengerHuntComponentServerState) css.getComponentServerState(ScavengerHuntComponentServerState.class);

        if (state == null) {
            state = new ScavengerHuntComponentServerState();
        }
        item.setName(objectNameField.getText());
        // create new Find method
        FindMethod newfind = null;
        if (leftClickFindRB.isSelected()) {
            newfind = new FindMethod(FindMethod.LEFT_CLICK, null, null);
        } else if (proximityFindRB.isSelected()) {
            newfind = new FindMethod(FindMethod.PROXIMITY, "proximity", distanceField.getText());
        } else {
            newfind = new FindMethod(FindMethod.RIGHT_CLICK, "rightClick", selectionTextField.getText());
        }
        // update sheet with new find method
        if (globalSharedMap == null) {
            editor.getCell().getComponent(ScavengerHuntComponent.class).getGlobalSharedMap();
        }
        if(globalSharedMap != null){
            globalSharedMap.put(ScavengerHuntConstants.FIND_METHOD_KEY_NAME, new SharedFindMethod(newfind));
        }
        
        List<String> hints = new ArrayList<String>();
        hints.add(hint1TextField.getText());
        hints.add(hint2TextField.getText());
        hints.add(hint3TextField.getText());
        item.setHints(hints);
        item.setGiveUp(giveUpCheckBox.isSelected());
        if (giveUpCheckBox.isSelected()) {
            item.setGiveUpMessage(giveUpTextField.getText());
        }
        item.setQuestion(questionTextArea.getText());
        if(noAnswerRB.isSelected()){
            item.setIncludeAnswer(false);
        } else if(includeTextBoxRB.isSelected()){
            item.setIncludeAnswer(true);
        } else {
            item.setIncludeAudio(includeRecButtonRB.isSelected());
        }
        item.setCellId(editor.getCell().getCellID().toString());
        state.setItem(item);
        String sheetId = sheet.getId();
        // set sheet ID
        state.setSheetId(sheetId);
        if (sheetId != null) {
            SharedMapCli map = findSheetMap(sheetId);
            map.put(editor.getCell().getCellID().toString(), new SharedDataItem(item));
        }

        editor.addToUpdateList(state);

    }

    /**
     * Returns a shared state map for given sheet ID.
     * 
     * @param sheetId sheet ID
     * @return shared state map
     */
    private SharedMapCli findSheetMap(String sheetId) {
        SharedStateComponent ssc = editor.getCell().getCellCache().getEnvironmentCell().getComponent(SharedStateComponent.class);
        return ssc.get(sheetId);
    }
}
