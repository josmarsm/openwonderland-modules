/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * StudentViewItemPanel.java
 *
 * Created on Mar 31, 2012, 7:46:02 PM
 */
package org.jdesktop.wonderland.modules.isocial.scavenger.client;

import java.awt.Color;
import java.awt.Font;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.net.MalformedURLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.Timer;
import org.jdesktop.wonderland.client.cell.asset.AssetUtils;
import org.jdesktop.wonderland.client.jme.JmeClientMain;
import org.jdesktop.wonderland.modules.isocial.scavenger.client.components.ScavengerHuntComponent;
import org.jdesktop.wonderland.modules.isocial.scavenger.common.ScavengerHuntConstants;
import org.jdesktop.wonderland.modules.isocial.scavenger.common.ScavengerHuntItem;
import org.jdesktop.wonderland.modules.isocial.scavenger.common.SharedDataItem;
import org.jdesktop.wonderland.modules.sharedstate.client.SharedMapCli;
import org.jdesktop.wonderland.modules.sharedstate.client.SharedMapEventCli;
import org.jdesktop.wonderland.modules.sharedstate.client.SharedMapListenerCli;

/**
 * Represents single item in student view.
 *
 * @author Vladimir Djurovic
 */
public class StudentViewItemPanel extends javax.swing.JPanel implements SharedMapListenerCli {
    
    private static final Logger LOGGER = Logger.getLogger(StudentViewItemPanel.class.getName());
    private static final SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
    
    private static final Icon[] hintIcons;
    private static final int ICON_WIDTH = 16;
    private static final int ICON_HEIGHT = 16;
    
    static {
        hintIcons = new Icon[3];
        hintIcons[0] = new ImageIcon(StudentViewItemPanel.class.getResource(ScavengerHuntConstants.HINT_1_ICON_PATH));
        hintIcons[1] = new ImageIcon(StudentViewItemPanel.class.getResource(ScavengerHuntConstants.HINT_2_ICON_PATH));
        hintIcons[2] = new ImageIcon(StudentViewItemPanel.class.getResource(ScavengerHuntConstants.HINT_3_ICON_PATH));
    }
    
    private int hintLevel;
    private ScavengerHuntItem item;
    private String sheetId;
    private SharedMapCli sharedMap;
    private String serverAndPort;
    private String username;

    /** Creates new form StudentViewItemPanel */
    public StudentViewItemPanel(ScavengerHuntItem item, String sheetId, String username, String serverAndPort) {
        this.item = item;
        this.sheetId = sheetId;
        this.serverAndPort = serverAndPort;
        this.username = username;
        initComponents();
        hintLevel = item.getHintUsed();
        if(hintLevel >= hintIcons.length){
            hintLevel = hintIcons.length - 1;
        }
        itemLabel.setIcon(hintIcons[hintLevel]);
        updateCheckBox();
        sharedMap = ScavengerHuntComponent.getSharedMap(sheetId, username);
        sharedMap.addSharedMapListener(this);
    }
    

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        itemLabel = new javax.swing.JLabel();
        itemCheckBox = new javax.swing.JCheckBox();

        itemLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/jdesktop/wonderland/modules/isocial/scavenger/client/resources/icons/question-white.png"))); // NOI18N
        itemLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                itemLabelMouseClicked(evt);
            }
        });

        itemCheckBox.setText("jCheckBox1");
        itemCheckBox.setDisabledIcon(itemCheckBox.getIcon());
        itemCheckBox.setDisabledSelectedIcon(itemCheckBox.getSelectedIcon());
        itemCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(itemLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(itemCheckBox)
                .addContainerGap(24, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(itemLabel)
                    .addComponent(itemCheckBox))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void itemLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_itemLabelMouseClicked
        if (item.isFound()) {
            // show item thumbnail
            String path = ScavengerHuntUtils.getSnapshotPath(item.getCellId(),sheetId, username);
            if (path != null && !path.isEmpty()) {
                JLabel label = null;
                try{
                    ImageIcon icon = new ImageIcon(AssetUtils.getAssetURL(path, serverAndPort));
                    label = new JLabel(icon);
                } catch(MalformedURLException ex){
                    label = new JLabel("Snapshot image not found.");
                }
                JOptionPane.showMessageDialog(JmeClientMain.getFrame().getFrame(), label, item.getName(), JOptionPane.PLAIN_MESSAGE);
            }

        } else {
            if (hintLevel < hintIcons.length) {
                String msg = item.getCurrentHint();
                if(msg == null || msg.isEmpty()){
                    msg = "No more hints";
                }
                JOptionPane.showMessageDialog(JmeClientMain.getFrame().getFrame(), msg, "Hint", JOptionPane.INFORMATION_MESSAGE);
                if (++hintLevel < hintIcons.length) {
                    itemLabel.setIcon(hintIcons[hintLevel]);
                }

            } else {
                int result = JOptionPane.showConfirmDialog(JmeClientMain.getFrame().getFrame(), item.getGiveUpMessage(), "Give up?", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (result == JOptionPane.OK_OPTION) {
                    itemCheckBox.setSelected(true);
                    itemCheckBox.setText("<html><a>" + item.getName() + "</a></html>");
                    itemCheckBox.setEnabled(false);
                    itemLabel.setEnabled(false);
                    item.setUserGaveUp(true);
                    ScavengerHuntUtils.moveAvatarToItem(item.getCellId());
                }
            }
            sharedMap.put(item.getCellId(), new SharedDataItem(item));
        }
        
    }//GEN-LAST:event_itemLabelMouseClicked

    private void itemCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemCheckBoxActionPerformed
        // disable manual change of check box state
        itemCheckBox.setSelected(!itemCheckBox.isSelected());
        // move avatar to item
        if(item.isFound()){
            ScavengerHuntUtils.moveAvatarToItem(item.getCellId());
        }
        
    }//GEN-LAST:event_itemCheckBoxActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox itemCheckBox;
    private javax.swing.JLabel itemLabel;
    // End of variables declaration//GEN-END:variables

    public void propertyChanged(SharedMapEventCli smec) {
        if (smec.getNewValue() instanceof SharedDataItem) {
            SharedDataItem val = (SharedDataItem) smec.getNewValue();
            if (item.getCellId().equals(val.getItem().getCellId())) {
                LOGGER.log(Level.WARNING, "Got notification to update student view at {0}", sdf.format(new Date()));
                item = val.getItem();
                updateCheckBox();
            }
        }
    }
    
    public final void updateCheckBox(){
        itemCheckBox.setSelected(item.isFound());
        if(item.isFound()){
            itemCheckBox.setFont(itemCheckBox.getFont().deriveFont(Font.ITALIC));
            itemCheckBox.setForeground(Color.BLUE);
            //set thumbnail
            //create delay so the image gets uploaded to server
            Timer timer = new Timer(2000, new ActionListener() {

                public void actionPerformed(ActionEvent e) {
                    Thread th = new Thread(new Runnable() {

                        public void run() {
                            try {
                                final String path = ScavengerHuntUtils.getSnapshotPath(item.getCellId(), sheetId, username);
                                if (path != null && !path.isEmpty()) {
                                    BufferedImage bimg = ImageIO.read(AssetUtils.getAssetURL(path, serverAndPort));
                                    final ImageIcon icon = new ImageIcon(bimg.getScaledInstance(ICON_WIDTH, ICON_HEIGHT, Image.SCALE_SMOOTH));
                                    icon.getImage().flush();
                                    // load image and resize it
                                    // we're doing this on EDT thread, since GUI will be modified
                                    SwingUtilities.invokeLater(new Runnable() {

                                        public void run() {
                                            itemLabel.setIcon(icon);
                                            itemLabel.setEnabled(true);
                                            itemCheckBox.setEnabled(true);
                                            itemLabel.repaint();
                                        }
                                    });
                                    
                                    
                                }

                            } catch (Exception ex) {
                                throw new RuntimeException(ex);
                            }
                        }
                    });
                  th.start();
                  
                }
            });
            timer.setRepeats(false);
            timer.start();
            
        }
        itemCheckBox.setText(item.getName());
    }
    
    public String getItemCellId(){
        return item.getCellId();
    }
    
    public void setItem(ScavengerHuntItem item){
        this.item = item;
        itemCheckBox.setText(item.getName());
    }
    
    /**
     * Marks the item as given up.
     */
    public void giveUpItem() {
        if (!item.isFound()) {
            itemCheckBox.setSelected(true);
            itemCheckBox.setText("<html><a>" + item.getName() + "</a></html>");
            itemCheckBox.setEnabled(false);
            itemLabel.setEnabled(false);
            item.setUserGaveUp(true);
        }

    }
     
}
