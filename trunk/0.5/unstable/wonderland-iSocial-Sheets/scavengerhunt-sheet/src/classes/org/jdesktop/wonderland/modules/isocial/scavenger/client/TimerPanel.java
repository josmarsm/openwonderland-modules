/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.jdesktop.wonderland.modules.isocial.scavenger.client;

import java.io.IOException;
import java.util.Collection;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import org.jdesktop.wonderland.client.jme.JmeClientMain;
import org.jdesktop.wonderland.modules.isocial.client.ISocialManager;
import org.jdesktop.wonderland.modules.isocial.common.model.Result;
import org.jdesktop.wonderland.modules.isocial.common.model.ResultMetadata;
import org.jdesktop.wonderland.modules.isocial.common.model.Sheet;
import org.jdesktop.wonderland.modules.isocial.scavenger.client.components.ScavengerHuntComponent;
import org.jdesktop.wonderland.modules.isocial.scavenger.common.ScavengerHuntResult;

/**
 *
 * @author Vladimir Djurovic
 */
public class TimerPanel extends javax.swing.JPanel {
    
    private static final Logger LOGGER = Logger.getLogger(TimerPanel.class.getName());
    
    /**
     * Warning message displayed when users tries to end the hunt.
     */
    private static final String QUIT_WARNING_MSG = "Do you really want to end the Scanvenger Hunt now?\n"
            +                                       "If you end, you will not get points for items you have not yet found.";
    
    /**
     * Elapsed time in seconds.
     */
    private long time;
    
    /**
     * Timer for the clock.
     */
    private Timer clockTimer;
    
    /** Current user. */
    private String username;
    
    /** Current sheet. */
    private Sheet sheet;
    
    private ScavengerHuntResult result;
    
    private ScavengerHuntStudentViewPanel studentViewPanel;
    
   
    /**
     * Creates new form TimerPanel
     */
    public TimerPanel(String username, Sheet sheet) {
        initComponents();
        this.username = username;
        this.sheet = sheet;
        time = 0;
    }
    
    /**
     * Updates time shown with specified value. Value is specified in miliseconds.
     * 
     * @param time time in miliseconds
     */
    public void updateTime(long time){
        timeLabel.setText(ScavengerHuntUtils.formatTime(time));
        this.time++;
    }

    public void setClockTimer(Timer clockTimer) {
        this.clockTimer = clockTimer;
    }

    public void endHunt(){
        this.clockTimer.stop();
        endHuntButton.setEnabled(false);
        startHuntButton.setEnabled(false);
    }
    
    public void setResult(ScavengerHuntResult result){
        this.result = result;
    }

    public void setStudentViewPanel(ScavengerHuntStudentViewPanel studentViewPanel) {
        this.studentViewPanel = studentViewPanel;
    }

    /**
     * Get elapsed time in seconds.
     * 
     * @return time in seconds
     */
    public long getTime() {
        return time;
    }
    
    
 
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        startHuntButton = new javax.swing.JButton();
        endHuntButton = new javax.swing.JButton();
        timeLabel = new javax.swing.JLabel();

        setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        startHuntButton.setText("Start");
        startHuntButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startHuntButtonActionPerformed(evt);
            }
        });
        jPanel1.add(startHuntButton);

        endHuntButton.setText("End");
        endHuntButton.setEnabled(false);
        endHuntButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endHuntButtonActionPerformed(evt);
            }
        });
        jPanel1.add(endHuntButton);

        add(jPanel1, java.awt.BorderLayout.EAST);

        timeLabel.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        timeLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        timeLabel.setText("0:00");
        timeLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        timeLabel.setBorder(javax.swing.BorderFactory.createEmptyBorder(3, 1, 3, 5));
        add(timeLabel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Handle "End hunt" button events.
     * @param evt 
     */
    private void endHuntButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endHuntButtonActionPerformed
        String[] options = {"Keep Looking", "End now"};
        int result = JOptionPane.showOptionDialog(JmeClientMain.getFrame().getFrame(), QUIT_WARNING_MSG,
                "Warning", JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE, null, options, options[0]);
        if(result == 1){
            // end the hunt
            try{
                Result r = null;
                Collection<Result> results = ISocialManager.INSTANCE.getResults(sheet.getId());
                for(Result res : results){
                    if(res.getCreator().equals(username)){
                        r = res;
                        ScavengerHuntResult shr = (ScavengerHuntResult)r.getDetails();
                        shr.setDuration(time);
                        break;
                    }
                }
                if(r != null){
                    ISocialManager.INSTANCE.updateResult(r.getId(), r.getDetails());
                }
                endHunt();
            } catch(IOException ex){
                JOptionPane.showMessageDialog(this, "Error ending hunt: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
            
        }
    }//GEN-LAST:event_endHuntButtonActionPerformed

    private void startHuntButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startHuntButtonActionPerformed
        clockTimer.start();
        startHuntButton.setEnabled(false);
        endHuntButton.setEnabled(true);
        String resultId = null;
         // if result already exists, update it, otherwise submit new
            try{
                Collection<Result> currentRes = ISocialManager.INSTANCE.getResults(sheet.getId());
                for(Result r : currentRes){
                    if(r.getCreator().equals(username)){
                        resultId = r.getId();
                        break;
                    }
                }
                if(resultId == null){
                    ResultMetadata rmd = new ResultMetadata();
                    rmd.setVisibility(ResultMetadata.Visibility.PUBLIC);
                    Result submittedResult = ISocialManager.INSTANCE.submitResult(sheet.getId(), result, rmd);
                    resultId = submittedResult.getId();
                }
                // try to get shared map for user. This should prevent client from blocking
                Thread th = new Thread(new Runnable() {

                    public void run() {
                        LOGGER.log(Level.WARNING, "Trying to get shared map for {0}", username);
                        ScavengerHuntComponent.getSharedMap(sheet.getId(), username);
                        LOGGER.log(Level.WARNING, "Got shared map for {0}", username);
                    }
                });
                th.start();
                
            } catch(IOException ex){
                throw new RuntimeException(ex);
            }
            studentViewPanel.setResultId(resultId);
            studentViewPanel.showItemsList();
    }//GEN-LAST:event_startHuntButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton endHuntButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton startHuntButton;
    private javax.swing.JLabel timeLabel;
    // End of variables declaration//GEN-END:variables
}
