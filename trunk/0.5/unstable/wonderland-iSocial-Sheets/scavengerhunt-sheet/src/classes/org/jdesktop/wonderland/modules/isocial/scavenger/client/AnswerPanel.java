/**
 * Copyright (c) 2012, WonderBuilders, Inc., All Rights Reserved
 */

/*
 * AnswerPanel.java
 *
 * Created on Apr 14, 2012, 8:07:53 AM
 */
package org.jdesktop.wonderland.modules.isocial.scavenger.client;

import java.awt.BorderLayout;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JTextArea;
import javax.swing.text.html.HTMLEditorKit;
import org.jdesktop.wonderland.client.cell.Cell;
import org.jdesktop.wonderland.modules.isocial.client.ISocialManager;
import org.jdesktop.wonderland.modules.isocial.scavenger.client.components.RecordingPanel;
import org.jdesktop.wonderland.modules.isocial.scavenger.common.Question;
import org.jdesktop.wonderland.modules.isocial.scavenger.common.ScavengerHuntItem;
import org.jdesktop.wonderland.modules.poster.client.PosterEditorPane;

/**
 *
 * @author Vladimir Djurovic
 */
public class AnswerPanel<T> extends javax.swing.JPanel {
    
    /** Panel type for SH item. */
    private static final int TYPE_SH_ITEM = 0;
    
    /** Panel type for Question. */
    private static final int TYPE_QUESTION = 1;
    
    private ScavengerHuntItem item;
    private Question question;
    private boolean includeAnswer = false;
    private boolean includeAudio = false;
    
    /** text area for writing answer. */
    private JTextArea answerTextArea;
    
    /** Existing answer text (if any). */
    private String answerText;
    
    /** Panel with audio recording controls. */
    private RecordingPanel recPanel;
    
    /** Cell needed for recording panel. */
    private Cell cell;
    
    /**
     * Pane for displaying HTML content.
     */
//    private PosterEditorPane posterPane;
    private JLabel textLabel;

    /** Creates new form AnswerPanel.
     * @param param type of panel (SH item or Question)
     */
    public AnswerPanel(T param, Cell cell) {
        initComponents();
//        posterPane = new PosterEditorPane(cell);
//        posterPane.setBackground(getBackground());
//        add(posterPane, BorderLayout.NORTH);
        StringBuilder sb = new StringBuilder("<html><body style=\"width:200px\">");
        if(param instanceof ScavengerHuntItem){
            item = (ScavengerHuntItem)param;
            includeAnswer = item.isIncludeAnswer();
            includeAudio = item.isIncludeAudio();
            sb.append(item.getQuestion());
            
            answerText = item.getAnswer();
        } else if(param instanceof Question){
            question = (Question)param;
            includeAnswer = question.isIncludeAnswer();
            includeAudio = question.isIncludeAudio();
            sb.append(question.getQuestionText());
            answerText = question.getAnswerText();
        }
        sb.append("</body></html>");
        textLabel = new JLabel(sb.toString());
        add(textLabel, BorderLayout.NORTH);
        setUpGui();
    }
    
    public String getAnswer(){
        String answer = null;
        try {
            if (includeAnswer) {
                answer = answerTextArea.getText();
            } else if (includeAudio) {
                String filename = recPanel.saveAudioFiles();
                answer = "<audio controls='controls'><source src='http://" + ISocialManager.INSTANCE.getSession().getServerNameAndPort()
                        + "/webdav/content/users/" + ISocialManager.INSTANCE.getUsername() + "/question-capability-audio/"
                        + filename + ".wav' type='audio/wav' />"
                        + "<embed height='70px' src='http://" + ISocialManager.INSTANCE.getSession().getServerNameAndPort()
                        + "/webdav/content/users/" + ISocialManager.INSTANCE.getUsername() + "/question-capability-audio/"
                        + filename + ".wav' autostart='false' >"
                        + "</embed></audio>";
            }
        } catch (Exception ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        }
        return answer;
    }
    
    /**
     * Set up GUI for Scavenger Hunt item answer.
     * 
     * @param shi item
     */
    private void setUpGui(){
        if(includeAnswer){
            answerTextArea = new JTextArea();
            answerTextArea.setRows(3);
            answerTextArea.setLineWrap(true);
            answerTextArea.setWrapStyleWord(true);
            answerTextArea.setText(answerText);
            add(answerTextArea, BorderLayout.CENTER);
        } else if(includeAudio){
            recPanel = new RecordingPanel(cell, ISocialManager.INSTANCE.getUsername().toString());
            add(recPanel, BorderLayout.CENTER);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout(10, 10));
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
