/**
 * Project Wonderland
 *
 * Copyright (c) 2004-2009, Sun Microsystems, Inc., All Rights Reserved
 *
 * Redistributions in source code form must reproduce the above
 * copyright and this condition.
 *
 * The contents of this file are subject to the GNU General Public
 * License, Version 2 (the "License"); you may not use this file
 * except in compliance with the License. A copy of the License is
 * available at http://www.opensource.org/licenses/gpl-license.php.
 *
 * Sun designates this particular file as subject to the "Classpath"
 * exception as provided by Sun in the License file that accompanied
 * this code.
 */

package org.jdesktop.wonderland.modules.movierecorder.client;

import java.awt.Color;
import java.awt.GridBagLayout;
import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.SpinnerNumberModel;
import org.jdesktop.wonderland.client.softphone.SoftphoneControl;
import org.jdesktop.wonderland.client.softphone.SoftphoneControlImpl;
import org.jdesktop.wonderland.modules.movierecorder.client.utils.MovieCreator;

/**
 * Control panel for movie recorder. Provides buttons to start & stop recording, and
 * function to set the location of recorded movie.
 * @author Bernard Horan
 */
public class MovieControlPanel extends javax.swing.JPanel {
    private static final Logger logger = Logger.getLogger(MovieControlPanel.class.getName());
    private String movieFilename;
    private MovieRecorderCell recorderCell;
    private SoftphoneControl sc = SoftphoneControlImpl.getInstance();

    /** Creates new form MovieControlPanel
     * @param recorderCell the movie recorder cell controlled by this panel
     */
    public MovieControlPanel(MovieRecorderCell recorderCell) {
        this.recorderCell = recorderCell;
        initComponents();
        movieDirectoryField.setText(getDefaultMovieDirectory());
        previewPanel.setLayout(new GridBagLayout());
        previewPanel.add(recorderCell.getCaptureComponent());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        controlPanel = new javax.swing.JPanel();
        recorderStatusLabel = new javax.swing.JLabel();
        recordButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        movieDirectoryField = new javax.swing.JTextField();
        outputDirectoryLabel1 = new javax.swing.JLabel();
        moviePathBrowseButton = new javax.swing.JButton();
        previewPanel = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        recorderStatusLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        recorderStatusLabel.setText("Offline");
        recorderStatusLabel.setToolTipText("Recorder Status");

        recordButton.setText("Record");
        recordButton.setToolTipText("Click to start recording the world");
        recordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recordButtonActionPerformed(evt);
            }
        });

        stopButton.setText("Stop");
        stopButton.setToolTipText("Click to stop recording and create a movie");
        stopButton.setEnabled(false);
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        movieDirectoryField.setEditable(false);
        movieDirectoryField.setToolTipText("Directory for saving the movie");

        outputDirectoryLabel1.setText("Output Directory:");

        moviePathBrowseButton.setText("Select...");
        moviePathBrowseButton.setToolTipText("Browse");
        moviePathBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moviePathBrowseButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout controlPanelLayout = new javax.swing.GroupLayout(controlPanel);
        controlPanel.setLayout(controlPanelLayout);
        controlPanelLayout.setHorizontalGroup(
            controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlPanelLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(controlPanelLayout.createSequentialGroup()
                        .addComponent(recordButton)
                        .addGap(18, 18, 18)
                        .addComponent(stopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(recorderStatusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(controlPanelLayout.createSequentialGroup()
                        .addComponent(outputDirectoryLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(movieDirectoryField, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(moviePathBrowseButton)))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        controlPanelLayout.setVerticalGroup(
            controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlPanelLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(outputDirectoryLabel1)
                    .addComponent(movieDirectoryField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(moviePathBrowseButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(recordButton)
                    .addComponent(stopButton)
                    .addComponent(recorderStatusLabel))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        add(controlPanel, java.awt.BorderLayout.PAGE_END);

        javax.swing.GroupLayout previewPanelLayout = new javax.swing.GroupLayout(previewPanel);
        previewPanel.setLayout(previewPanelLayout);
        previewPanelLayout.setHorizontalGroup(
            previewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 434, Short.MAX_VALUE)
        );
        previewPanelLayout.setVerticalGroup(
            previewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 373, Short.MAX_VALUE)
        );

        add(previewPanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void recordButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recordButtonActionPerformed
        recorderStatusLabel.setText("Recording");
        recorderStatusLabel.setForeground(Color.red);
        stopButton.setEnabled(true);
        disableButtons();

        File imageDirectoryFile = getImageDirectory();
        logger.info("imageDirectory: " + imageDirectoryFile);

        if (!imageDirectoryFile.exists()) {
            logger.info("Creating image directory");
            imageDirectoryFile.mkdirs();
        }


        Calendar calendar = Calendar.getInstance();
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat();
        simpleDateFormat.applyPattern("yyyyMMdd_HH.mm");
        movieFilename = "Wonderland_" + simpleDateFormat.format(calendar.getTime()) + ".mov";

        recorderCell.startRecording();
    }//GEN-LAST:event_recordButtonActionPerformed

    private void disableButtons() {
        enableButtons(false);
    }

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        stopButton.setEnabled(false);
        recorderCell.stopRecording();
        recorderStatusLabel.setText("Offline");
        recorderStatusLabel.setForeground(Color.BLACK);
        createMovie();
        deleteImageDirectory();
        enableButtons();
}//GEN-LAST:event_stopButtonActionPerformed

    private void createMovie() {
        MovieCreator mCreator = new MovieCreator(this);
        mCreator.createMovie();
    }

    private void enableButtons() {
        enableButtons(true);
    }

    private void enableButtons(boolean enable) {
        recordButton.setEnabled(enable);
        moviePathBrowseButton.setEnabled(enable);
    }

    /**
     * Just the name of the movie (not the path)
     * @return Only the name of the movie
     */
    public String getMovieFilename() {
        return movieFilename;
    }

    /**
     * The location of the JPEGs
     * @return A File identifying a directory/folder that contains the JPEGs of the recording
     */
    public File getImageDirectory() {
        return MovieRecorderCell.getImageDirectory();
    }

    /**
     * The direcotry into which the movie should be created
     * @return The absolute path of the location of the hdirectory in which the movie should be saved
     */
    public String getMovieDirectory() {
        return movieDirectoryField.getText();
    }

    private void deleteImageDirectory() {
        File dir = getImageDirectory();
        String[] children = dir.list();
        for (int i=0; i<children.length; i++) {
            new File(dir, children[i]).delete();

        }
        // The directory is now empty so delete it
        dir.delete();
    }

    /**
     * The frames per second at which the JPEGs were recorded
     * @return a float representing the frames per second that the JPEGs weere recorded
     */
    public float getCapturedFrameRate() {
        return recorderCell.getCapturedFrameRate();
    }

    private String getDefaultMovieDirectory() {
        String home = System.getProperty("user.home");
        //
        //Are we on a PC?
        File myDocuments = new File(home + File.separator + "My Documents");
        if (myDocuments.exists()) {
            return myDocuments.toString();
        }
        //
        //Or a Mac?
        File movies = new File(home + File.separator + "Movies");
        if (movies.exists()) {
            return movies.toString();
        }
        //
        //Or Gnome?
        File documents = new File(home + File.separator + "Documents");
        if (documents.exists()) {
            return documents.toString();
        }
        //
        //Otherwise
        return home;
    }

    private void moviePathBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moviePathBrowseButtonActionPerformed
        JFileChooser outputPathFileChooser = new JFileChooser();

        outputPathFileChooser.setDialogTitle("Movie Directory");
        outputPathFileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        outputPathFileChooser.setAcceptAllFileFilterUsed(false);

        int outputPath = outputPathFileChooser.showOpenDialog(this);

        if (outputPath == JFileChooser.APPROVE_OPTION) {
            movieDirectoryField.setText(outputPathFileChooser.getSelectedFile().getAbsolutePath());
        }
}//GEN-LAST:event_moviePathBrowseButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel controlPanel;
    private javax.swing.JTextField movieDirectoryField;
    private javax.swing.JButton moviePathBrowseButton;
    private javax.swing.JLabel outputDirectoryLabel1;
    private javax.swing.JPanel previewPanel;
    private javax.swing.JButton recordButton;
    private javax.swing.JLabel recorderStatusLabel;
    private javax.swing.JButton stopButton;
    // End of variables declaration//GEN-END:variables

}
