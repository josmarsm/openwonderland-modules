/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MovieControlPanel.java
 *
 * Created on Sep 2, 2009, 2:11:58 PM
 */

package org.jdesktop.wonderland.modules.movierecorder.client;

import java.awt.Color;
import java.awt.GridBagLayout;
import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.SpinnerNumberModel;
import org.jdesktop.wonderland.client.softphone.SoftphoneControl;
import org.jdesktop.wonderland.client.softphone.SoftphoneControlImpl;
import org.jdesktop.wonderland.modules.movierecorder.client.utils.MovieCreator;

/**
 *
 * @author Bernard Horan
 */
public class MovieControlPanel extends javax.swing.JPanel {
    private static final Logger logger = Logger.getLogger(MovieControlPanel.class.getName());
    private String audioFilename;
    private String movieFilename;
    private MovieRecorderCell recorderCell;
    private SoftphoneControl sc = SoftphoneControlImpl.getInstance();

    /** Creates new form MovieControlPanel */
    public MovieControlPanel(MovieRecorderCell recorderCell) {
        this.recorderCell = recorderCell;
        audioFilename = getImageDirectory() + File.separator + "SipRecording.au";
        initComponents();
        movieDirectoryField.setText(getDefaultMovieDirectory());
        fpsSpinner.setModel(new SpinnerNumberModel(10, 1, 30, 1));
        scaleSpinner.setModel(new SpinnerNumberModel(0.5, 0.1, 1, 0.1));
        JSpinner.NumberEditor editor = new JSpinner.NumberEditor(scaleSpinner,"0%");
        scaleSpinner.setEditor(editor);
        previewPanel.setLayout(new GridBagLayout());
        previewPanel.add(recorderCell.getCaptureComponent());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        controlPanel = new javax.swing.JPanel();
        recorderStatusLabel = new javax.swing.JLabel();
        recordButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        fpsSpinner = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        scaleSpinner = new javax.swing.JSpinner();
        movieDirectoryField = new javax.swing.JTextField();
        outputDirectoryLabel1 = new javax.swing.JLabel();
        moviePathBrowseButton = new javax.swing.JButton();
        recordAudioCheckBox = new javax.swing.JCheckBox();
        previewPanel = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        recorderStatusLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        recorderStatusLabel.setText("Offline");
        recorderStatusLabel.setToolTipText("Recorder Status");

        recordButton.setText("Record");
        recordButton.setToolTipText("Click to start recording the world");
        recordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recordButtonActionPerformed(evt);
            }
        });

        stopButton.setText("Stop");
        stopButton.setToolTipText("Click to stop recording and create a movie");
        stopButton.setEnabled(false);
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Framerate:");

        fpsSpinner.setToolTipText("Frame Rate");

        jLabel2.setText("Scale:");

        movieDirectoryField.setEditable(false);
        movieDirectoryField.setToolTipText("Directory for saving the movie");

        outputDirectoryLabel1.setText("Output Directory:");

        moviePathBrowseButton.setText("Select...");
        moviePathBrowseButton.setToolTipText("Browse");
        moviePathBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moviePathBrowseButtonActionPerformed(evt);
            }
        });

        recordAudioCheckBox.setSelected(true);
        recordAudioCheckBox.setText("Record Audio");
        recordAudioCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));

        javax.swing.GroupLayout controlPanelLayout = new javax.swing.GroupLayout(controlPanel);
        controlPanel.setLayout(controlPanelLayout);
        controlPanelLayout.setHorizontalGroup(
            controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 507, Short.MAX_VALUE)
            .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(controlPanelLayout.createSequentialGroup()
                    .addGap(12, 12, 12)
                    .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(controlPanelLayout.createSequentialGroup()
                            .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(outputDirectoryLabel1)
                                .addGroup(controlPanelLayout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(fpsSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(controlPanelLayout.createSequentialGroup()
                                    .addComponent(jLabel2)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(scaleSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(21, 21, 21)
                                    .addComponent(recordAudioCheckBox))
                                .addGroup(controlPanelLayout.createSequentialGroup()
                                    .addComponent(movieDirectoryField, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(moviePathBrowseButton))))
                        .addGroup(controlPanelLayout.createSequentialGroup()
                            .addComponent(recordButton)
                            .addGap(16, 16, 16)
                            .addComponent(stopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(recorderStatusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(25, Short.MAX_VALUE)))
        );
        controlPanelLayout.setVerticalGroup(
            controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 130, Short.MAX_VALUE)
            .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(controlPanelLayout.createSequentialGroup()
                    .addGap(10, 10, 10)
                    .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(controlPanelLayout.createSequentialGroup()
                            .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(fpsSpinner)
                                    .addComponent(jLabel1))
                                .addComponent(scaleSpinner)
                                .addComponent(recordAudioCheckBox))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(outputDirectoryLabel1)
                                .addComponent(movieDirectoryField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(moviePathBrowseButton))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(recordButton)
                                .addComponent(stopButton))
                            .addGap(11, 11, 11))
                        .addComponent(recorderStatusLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                    .addGap(10, 10, 10)))
        );

        add(controlPanel, java.awt.BorderLayout.PAGE_END);

        javax.swing.GroupLayout previewPanelLayout = new javax.swing.GroupLayout(previewPanel);
        previewPanel.setLayout(previewPanelLayout);
        previewPanelLayout.setHorizontalGroup(
            previewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 507, Short.MAX_VALUE)
        );
        previewPanelLayout.setVerticalGroup(
            previewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 338, Short.MAX_VALUE)
        );

        add(previewPanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void recordButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recordButtonActionPerformed
        recorderStatusLabel.setText("Recording");
        recorderStatusLabel.setForeground(Color.red);
        stopButton.setEnabled(true);
        disableButtons();

        File imageDirectoryFile = getImageDirectory();
        logger.info("imageDirectory: " + imageDirectoryFile);

        if (!imageDirectoryFile.exists()) {
            logger.info("Creating image directory");
            imageDirectoryFile.mkdirs();
        }


        Calendar calendar = Calendar.getInstance();
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat();
        simpleDateFormat.applyPattern("yyyyMMdd_HH.mm");
        movieFilename = "Wonderland_" + simpleDateFormat.format(calendar.getTime()) + ".mov";



        if (recordsAudio()) {
            try {
                System.err.println("Recording audio to: " + audioFilename);
                sc.recordReceivedAudio(audioFilename);
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
        setFrameRate();
        recorderCell.startRecording(getScale());

    }//GEN-LAST:event_recordButtonActionPerformed

    /**
     * Did the user select the checkbox to record audio
     * @return a boolean indicating if the user wishes to record audio
     */
    public boolean recordsAudio() {
        return recordAudioCheckBox.getModel().isSelected();
    }

    private void disableButtons() {
        enableButtons(false);
    }


    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        stopButton.setEnabled(false);
        if (recordsAudio()) {
            System.err.println("STOP Recording audio to: " + audioFilename);
            sc.stopRecordingReceivedAudio();
        }
        recorderCell.stopRecording();
        restoreOldFrameRate();
        recorderStatusLabel.setText("Offline");
        recorderStatusLabel.setForeground(Color.BLACK);
        createMovie();
        if (recordsAudio()) {
            //deleteAudioFile();
        }
        //deleteImageDirectory();
        enableButtons();
}//GEN-LAST:event_stopButtonActionPerformed

    private void createMovie() {
        MovieCreator mCreator = new MovieCreator(this);
        mCreator.createMovie();
    }

    private void enableButtons() {
        enableButtons(true);
    }

    private void enableButtons(boolean enable) {
        recordButton.setEnabled(enable);
        fpsSpinner.setEnabled(enable);
        moviePathBrowseButton.setEnabled(enable);
        scaleSpinner.setEnabled(enable);
        recordAudioCheckBox.setEnabled(enable);
    }

    /**
     * The full path of the location o fthe audio file
     * @return A string locating the path of the audio file
     */
    public String getAudioFilename() {
        return audioFilename;
    }

    /**
     * Just the name of the movie (not the path)
     * @return Only the name of the movie
     */
    public String getMovieFilename() {
        return movieFilename;
    }

    /**
     * The location of the JPEGs
     * @return A File identifying a directory/folder that contains the JPEGs of the recording
     */
    public File getImageDirectory() {
        return recorderCell.getImageDirectory();
    }


    private float getScale() {
        SpinnerNumberModel scaleModel = (SpinnerNumberModel) scaleSpinner.getModel();
        return scaleModel.getNumber().floatValue();
    }

    /**
     * The direcotry into which the movie should be created
     * @return The absolute path of the location of the hdirectory in which the movie should be saved
     */
    public String getMovieDirectory() {
        return movieDirectoryField.getText();
    }

    private void deleteAudioFile() {
        new File(getAudioFilename()).delete();
    }

    private void deleteImageDirectory() {
        File dir = getImageDirectory();
        String[] children = dir.list();
        for (int i=0; i<children.length; i++) {
            new File(dir, children[i]).delete();

        }
        // The directory is now empty so delete it
        dir.delete();
    }

    /**
     * The frames per second at which the JPEGs were recorded
     * @return a float representing the frames per second that the JPEGs weere recorded
     */
    public float getCapturedFrameRate() {
        return recorderCell.getCapturedFrameRate();
    }

    private void setFrameRate() {
        SpinnerNumberModel fpsModel = (SpinnerNumberModel) fpsSpinner.getModel();
        int fps = fpsModel.getNumber().intValue();
        logger.info("Frame rate: " + fps);
        long cycleTime = (long)(1000/fps);
//        oldFrameRate = WonderlandUniverseFactory.getUniverse().getViewer().getView().getMinimumFrameCycleTime();
//        WonderlandUniverseFactory.getUniverse().getViewer().getView().setMinimumFrameCycleTime(cycleTime);
    }

    private String getDefaultMovieDirectory() {
        String home = System.getProperty("user.home");
        //
        //Are we on a PC?
        File myDocuments = new File(home + File.separator + "My Documents");
        if (myDocuments.exists()) {
            return myDocuments.toString();
        }
        //
        //Or a Mac?
        File movies = new File(home + File.separator + "Movies");
        if (movies.exists()) {
            return movies.toString();
        }
        //
        //Or Gnome?
        File documents = new File(home + File.separator + "Documents");
        if (documents.exists()) {
            return documents.toString();
        }
        //
        //Otherwise
        return home;
    }

    private void restoreOldFrameRate() {
        //WonderlandUniverseFactory.getUniverse().getViewer().getView().setMinimumFrameCycleTime(oldFrameRate);
    }

    private void moviePathBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moviePathBrowseButtonActionPerformed
        JFileChooser outputPathFileChooser = new JFileChooser();

        outputPathFileChooser.setDialogTitle("Movie Directory");
        outputPathFileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        outputPathFileChooser.setAcceptAllFileFilterUsed(false);

        int outputPath = outputPathFileChooser.showOpenDialog(this);

        if (outputPath == JFileChooser.APPROVE_OPTION) {
            movieDirectoryField.setText(outputPathFileChooser.getSelectedFile().getAbsolutePath());
        }
}//GEN-LAST:event_moviePathBrowseButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel controlPanel;
    private javax.swing.JSpinner fpsSpinner;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField movieDirectoryField;
    private javax.swing.JButton moviePathBrowseButton;
    private javax.swing.JLabel outputDirectoryLabel1;
    private javax.swing.JPanel previewPanel;
    private javax.swing.JCheckBox recordAudioCheckBox;
    private javax.swing.JButton recordButton;
    private javax.swing.JLabel recorderStatusLabel;
    private javax.swing.JSpinner scaleSpinner;
    private javax.swing.JButton stopButton;
    // End of variables declaration//GEN-END:variables

}
