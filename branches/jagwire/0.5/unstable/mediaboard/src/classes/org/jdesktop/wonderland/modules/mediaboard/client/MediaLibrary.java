/**
  * iSocial Project
  * http://isocial.missouri.edu
  *
  * Copyright (c) 2011, University of Missouri iSocial Project, All 
  * Rights Reserved
  *
  * Redistributions in source code form must reproduce the above
  * copyright and this condition.
  *
  * The contents of this file are subject to the GNU General Public
  * License, Version 2 (the "License"); you may not use this file
  * except in compliance with the License. A copy of the License is
  * available at http://www.opensource.org/licenses/gpl-license.php.
  *
  * The iSocial project designates this particular file as
  * subject to the "Classpath" exception as provided by the iSocial
  * project in the License file that accompanied this code.
  */

package org.jdesktop.wonderland.modules.mediaboard.client;

import javax.swing.JPanel;
import org.jdesktop.wonderland.client.hud.HUDComponent;
import org.jdesktop.wonderland.client.login.ServerSessionManager;
import org.jdesktop.wonderland.modules.contentrepo.client.ContentRepository;
import org.jdesktop.wonderland.modules.contentrepo.client.ContentRepositoryRegistry;
import org.jdesktop.wonderland.modules.contentrepo.common.ContentCollection;
import org.jdesktop.wonderland.modules.mediaboard.client.cell.WhiteboardCell;
/**
 * In order to use the media library effectively, all users should be in the
 * group: 'media' and there should exist a directory structure within
 * content-root as follows: /groups/media
 * @author ryan
 */
public class MediaLibrary extends javax.swing.JPanel {

    /** Creates new form MediaLibrary */
    private WhiteboardCell cell = null;
    private ContentRepository repository = null;
    private ContentCollection mediaRoot = null;
    private static MediaLibrary instance = null;
    private WhiteboardDocument document = null;
    private HUDComponent component = null;

    /**
     *
     * @param cell NEVER null
     * @param component can be null
     * @return
     */

    public MediaLibrary(WhiteboardCell cell, WhiteboardDocument document) {
        initComponents();
        System.out.println("Media library constructor!");
        this.cell = cell;
        this.document = document;
        ServerSessionManager manager = cell.getCellCache().getSession().getSessionManager();
        repository = ContentRepositoryRegistry.getInstance().getRepository(manager);
        try {
            ContentCollection root = repository.getRoot();
            ContentCollection groupsRoot = (ContentCollection)root.getChild("groups");
            if(groupsRoot == null) {
                System.out.println("NO GROUPS DIRECTORY!!!");
            }
            mediaRoot = (ContentCollection)groupsRoot.getChild("media");
            if(mediaRoot == null) {
                System.out.println("NO MEDIA DIRECTORY!!!");
            }

        } catch(Exception e) {
            e.printStackTrace();
        }
        System.out.println("try block passed!");
    }

    private void addDefaultPanels() {
        //TODO add MediaImagesPanel
        //TODO add MediaBoardsPanel
        System.out.println("Adding default panels!");
        try {
            ContentCollection imagesRoot = (ContentCollection)mediaRoot.getChild("images");
            ContentCollection boardsRoot = (ContentCollection)mediaRoot.getChild("boards");
            tabbedPanel.add("images", new MediaImagesPanel(imagesRoot, document, component));
            tabbedPanel.add("boards", new MediaDocumentPanel(boardsRoot, document, component));

        }
        catch(Exception e) {
            e.printStackTrace();
        }
        System.out.println("try block passed!");

       
    }

    public void addMediaPanel(JPanel mediaPanel) {
        tabbedPanel.add(mediaPanel);
    }

    public void setHUDComponent(HUDComponent component) {
        this.component = component;
        addDefaultPanels();
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabbedPanel = new javax.swing.JTabbedPane();

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(tabbedPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 599, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(tabbedPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 505, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane tabbedPanel;
    // End of variables declaration//GEN-END:variables

}
