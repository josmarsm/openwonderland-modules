/**
  * iSocial Project
  * http://isocial.missouri.edu
  *
  * Copyright (c) 2011, University of Missouri iSocial Project, All 
  * Rights Reserved
  *
  * Redistributions in source code form must reproduce the above
  * copyright and this condition.
  *
  * The contents of this file are subject to the GNU General Public
  * License, Version 2 (the "License"); you may not use this file
  * except in compliance with the License. A copy of the License is
  * available at http://www.opensource.org/licenses/gpl-license.php.
  *
  * The iSocial project designates this particular file as
  * subject to the "Classpath" exception as provided by the iSocial
  * project in the License file that accompanied this code.
  */

package org.jdesktop.wonderland.modules.mediaboard.client;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import org.apache.batik.dom.svg.SAXSVGDocumentFactory;
import org.apache.batik.util.XMLResourceDescriptor;
import org.jdesktop.wonderland.client.assetmgr.Asset;
import org.jdesktop.wonderland.client.assetmgr.AssetManager;
import org.jdesktop.wonderland.client.hud.HUDComponent;
import org.jdesktop.wonderland.client.login.LoginManager;
import org.jdesktop.wonderland.common.AssetURI;
import org.jdesktop.wonderland.modules.contentrepo.common.ContentCollection;
import org.jdesktop.wonderland.modules.contentrepo.common.ContentNode;
import org.jdesktop.wonderland.modules.contentrepo.common.ContentRepositoryException;
import org.jdesktop.wonderland.modules.contentrepo.common.ContentResource;

/**
 *
 * @author ryan
 */
public class MediaDocumentPanel extends javax.swing.JPanel {

    public static final SAXSVGDocumentFactory factory = new SAXSVGDocumentFactory(XMLResourceDescriptor.getXMLParserClassName());
    /** Creates new form MediaDocumentPanel */
   private ContentCollection boardsRoot = null;
   private Map<String, String> filenamesToURL = null;
   private DefaultListModel model = null;
   private WhiteboardDocument document = null;
   private HUDComponent component = null;
   private static final String WEBDAV_PATH = "webdav/content/groups/media/boards/";
   private static final Logger logger = Logger.getLogger(MediaDocumentPanel.class.getName());
    public MediaDocumentPanel(ContentCollection boardsRoot,
                             WhiteboardDocument document,
                             HUDComponent component) {
        initComponents();
        this.boardsRoot = boardsRoot;
        this.document = document;
        this.component = component;
        model = new DefaultListModel();
        filenamesToURL = new HashMap<String, String>();
        jList1.setModel(model);
        
        //System.out.println("[iSocial] Populating list...");
        logger.warning("Populating list of mediaboards.");
        try {
            populateList();

        }
        catch(Exception e) {
            
        }

    }

    @Override
    public void setVisible(boolean b) {
        super.setVisible(b);
        try {
            populateList();
        } catch (ContentRepositoryException ex) {
            Logger.getLogger(MediaDocumentPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MediaDocumentPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void populateList() throws ContentRepositoryException, IOException {
        if(boardsRoot == null) {
            return;
        }

        if(boardsRoot.getChildren() == null || boardsRoot.getChildren().isEmpty()) {
            return;
        }

        for(ContentNode node: boardsRoot.getChildren()) {
            if(node instanceof ContentResource) {
                //System.out.println("[iSocial] found a board.");
                
                ContentResource resource = (ContentResource)node;
                filenamesToURL.put( resource.getName() , resource.getURL().toString());
                model.addElement(resource.getName());
            }
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        openButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        openButton.setText("Open");
        openButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE)
            .add(layout.createSequentialGroup()
                .add(9, 9, 9)
                .add(openButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 38, Short.MAX_VALUE)
                .add(cancelButton)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 442, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 20, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(openButton)
                    .add(cancelButton))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void openButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openButtonActionPerformed
        // TODO add your handling code here:
        String uri = new String();
        String value = (String)jList1.getSelectedValue();

        value = value.replace(" ", "_");

        uri = "wl"+LoginManager.getPrimary().getServerURL() + WEBDAV_PATH
                + value;
//        uri = "wlcontent://groups/media/boards/" + (String)jList1.getSelectedValue();
        System.out.println("opening uri: " +uri);
        document.getWindow().sync(true);
        document.openDocument(uri, true);

        document.getWindow().setTitle((String)jList1.getSelectedValue());
//        try {
//            File file = getFileFromServer(uri);
//            String xmlFromFile = putFileIntoString(file);
//            SVGDocument svgDocument = (SVGDocument) WhiteboardUtils.xmlStringToDocument(xmlFromFile);
//           ((WhiteboardApp)document.getWindow().getApp()).setDocument(svgDocument, true);
//            //((WhiteboardApp) this.getApp()).setDocument(svgDocument, false);
//        } catch (Exception ex) {
//            Logger.getLogger(MediaDocumentPanel.class.getName()).log(Level.SEVERE, null, ex);
//        }
        component.setVisible(false);
    }//GEN-LAST:event_openButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        // TODO add your handling code here:
        component.setVisible(false);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private String putFileIntoString(File file) {
        byte[] buffer = new byte[(int)file.length()];
        BufferedInputStream stream = null;
        try {
            stream = new BufferedInputStream(new FileInputStream(file));
            stream.read(buffer);
        } catch(Exception e) {
        
        } finally {
            if(stream != null) {
                try {
                    stream.close();
                } catch(Exception ignored) { }

            }
        }
        return new String(buffer);
    }

    private File getFileFromServer(String uri) {
        AssetURI assetURI = AssetURI.uriFactory(uri);
        WhiteboardClientUtils.annotateURI(assetURI);
        Asset asset = AssetManager.getAssetManager().getAsset(assetURI);

        if (asset == null) {
            //logger.warning("Null AssetURI for " + uri);
            return null;
        } else {
            // Fetch the asset and wait for it to download
            if (AssetManager.getAssetManager().waitForAsset(asset) == true) {
                return asset.getLocalCacheFile();
            }
            return null;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton openButton;
    // End of variables declaration//GEN-END:variables

}
